{
  "carousel_2_code_files": [
    {
      "path": "container/carousel",
      "content": "\"use client\";\nimport { useOutsideClick } from \"@/hooks/outside-click\";\nimport { cn } from \"@/lib/utils\";\nimport { IconArrowNarrowLeft, IconArrowNarrowRight } from \"@tabler/icons-react\";\nimport { motion } from \"framer-motion\";\nimport Image, { ImageProps } from \"next/image\";\nimport {\n  createContext,\n  Fragment,\n  JSX,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\ninterface CarouselProps {\n  items: JSX.Element[];\n  initialScroll?: number;\n  cardGap?: number;\n  scrollOffset?: number;\n}\n\ninterface Card {\n  src: string;\n  title: string;\n  category: string;\n}\nconst CarouselContext = createContext<{}\n  onCardClick: (index: number) => void;\n  currentIndex: number;\n}>({\n  onCardClick: () => {},\n  currentIndex: 0,\n});\nexport const Carousel = ({\n  items,\n  initialScroll = 0,\n  cardGap = 16,\n  scrollOffset = 300,\n}: CarouselProps) => {\n  const carouselRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const checkScrollAbility = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n  useEffect(() => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollLeft = initialScroll;\n      checkScrollAbility();\n    }\n  }, [initialScroll]);\n  const scroll = (direction: \"left\" | \"right\") => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({\n        left: direction === \"left\" ? -scrollOffset : scrollOffset,\n        behavior: \"smooth\",\n      });\n    }\n  };\n  const handleCarouselClick = (index: number) => {\n    setCurrentIndex(index);\n  };\n  return (\n    <CarouselContext.Provider\n      value={{ onCardClick: handleCarouselClick, currentIndex }}\n    >\n      <div className=\"relative w-full py-0 !my-12 \">\n        <div className=\"flex justify-end space-x-2\">\n          <button\n            className=\"relative z-40 h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\"\n            onClick={() => scroll(\"left\")}\n            disabled={!canScrollLeft}\n          >\n            <IconArrowNarrowLeft className=\"h-7 w-7 text-gray-500\" />\n          </button>\n          <button\n            className=\"relative z-40 h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\"\n            onClick={() => scroll(\"right\")}\n            disabled={!canScrollRight}\n          >\n            <IconArrowNarrowRight className=\"h-7 w-7 text-gray-500\" />\n          </button>\n        </div>\n        <div\n          className=\"flex w-full overflow-x-scroll py-6 scroll-smooth  [scrollbar-width:none]\"\n          ref={carouselRef}\n          onScroll={checkScrollAbility}\n        >\n          <div\n            className=\"flex flex-row justify-end\"\n            style={{ gap: `${cardGap}px` }}\n          >\n            {items.map((item, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  transition: { duration: 0.5, delay: 0.3 * index },\n                }}\n              >\n                {item}\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </CarouselContext.Provider>\n  );\n};\nexport const Card = ({\n  card,\n  index,\n  layout = false,\n}: {\n  card: Card;\n  index: number;\n  layout?: boolean;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n  useOutsideClick(containerRef, () => setIsOpen(false));\n  const handleCardClick = () => {\n    setIsOpen(true);\n    if (cardRef.current) {\n      cardRef.current.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"nearest\",\n        inline: \"center\",\n      });\n    }\n  };\n  return (\n    <Fragment>\n      <motion.div\n        ref={cardRef}\n        layoutId={layout ? `card-${card.title}` : undefined}\n        onClick={handleCardClick}\n        className=\"rounded-3xl cursor-pointer bg-gray-100 dark:bg-neutral-900 h-[18rem] md:h-[37rem] w-56 md:w-96 overflow-hidden flex flex-col items-start justify-start relative z-10\"\n      >\n        <div className=\"absolute h-full top-0 inset-x-0 bg-gradient-to-b from-black/50 via-transparent to-transparent z-30 pointer-events-none\" />\n        <div className=\"relative z-40 p-4 md:p-8\">\n          <motion.p\n            layoutId={layout ? `category-${card.category}` : undefined}\n            className=\"text-white/60 text-sm md:text-base font-medium font-sans text-left\"\n          >\n            {card.category}\n          </motion.p>\n          <motion.p\n            layoutId={layout ? `title-${card.title}` : undefined}\n            className=\"text-white text-lg md:text-xl lg:text-3xl font-semibold max-w-xs text-left\"\n          >\n            {card.title}\n          </motion.p>\n        </div>\n        <BlurImage\n          src={card.src}\n          alt={card.title}\n          fill\n          className=\"object-cover absolute z-10 inset-0\"\n        />\n      </motion.div>\n    </Fragment>\n  );\n};\nexport const BlurImage = ({\n  height,\n  width,\n  src,\n  className,\n  alt,\n  ...rest\n}: ImageProps) => {\n  const [isLoading, setLoading] = useState(true);\n  return (\n    <Image\n      className={cn(\n        \"transition duration-300\",\n        isLoading ? \"blur-sm\" : \"blur-0\",\n        className,\n      )}\n      onLoad={() => setLoading(false)}\n      src={src}\n      width={width}\n      height={height}\n      loading=\"lazy\"\n      decoding=\"async\"\n      blurDataURL={typeof src === \"string\" ? src : undefined}\n      alt={alt ? alt : \"Background of a beautiful view\"}\n      {...rest}\n    />\n  );\n};\n"
    },
    {
      "path": "components/carousel-container.tsx",
      "content": "import { CarouselsData } from \"@/constant\";\nimport { Card, Carousel } from \"@/components/carousel-2/carousel\";\n\nconst CarouselContainer = () => {\n  const cards = CarouselsData.map((card, index) => (\n    <Card key={card.src} card={card} index={index} />\n  ));\n  return <Carousel items={cards} />;\n};\n\nexport default CarouselContainer;\n"
    },
    {
      "path": "constant/index.ts",
      "content": "export const CarouselsData = [\n  {\n    id: 1,\n    title: \"E-commerce web app\",\n    description: \"An E-commerce web app for lighting store\",\n    image: \"/blocks/carousel-big/block-1.png\",\n    link: \"https://eg-artlighting.vercel.app\",\n  },\n  {\n    id: 2,\n    title: \"E-commerce web app\",\n    description: \"An E-commerce web app for lighting store\",\n    image: \"/blocks/carousel-big/block-2.png\",\n    link: \"https://casescobra-cuxh.vercel.app/\",\n  },\n  {\n    id: 3,\n    title: \"E-commerce web app\",\n    description: \"An E-commerce web app for lighting store\",\n    image: \"/blocks/carousel-big/block-3.png\",\n    link: \"https://modern-website-gold.vercel.app/\",\n  },\n];\n"
    },
    {
      "path": "hooks/outside-click.ts",
      "content": "import React, { useEffect } from \"react\";\n\nexport const useOutsideClick = (\n  ref: React.RefObject<HTMLDivElement>,\n  callback: Function,\n) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};\n"
    }
  ]
}
