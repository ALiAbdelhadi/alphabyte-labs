{
  "carousel_1_code_files": [
    {
      "path": "container/carousel",
      "content": "use client\";\nimport { useOutsideClick } from \"@/hooks/outside-click\";\nimport { cn } from \"@/lib/utils\";\nimport { IconArrowNarrowLeft, IconArrowNarrowRight } from \"@tabler/icons-react\";\nimport { motion } from \"framer-motion\";\nimport Image, { ImageProps } from \"next/image\";\nimport { createContext, Fragment, JSX, useEffect, useRef, useState } from \"react\";\n\ninterface CarouselProps {\n  items: JSX.Element[];\n  initialScroll?: number;\n  cardGap?: number;\n  scrollOffset?: number;\n  initialActiveIndex?: number;\n}\n\ninterface Project {\n  id: number;\n  title: string;\n  description: string;\n  image: string;\n  link: string;\n}\n\nconst CarouselContext = createContext({\n  onCardClick: (index: number) => {},\n  currentIndex: 0,\n});\n\nexport const Carousel = ({\n  items,\n  initialScroll = 0,\n  cardGap = 16,\n  scrollOffset: initialScrollOffset,\n  initialActiveIndex = 1,\n}: CarouselProps) => {\n  const [scrollOffset, setScrollOffset] = useState(950);\n  useEffect(() => {\n    const WidthWindow = window.innerWidth;\n    setScrollOffset(WidthWindow < 789 ? 260 : 950);\n  }, []);\n  \n  const carouselRef = useRef<HTMLDivElement>(null);\n  const [canScrollLeft, setCanScrollLeft] = useState(false);\n  const [canScrollRight, setCanScrollRight] = useState(true);\n  const [currentIndex, setCurrentIndex] = useState(initialActiveIndex);\n\n  const checkScrollAbility = () => {\n    if (carouselRef.current) {\n      const { scrollLeft, scrollWidth, clientWidth } = carouselRef.current;\n      setCanScrollLeft(scrollLeft > 0);\n      setCanScrollRight(scrollLeft < scrollWidth - clientWidth);\n    }\n  };\n\n  useEffect(() => {\n    if (carouselRef.current && initialActiveIndex !== undefined) {\n      const itemWidth = carouselRef.current.offsetWidth - 500;\n      const scrollTo = itemWidth * initialActiveIndex;\n      carouselRef.current.scrollTo({ left: scrollTo, behavior: \"smooth\" });\n    }\n  }, [initialActiveIndex]);\n\n  const scroll = (direction: \"left\" | \"right\") => {\n    if (carouselRef.current) {\n      carouselRef.current.scrollBy({\n        left: direction === \"left\" ? -scrollOffset : scrollOffset,\n        behavior: \"smooth\",\n      });\n    }\n  };\n  \n  const handleCarouselClick = (index: number) => {\n    setCurrentIndex(index);\n  };\n\n  return (\n    <CarouselContext.Provider value={{ onCardClick: handleCarouselClick, currentIndex }}>\n      <div className=\"relative w-full py-0 my-12\">\n        <div className=\"flex justify-end space-x-2\">\n          <button className=\"relative z-40 h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\" onClick={() => scroll(\"left\")} disabled={!canScrollLeft}>\n            <IconArrowNarrowLeft className=\"h-7 w-7 text-gray-500\" />\n          </button>\n          <button className=\"relative z-40 h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center disabled:opacity-50\" onClick={() => scroll(\"right\")} disabled={!canScrollRight}>\n            <IconArrowNarrowRight className=\"h-7 w-7 text-gray-500\" />\n          </button>\n        </div>\n        <div className=\"flex w-full overflow-x-scroll py-6 scroll-smooth [scrollbar-width:none]\" ref={carouselRef} onScroll={checkScrollAbility}>\n          <div className=\"flex flex-row justify-end gap-4\" style={{ gap: `${cardGap}px` }}>\n            {items.map((item, index) => (\n              <motion.div key={index} className=\"rounded-3xl\" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0, transition: { duration: 0.5, delay: 0.3 * index }}}>\n                {item}\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </CarouselContext.Provider>\n  );\n};"
    },
    {
      "path": "components/carousel-container.tsx",
      "content": "import { CarouselBigDataForBlock } from \"@/constant\";\nimport Link from \"next/link\";\nimport { CardProject, CarouselProject } from \"./carousel-big-card\";\n\nconst CarouselContainer = () => {\n  const projectCards = CarouselBigDataForBlock.map((project, index) => (\n    <Link href={project.link} key={project.id} className=\"not-prose\">\n      <CardProject project={project} index={index} />\n    </Link>\n  ));\n  return <CarouselProject items={projectCards} />;\n};\n\nexport default CarouselContainer;"
    },
    {
      "path": "constant/index.ts",
      "content": "export const CarouselsData = [\n  {\n    \"category\": \"Artificial Intelligence\",\n    \"title\": \"You can do more with AI.\",\n    \"src\": \"/blocks/carousel/design-process-2.jpg\"\n  },\n  {\n    \"category\": \"Productivity\",\n    \"title\": \"Enhance your productivity.\",\n    \"src\": \"/blocks/carousel/design-process.jpg\"\n  },\n  {\n    \"category\": \"Product\",\n    \"title\": \"Launching the new Apple Vision Pro.\",\n    \"src\": \"/blocks/carousel/design-process.jpg\"\n  }\n];"
    },
    {
      "path": "hooks/outside-click.ts",
      "content": "import React, { useEffect } from \"react\";\n\nexport const useOutsideClick = (ref: React.RefObject<HTMLDivElement>, callback: Function) => {\n  useEffect(() => {\n    const listener = (event: any) => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      callback(event);\n    };\n    document.addEventListener(\"mousedown\", listener);\n    document.addEventListener(\"touchstart\", listener);\n    return () => {\n      document.removeEventListener(\"mousedown\", listener);\n      document.removeEventListener(\"touchstart\", listener);\n    };\n  }, [ref, callback]);\n};"
    }
  ]
}
