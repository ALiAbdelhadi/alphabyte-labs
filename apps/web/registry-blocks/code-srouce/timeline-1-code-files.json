{
  "timeline_1_code_files": [
    {
      "path": "components/Timeline.tsx",
      "content": "\"use client\";\nimport Container from \"@/components/Container\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, useScroll, useTransform, Variants } from \"framer-motion\";\nimport { useEffect, useRef, useState } from \"react\";\n\ninterface TimeLineProps {\n  title: string;\n  content: React.ReactNode;\n}\n\nconst cardVariants: Variants = {\n  offscreen: {\n    y: 75,\n    opacity: 0,\n  },\n  onscreen: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      duration: 0.4,\n    },\n  },\n};\n\nconst pointVariants: Variants = {\n  offscreen: {\n    scale: 0,\n    opacity: 0,\n  },\n  onscreen: {\n    scale: 1.1,\n    opacity: 1,\n    transition: {\n      duration: 0.3,\n    },\n  },\n};\n\nconst Timeline = ({ data }: { data: TimeLineProps[] }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [height, setHeight] = useState(0);\n  useEffect(() => {\n    const updateHeight = () => {\n      if (ref.current) {\n        const rect = ref.current.getBoundingClientRect();\n        setHeight(rect.height);\n      }\n    };\n    updateHeight();\n    window.addEventListener(\"resize\", updateHeight);\n    return () => window.removeEventListener(\"resize\", updateHeight);\n  }, []);\n\n  const { scrollYProgress } = useScroll({\n    target: containerRef,\n    offset: [\"start 0%\", \"end 50%\"],\n  });\n  const heightTransform = useTransform(scrollYProgress, [0, 1], [0, height]);\n  const opacityTransform = useTransform(scrollYProgress, [0, 0.1], [0, 1]);\n\n  return (\n    <div className=\"w-full my-24\" ref={containerRef}>\n      <Container>\n        <div className=\"mb-10 lg:mb-14\">\n          <h2 className=\"text-3xl md:text-4xl mb-4 text-center font-bold\">\n            How it works?\n          </h2>\n          <p className=\"text-muted-foreground text-center text-base md:text-lg\">\n            We work in a structured way. Here is how you will be onboard:\n          </p>\n        </div>\n        <div ref={ref} className=\"relative\">\n          <div className=\"absolute my-4 left-4 md:left-1/2 top-0 h-full w-[3px] bg-neutral-200 md:-translate-x-1/2\">\n            <motion.div\n              style={{\n                height: heightTransform,\n                opacity: opacityTransform,\n              }}\n              className=\"absolute inset-x-0 top-0 w-full bg-primary rounded-full\"\n            />\n          </div>\n          {data.map((item, index) => {\n            const isEven = index % 2 !== 0;\n            return (\n              <motion.div\n                key={index}\n                initial=\"offscreen\"\n                whileInView=\"onscreen\"\n                viewport={{ once: true, amount: 0.6 }}\n                className={cn(\n                  \"flex flex-col md:flex-row items-start mb-16 md:mb-24\",\n                  isEven ? \"md:flex-row-reverse\" : \"\",\n                )}\n              >\n                <motion.div\n                  variants={pointVariants}\n                  viewport={{ once: true }}\n                  className=\"absolute my-4 left-1.5 ml-[3px] lg:-ml-[8.5px] md:left-1/2 w-4 h-4 bg-primary rounded-full md:-translate-x-1/2\"\n                />\n                <motion.div\n                  variants={cardVariants}\n                  className={cn(\n                    \"w-full md:w-5/12 pl-12 md:pl-0 md:h-[70vh] h-[50vh]\",\n                    isEven ? \"md:pl-8\" : \"md:pr-8\",\n                  )}\n                >\n                  <h3 className=\"text-sm font-semibold text-primary\">\n                    {item.title}\n                  </h3>\n                  <div>{item.content}</div>\n                </motion.div>\n              </motion.div>\n            );\n          })}\n        </div>\n      </Container>\n    </div>\n  );\n};\nexport default Timeline;\n"
    },
    {
      "path": "components/timeline-container.tsx",
      "content": "import { TimeLineData } from \"@/constant\";\nimport Timeline from \"./Timeline\";\n\nconst TimelineContainer = () => {\n  return <Timeline data={TimeLineData} />;\n};\n\nexport default TimelineContainer;\n"
    }
  ]
}
