[
  {
    "slug": "/components/accordion",
    "title": "Accordion",
    "description": "The Accordion component is a container that can hold multiple items, each of which can be expanded or collapsed to show or hide its content.",
    "content": "<ComponentPreview name=\"accordion-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Accordion\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>accordion.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/accordion.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as AccordionPrimitive from \"@radix-ui/react-accordion\"\r\n            import { LuPlus } from \"react-icons/lu\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Accordion = React.forwardRef<\r\n            React.ElementRef<typeof AccordionPrimitive.Root>,\r\n            React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Root>\r\n            >(({ className, ...props }, ref) => (\r\n            <AccordionPrimitive.Root\r\n              ref={ref}\r\n              className={cn(\"w-full\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            Accordion.displayName = \"Accordion\"\r\n\r\n            const AccordionItem = React.forwardRef<\r\n            React.ElementRef<typeof AccordionPrimitive.Item>,\r\n            React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\r\n            >(({ className, ...props }, ref) => (\r\n            <AccordionPrimitive.Item\r\n              ref={ref}\r\n              className={cn(\r\n                \"border-b border-gray-200 dark:border-gray-800 overflow-hidden mb-2\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            AccordionItem.displayName = \"AccordionItem\"\r\n\r\n            const AccordionTrigger = React.forwardRef<\r\n            React.ElementRef<typeof AccordionPrimitive.Trigger>,\r\n            React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\r\n            >(({ className, children, ...props }, ref) => (\r\n            <AccordionPrimitive.Header className=\"flex\">\r\n              <AccordionPrimitive.Trigger\r\n                ref={ref}\r\n                className={cn(\r\n                  \"flex flex-1 items-center justify-between px-6 py-4 text-base font-medium text-gray-900 dark:text-gray-100 transition-all\",\r\n                  \"focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2\",\r\n                  \"group\",\r\n                  className\r\n                )}\r\n                {...props}\r\n              >\r\n                {children}\r\n                <div className=\"relative h-5 w-5 shrink-0\">\r\n                  <LuPlus className=\"absolute h-5 w-5 transition-transform duration-300 group-data-[state=open]:rotate-45\" />\r\n                </div>\r\n              </AccordionPrimitive.Trigger>\r\n            </AccordionPrimitive.Header>\r\n            ))\r\n            AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\r\n\r\n            const AccordionContent = React.forwardRef<\r\n            React.ElementRef<typeof AccordionPrimitive.Content>,\r\n            React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\r\n            >(({ className, children, ...props }, ref) => (\r\n            <AccordionPrimitive.Content\r\n              ref={ref}\r\n              className={cn(\r\n                \"overflow-hidden text-sm text-gray-700 dark:text-gray-300\",\r\n                \"data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\r\n                className\r\n              )}\r\n              {...props}\r\n            >\r\n              <div className={cn(\"px-6 pb-6 pt-0\", className)}>{children}</div>\r\n            </AccordionPrimitive.Content>\r\n            ))\r\n\r\n            AccordionContent.displayName = AccordionPrimitive.Content.displayName\r\n\r\n            export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\r\n\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import {\r\n      Accordion,\r\n      AccordionContent,\r\n      AccordionItem,\r\n      AccordionTrigger,\r\n      } from \"@/components/ui/accordion\"`}\n  </Pre>\n\n  <Pre className=\"language-typescript\">\n    {`<Accordion type=\"single\" collapsible>\r\n      <AccordionItem value=\"item-1\">\r\n        <AccordionTrigger>Section Title</AccordionTrigger>\r\n        <AccordionContent>\r\n          Content goes here\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n      </Accordion>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/alert-dialog",
    "title": "Alert Dialog",
    "description": "An Alert dialog component",
    "content": "<ComponentPreview name=\"alert-dialog-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Alert Dialog\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>alert-dialog.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre folderPath=\"components/alert-dialog.tsx\">\n          {`import * as React from \"react\"\r\n            import * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n            import { buttonVariants } from \"@/components/library/button\"\r\n\r\n            const AlertDialog = AlertDialogPrimitive.Root\r\n\r\n            const AlertDialogTrigger = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Trigger>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Trigger>\r\n            >(({ className, children, ...props }, ref) => (\r\n            <AlertDialogPrimitive.Trigger\r\n              ref={ref}\r\n              className={cn(\r\n                \"focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/50\",\r\n                className\r\n              )}\r\n              {...props}\r\n            >\r\n              {children}\r\n            </AlertDialogPrimitive.Trigger>\r\n            ))\r\n            AlertDialogTrigger.displayName = AlertDialogPrimitive.Trigger.displayName\r\n\r\n            const AlertDialogPortal = AlertDialogPrimitive.Portal\r\n\r\n            const AlertDialogOverlay = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n            >(({ className, ...props }, ref) => (\r\n            <AlertDialogPrimitive.Overlay\r\n              className={cn(\r\n                \"fixed inset-0 z-50 bg-black/40 backdrop-blur-md transition\",\r\n                \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n                \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n                className\r\n              )}\r\n              {...props}\r\n              ref={ref}\r\n            />\r\n            ))\r\n            AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\r\n\r\n            const alertDialogContentVariants = cva(\r\n            \"fixed z-50 w-[90%] max-w-md rounded-2xl border-none shadow-2xl\",\r\n            {\r\n              variants: {\r\n                appearance: {\r\n                  default: \"bg-white/95 dark:bg-neutral-900/95\",\r\n                  destructive: \"bg-red-50/95 dark:bg-red-950/95\",\r\n                },\r\n              },\r\n              defaultVariants: {\r\n                appearance: \"default\",\r\n              },\r\n            }\r\n            )\r\n\r\n            export interface AlertDialogContentProps\r\n            extends React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>,\r\n            VariantProps<typeof alertDialogContentVariants> {\r\n            closeOnClickOutside?: boolean\r\n            }\r\n\r\n            const AlertDialogContent = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n            AlertDialogContentProps\r\n            >(\r\n            (\r\n              {\r\n                className,\r\n                appearance,\r\n                closeOnClickOutside = true,\r\n                ...props\r\n              },\r\n              ref\r\n            ) => (\r\n              <AlertDialogPortal>\r\n                <AlertDialogOverlay\r\n                  onClick={closeOnClickOutside ? undefined : (e) => e.stopPropagation()}\r\n                />\r\n                <AlertDialogPrimitive.Content\r\n                  ref={ref}\r\n                  className={cn(\r\n                    alertDialogContentVariants({ appearance }),\r\n                    \"fixed left-[50%] top-[50%] z-50  translate-x-[-50%] translate-y-[-50%]\",\r\n                    \"p-6 text-center\",\r\n                    \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\r\n                    className\r\n                  )}\r\n                  {...props}\r\n                />\r\n              </AlertDialogPortal>\r\n            )\r\n            )\r\n            AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\r\n\r\n            const AlertDialogHeader = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"space-y-2 mb-4\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            AlertDialogHeader.displayName = \"AlertDialogHeader\"\r\n\r\n            const AlertDialogFooter = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-2 mt-4\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            AlertDialogFooter.displayName = \"AlertDialogFooter\"\r\n\r\n            const AlertDialogTitle = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n            >(({ className, ...props }, ref) => (\r\n            <AlertDialogPrimitive.Title\r\n              ref={ref}\r\n              className={cn(\r\n                \"text-xl font-semibold text-gray-900 dark:text-gray-100\",\r\n                \"tracking-tight\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\r\n\r\n            const AlertDialogDescription = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n            >(({ className, ...props }, ref) => (\r\n            <AlertDialogPrimitive.Description\r\n              ref={ref}\r\n              className={cn(\r\n                \"text-base text-gray-600 dark:text-gray-400\",\r\n                \"leading-relaxed\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            AlertDialogDescription.displayName =\r\n            AlertDialogPrimitive.Description.displayName\r\n\r\n            const AlertDialogAction = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action> & {\r\n              variant?: VariantProps<typeof buttonVariants>[\"variant\"]\r\n              size?: VariantProps<typeof buttonVariants>[\"size\"]\r\n            }\r\n            >(({ className, variant = \"default\", size = \"default\", ...props }, ref) => (\r\n            <AlertDialogPrimitive.Action\r\n              ref={ref}\r\n              className={cn(\r\n                buttonVariants({ variant, size }),\r\n                \"rounded-full text-base font-semibold px-4 py-2\",\r\n                \"transition-colors duration-200 ease-in-out\",\r\n                \"focus:outline-none focus:ring-2 focus:ring-blue-500/50\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\r\n\r\n            const AlertDialogCancel = React.forwardRef<\r\n            React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n            React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel> & {\r\n              variant?: VariantProps<typeof buttonVariants>[\"variant\"]\r\n              size?: VariantProps<typeof buttonVariants>[\"size\"]\r\n            }\r\n            >(({ className, variant = \"ghost\", size = \"default\", ...props }, ref) => (\r\n            <AlertDialogPrimitive.Cancel\r\n              ref={ref}\r\n              className={cn(\r\n                buttonVariants({ variant, size }),\r\n                \"rounded-full text-base font-semibold px-4 py-2\",\r\n                \"text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\",\r\n                \"transition-colors duration-200 ease-in-out\",\r\n                \"focus:outline-none focus:ring-2 focus:ring-blue-500/50\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\r\n\r\n            export {\r\n            AlertDialog,\r\n            AlertDialogAction,\r\n            AlertDialogCancel,\r\n            AlertDialogContent,\r\n            AlertDialogDescription,\r\n            AlertDialogFooter,\r\n            AlertDialogHeader,\r\n            AlertDialogOverlay,\r\n            AlertDialogPortal,\r\n            AlertDialogTitle,\r\n            AlertDialogTrigger,\r\n            alertDialogContentVariants\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      AlertDialog,\r\n      AlertDialogAction,\r\n      AlertDialogCancel,\r\n      AlertDialogContent,\r\n      AlertDialogDescription,\r\n      AlertDialogFooter,\r\n      AlertDialogHeader,\r\n      AlertDialogTitle,\r\n      AlertDialogTrigger,\r\n      } from \"@/components/ui/alert-dialog\"\r\n      import { Button } from \"@/components/library/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function AlertDialogDemo() {\r\n      return (\r\n        <AlertDialog>\r\n          <AlertDialogTrigger asChild>\r\n            <Button variant=\"outline\">Open Dialog</Button>\r\n          </AlertDialogTrigger>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader>\r\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n              <AlertDialogDescription>\r\n                This action cannot be undone. The data will be permanently deleted\r\n                from the servers.\r\n              </AlertDialogDescription>\r\n            </AlertDialogHeader>\r\n            <AlertDialogFooter>\r\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n              <AlertDialogAction>Continue</AlertDialogAction>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialog>\r\n      )\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\n"
  },
  {
    "slug": "/components/badge",
    "title": "Badge",
    "description": "A badge is a small, often circular, visual element that provides information or context about an item. It can be used to indicate status, notifications, or other relevant details.",
    "content": "<ComponentPreview name=\"badge-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre>\n          {`import * as React from \"react\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const badgeVariants = cva(\r\n            \"inline-flex items-center gap-1.5 rounded-full px-3 py-0.5 text-xs font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n            {\r\n              variants: {\r\n                variant: {\r\n                  default:\r\n                    \"border-transparent bg-primary/90 text-primary-foreground backdrop-blur-sm shadow-sm hover:bg-primary/80\",\r\n                  secondary:\r\n                    \"border-transparent bg-secondary/90 text-secondary-foreground backdrop-blur-sm shadow-sm hover:bg-secondary/80\",\r\n                  destructive:\r\n                    \"border-transparent bg-destructive/90 text-destructive-foreground backdrop-blur-sm shadow-sm hover:bg-destructive/80\",\r\n                  outline: \"border border-border/40 text-foreground bg-background/50 backdrop-blur-sm hover:bg-muted/20\",\r\n                  success:\r\n                    \"border-transparent bg-green-500/90 text-white backdrop-blur-sm shadow-sm hover:bg-green-500/80\",\r\n                  warning:\r\n                    \"border-transparent bg-amber-500/90 text-white backdrop-blur-sm shadow-sm hover:bg-amber-500/80\",\r\n                  info:\r\n                    \"border-transparent bg-blue-500/90 text-white backdrop-blur-sm shadow-sm hover:bg-blue-500/80\",\r\n                },\r\n                size: {\r\n                  default: \"px-3 py-0.5 text-xs\",\r\n                  sm: \"px-2 py-0.5 text-xs\",\r\n                  lg: \"px-4 py-1 text-sm\",\r\n                },\r\n                removable: {\r\n                  true: \"pr-1\",\r\n                  false: \"\",\r\n                }\r\n              },\r\n              defaultVariants: {\r\n                variant: \"default\",\r\n                size: \"default\",\r\n                removable: false,\r\n              },\r\n            }\r\n            )\r\n\r\n            export interface BadgeProps\r\n            extends React.HTMLAttributes<HTMLDivElement>,\r\n            VariantProps<typeof badgeVariants> {\r\n            removable?: boolean;\r\n            onRemove?: () => void;\r\n            icon?: React.ReactNode;\r\n            }\r\n\r\n            function Badge({\r\n            className,\r\n            variant,\r\n            size,\r\n            removable,\r\n            onRemove,\r\n            icon,\r\n            children,\r\n            ...props\r\n            }: BadgeProps) {\r\n            return (\r\n              <div\r\n                className={cn(badgeVariants({ variant, size, removable }), className)}\r\n                {...props}\r\n              >\r\n                {icon && <span className=\"flex items-center\">{icon}</span>}\r\n                <span>{children}</span>\r\n                {removable && (\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"ml-1 rounded-full p-0.5 text-current opacity-70 hover:opacity-100 focus:outline-none focus:ring-1 focus:ring-ring\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      onRemove?.();\r\n                    }}\r\n                    aria-hidden=\"true\"\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      width=\"14\"\r\n                      height=\"14\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth=\"2\"\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\r\n                      <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\r\n                    </svg>\r\n                  </button>\r\n                )}\r\n              </div>\r\n            )\r\n            }\r\n\r\n            export { Badge, badgeVariants }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/library/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Badge variant=\"outline\">Badge</Badge>`}\n  </Pre>\n</div>\n\n## Tips\n\n* You can use <MdxBadge>badgeVariants</MdxBadge> to create your own badge component with different styles.\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/library/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"badge-demo\" />\n\n### Outline\n\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\n\n### Destructive\n\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\n\n### Success\n\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\n\n### Warning\n\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\n\n### Info\n\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\n\n### Removable\n\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\n\n### With icon\n\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\n"
  },
  {
    "slug": "/components/breadcrumb",
    "title": "breadcrumb",
    "description": "breadcrumb",
    "content": "<ComponentPreview name=\"breadcrumb-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import { Slot } from \"@radix-ui/react-slot\"\r\n            import { useRouter } from \"next/navigation\"\r\n            import * as React from \"react\"\r\n            import { BsThreeDots } from \"react-icons/bs\"\r\n            import { LuChevronRight } from \"react-icons/lu\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Breadcrumb = React.forwardRef<\r\n            HTMLElement,\r\n            React.ComponentPropsWithoutRef<\"nav\"> & {\r\n              separator?: React.ReactNode\r\n            }\r\n            >(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\r\n            Breadcrumb.displayName = \"Breadcrumb\"\r\n\r\n            const BreadcrumbList = React.forwardRef<\r\n            HTMLOListElement,\r\n            React.ComponentPropsWithoutRef<\"ol\">\r\n            >(({ className, ...props }, ref) => (\r\n            <ol\r\n              ref={ref}\r\n              className={cn(\r\n                \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            BreadcrumbList.displayName = \"BreadcrumbList\"\r\n\r\n            const BreadcrumbItem = React.forwardRef<\r\n            HTMLLIElement,\r\n            React.ComponentPropsWithoutRef<\"li\">\r\n            >(({ className, ...props }, ref) => (\r\n            <li\r\n              ref={ref}\r\n              className={cn(\"inline-flex items-center gap-1.5\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            BreadcrumbItem.displayName = \"BreadcrumbItem\"\r\n\r\n            const BreadcrumbLink = React.forwardRef<\r\n            HTMLAnchorElement,\r\n            React.ComponentPropsWithoutRef<\"a\"> & {\r\n              asChild?: boolean\r\n              href?: string\r\n            }\r\n            >(({ asChild, className, href, ...props }, ref) => {\r\n            const router = useRouter()\r\n\r\n            const handleClick = (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n              if (href && href.startsWith(\"/\")) {\r\n                event.preventDefault()\r\n                router.push(href)\r\n              }\r\n            }\r\n\r\n            const Comp = asChild ? Slot : \"a\"\r\n\r\n            return (\r\n              <Comp\r\n                ref={ref}\r\n                href={href}\r\n                onClick={handleClick}\r\n                className={cn(\"transition-colors hover:text-foreground\", className)}\r\n                {...props}\r\n              />\r\n            )\r\n            })\r\n            BreadcrumbLink.displayName = \"BreadcrumbLink\"\r\n\r\n            const BreadcrumbPage = React.forwardRef<\r\n            HTMLSpanElement,\r\n            React.ComponentPropsWithoutRef<\"span\">\r\n            >(({ className, ...props }, ref) => (\r\n            <span\r\n              ref={ref}\r\n              role=\"link\"\r\n              aria-disabled=\"true\"\r\n              aria-current=\"page\"\r\n              className={cn(\"font-medium text-foreground\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            BreadcrumbPage.displayName = \"BreadcrumbPage\"\r\n\r\n            const BreadcrumbSeparator = ({\r\n            children,\r\n            className,\r\n            ...props\r\n            }: React.ComponentProps<\"li\">) => (\r\n            <li\r\n              role=\"presentation\"\r\n              aria-hidden=\"true\"\r\n              className={cn(\"[&>svg]:size-3.5\", className)}\r\n              {...props}\r\n            >\r\n              {children ?? <LuChevronRight className=\"mt-[2px]\" />}\r\n            </li>\r\n            )\r\n            BreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\r\n\r\n            const BreadcrumbEllipsis = ({\r\n            className,\r\n            ...props\r\n            }: React.ComponentProps<\"span\">) => (\r\n            <span\r\n              role=\"presentation\"\r\n              aria-hidden=\"true\"\r\n              className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\r\n              {...props}\r\n            >\r\n              <BsThreeDots className=\"h-4 w-4\" />\r\n              <span className=\"sr-only\">More</span>\r\n            </span>\r\n            )\r\n            BreadcrumbEllipsis.displayName = \"BreadcrumbEllipsis\"\r\n\r\n            export {\r\n            Breadcrumb, BreadcrumbEllipsis, BreadcrumbItem,\r\n            BreadcrumbLink, BreadcrumbList, BreadcrumbPage,\r\n            BreadcrumbSeparator\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Breadcrumb,\r\n        BreadcrumbItem,\r\n        BreadcrumbLink,\r\n        BreadcrumbList,\r\n        BreadcrumbPage,\r\n        BreadcrumbSeparator,\r\n      } from \"@/components/library/breadcrumb\"`}\n  </Pre>\n\n  <Pre>\n    {`<Breadcrumb>\r\n        <BreadcrumbList>\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">\r\n                    <HiHome className=\"h-4 w-4\" />\r\n                </BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbPage>Current Page</BreadcrumbPage>\r\n            </BreadcrumbItem>\r\n        </BreadcrumbList>\r\n      </Breadcrumb>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Custom Separator\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\n\n### Ellipsis\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\n\n### Dropdown\n\nYou can compose <MdxBadge>\\<BreadcrumbItem /></MdxBadge> with a <MdxBadge>\\<DropdownMenu /></MdxBadge> to create a dropdown in the breadcrumb.\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\n\n### Icons\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\n\n### Responsive\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\n"
  },
  {
    "slug": "/components/button",
    "title": "Button",
    "description": "A button that displays a list of options when clicked.",
    "content": "A Button that stand out\n\n<ComponentPreview name=\"button\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Button component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>Button.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"className-typescript\" folderPath=\"components/button.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import { Slot } from \"@radix-ui/react-slot\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n            import { Loader2 } from \"lucide-react\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const buttonVariants = cva(\r\n            \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n            {\r\n              variants: {\r\n                variant: {\r\n                  default:\r\n                    \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\r\n                  destructive:\r\n                    \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\r\n                  outline:\r\n                    \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\r\n                  secondary:\r\n                    \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\r\n                  ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n                  link: \"text-primary underline-offset-4 hover:underline\",\r\n                  neural:\r\n                    \"bg-secondary/20 text-secondary hover:bg-secondary/30 backdrop-blur-sm\",\r\n                },\r\n                size: {\r\n                  default: \"h-10 px-4 py-2\",\r\n                  sm: \"h-9 px-3 rounded-md text-xs\",\r\n                  lg: \"h-11 px-8 rounded-md\",\r\n                  icon: \"h-10 w-10\",\r\n                },\r\n                animation: {\r\n                  none: \"\",\r\n                  pulse: \"animate-pulse\",\r\n                  bounce: \"animate-bounce\",\r\n                },\r\n              },\r\n              defaultVariants: {\r\n                variant: \"default\",\r\n                size: \"default\",\r\n                animation: \"none\",\r\n              },\r\n            }\r\n            )\r\n\r\n            export interface ButtonProps\r\n            extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n              VariantProps<typeof buttonVariants> {\r\n            isLoading?: boolean\r\n            icon?: React.ReactNode\r\n            asChild?: boolean\r\n            }\r\n\r\n            const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n            (\r\n              {\r\n                className,\r\n                variant,\r\n                size,\r\n                animation,\r\n                isLoading,\r\n                icon,\r\n                asChild = false,\r\n                children,\r\n                ...props\r\n              },\r\n              ref\r\n            ) => {\r\n              const Comp = asChild ? Slot : \"button\"\r\n              return (\r\n                <Comp\r\n                  className={cn(buttonVariants({ variant, size, animation, className }))}\r\n                  ref={ref}\r\n                  disabled={isLoading}\r\n                  {...props}\r\n                >\r\n                  {isLoading ? (\r\n                    <span className=\"flex items-center justify-center gap-2\">\r\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n                      {children}\r\n                    </span>\r\n                  ) : (\r\n                    <span className=\"flex items-center justify-center gap-2\">\r\n                      {icon && <span className=\"mr-2\">{icon}</span>}\r\n                      {children}\r\n                    </span>\r\n                  )}\r\n                </Comp>\r\n              )\r\n            }\r\n            )\r\n\r\n            Button.displayName = \"Button\"\r\n\r\n            export { Button, buttonVariants }\r\n\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Button } from \"@/components/library/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function ButtonDemo() {\r\n        return <Button variant={\"default\"}>Getting Started</Button>\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Primary\n\n<ComponentPreview name=\"button\" variant=\"primary\" />\n\n### Secondary\n\n<ComponentPreview name=\"button\" variant=\"secondary\" />\n\n### Destructive\n\n<ComponentPreview name=\"button\" variant=\"destructive\" />\n\n### Ghost\n\n<ComponentPreview name=\"button\" variant=\"ghost\" />\n\n### Link\n\n<ComponentPreview name=\"button\" variant=\"link\" />\n\n### Outline\n\n<ComponentPreview name=\"button\" variant=\"outline\" />\n\n### Neural\n\n<ComponentPreview name=\"button\" variant=\"neural\" />\n\n### Loading\n\n<ComponentPreview name=\"button\" variant=\"loading\" />\n\n### Icon\n\n<ComponentPreview name=\"button\" variant=\"icon\" />\n\n### Animation bounce\n\n<ComponentPreview name=\"button\" variant=\"bounce\" />\n\n### Animation pulse\n\n<ComponentPreview name=\"button\" variant=\"pulse\" />\n"
  },
  {
    "slug": "/components/calendar",
    "title": "Calendar",
    "description": "Calendar component",
    "content": "<ComponentPreview name=\"calendar-demo\" />\n\n## About\n\nThe <MdxBadge>Calendar</MdxBadge> component is built on top of [React DayPicker](https://daypicker.dev/).\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Calendar.tsx\">\n      Third, you need to create a new folder called <MdxBadge>components</MdxBadge> in you app directory and create a new file called <MdxBadge>calendar.tsx</MdxBadge> and paste the following code in it:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/calendar.tsx\">\n          {`\"use client\"\r\n\r\n            import { buttonVariants } from \"@/components/library/button\"\r\n            import { cn } from \"@/lib/utils\"\r\n            import { ChevronLeft, ChevronRight } from \"lucide-react\"\r\n            import * as React from \"react\"\r\n            import { DayPicker } from \"react-day-picker\"\r\n\r\n            export type CalendarProps = React.ComponentProps<typeof DayPicker>\r\n\r\n            function Calendar({\r\n             className,\r\n             classNames,\r\n             showOutsideDays = true,\r\n             ...props\r\n            }: CalendarProps) {\r\n             return (\r\n                <DayPicker\r\n                   showOutsideDays={showOutsideDays}\r\n                   className={cn(\"p-3 rounded-2xl border shadow\", className)}\r\n                   classNames={{\r\n                      months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\r\n                      month: \"space-y-4\",\r\n                      caption: \"flex justify-center pt-1 relative items-center\",\r\n                      caption_label: \"text-sm font-semibold\", \r\n                      nav: \"space-x-1 flex items-center\",\r\n                      nav_button: cn(\r\n                         buttonVariants({ variant: \"outline\" }),\r\n                         \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\r\n                      ),\r\n                      nav_button_previous: \"absolute left-1\",\r\n                      nav_button_next: \"absolute right-1 \",\r\n                      table: \"w-full border-collapse space-y-1\",\r\n                      head_row: \"flex\",\r\n                      head_cell:\r\n                         \"text-muted-foreground rounded-lg w-8 font-normal text-[0.8rem]\",\r\n                      row: \"flex w-full mt-2\",\r\n                      cell: cn(\r\n                         \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\r\n                         props.mode === \"range\"\r\n                            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\r\n                            : \"[&:has([aria-selected])]:rounded-md\"\r\n                      ),\r\n                      day: cn(\r\n                         buttonVariants({ variant: \"ghost\" }),\r\n                         \"h-8 w-8 p-0 rounded-lg font-semibold aria-selected:opacity-100\" \r\n                      ),\r\n                      day_range_start: \"day-range-start\",\r\n                      day_range_end: \"day-range-end\",\r\n                      day_selected:\r\n                         \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\r\n                      day_today: \"bg-accent text-accent-foreground\",\r\n                      day_outside:\r\n                         \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\r\n                      day_disabled: \"text-muted-foreground opacity-50\",\r\n                      day_range_middle:\r\n                         \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\r\n                      day_hidden: \"invisible\",\r\n                      ...classNames,\r\n                   }}\r\n                   components={{\r\n                      IconLeft: ({ className, ...props }) => (\r\n                         <ChevronLeft strokeWidth={2.5}  className={cn(\"h-5 w-5\", className)} {...props} />\r\n                      ),\r\n                      IconRight: ({ className, ...props }) => (\r\n                         <ChevronRight strokeWidth={2.5}  className={cn(\"h-4.5 w-4.5\", className)} {...props} />\r\n                      ),\r\n                   }}\r\n                   {...props}\r\n                />\r\n             )\r\n            }\r\n            Calendar.displayName = \"Calendar\"\r\n\r\n            export { Calendar }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Calendar } from \"@/components/ui/calendar\"`}\n  </Pre>\n\n  <Pre>\n    {`const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n\r\n      return (\r\n      <Calendar\r\n        mode=\"single\"\r\n        selected={date}\r\n        onSelect={setDate}\r\n        className=\"rounded-md border\"\r\n      />\r\n      )`}\n  </Pre>\n</div>\n\n## Examples\n\n<ComponentPreview name=\"date-picker-demo\" />\n"
  },
  {
    "slug": "/components/code-block",
    "title": "Code Block",
    "description": "Showcase beautifully styled and customizable code snippets with advanced features like syntax highlighting, line numbering, and line highlighting.",
    "content": "<ComponentPreview name=\"code-block-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install prism.js\n\n      <Pre className=\"language-bash\">\n        {`npm i install prismjs clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you roo directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Pre Component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a Pre.tsx file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"component/pre.tsx\">\n          {`\"use client\"\r\n\r\n            import { languageIcons } from \"@/settings/LanguageIcon\"\r\n            import { Check, Clipboard, FileCode } from \"lucide-react\"\r\n            import Prism from \"prismjs\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            import \"prismjs/components/prism-javascript\"\r\n            import \"prismjs/components/prism-jsx\"\r\n            import \"prismjs/components/prism-tsx\"\r\n            import \"prismjs/components/prism-typescript\"\r\n            import \"prismjs/plugins/line-numbers/prism-line-numbers\"\r\n            import \"prismjs/plugins/line-numbers/prism-line-numbers.css\"\r\n            import \"prismjs/plugins/line-highlight/prism-line-highlight\"\r\n            import \"prismjs/plugins/line-highlight/prism-line-highlight.css\"\r\n\r\n            import { ComponentProps, useEffect, useState } from \"react\"\r\n\r\n            interface PreProps extends ComponentProps<\"pre\"> {\r\n            raw?: string\r\n            className?: string\r\n            highlightLines?: number[]\r\n            folderPath?: string\r\n            highlightStyle?: \"solid\" | \"gradient\" | \"border\" | \"marker\" | \"custom\"\r\n            customHighlightClass?: string\r\n            showLineNumbers?: boolean\r\n            }\r\n\r\n            const CopyButton = ({ content }: { content: string }) => {\r\n            const [copied, setCopied] = useState(false)\r\n            const copyToClipboard = async () => {\r\n              try {\r\n                await navigator.clipboard.writeText(content)\r\n                setCopied(true)\r\n                setTimeout(() => setCopied(false), 2000)\r\n              } catch (error) {\r\n                console.error(\"Failed to copy:\", error)\r\n              }\r\n            }\r\n\r\n            return (\r\n              <button\r\n                onClick={copyToClipboard}\r\n                className=\"text-gray-400 hover:text-white transition-colors p-2 rounded-md hover:bg-gray-600/50\"\r\n                aria-label=\"Copy code\"\r\n              >\r\n                {copied ? (\r\n                  <Check className=\"w-[18px] h-[18px] text-green-500\" />\r\n                ) : (\r\n                  <Clipboard className=\"w-[18px] h-[18px] text-gray-100\" />\r\n                )}\r\n              </button>\r\n            )\r\n            }\r\n\r\n            export default function Pre({\r\n            children,\r\n            raw,\r\n            className,\r\n            highlightLines = [],\r\n            folderPath,\r\n            highlightStyle,\r\n            customHighlightClass,\r\n            showLineNumbers = true,\r\n            ...rest\r\n            }: PreProps) {\r\n            const [isClient, setIsClient] = useState(false)\r\n\r\n            useEffect(() => {\r\n              setIsClient(true)\r\n            }, [])\r\n\r\n            useEffect(() => {\r\n              if (isClient && typeof window !== \"undefined\") {\r\n                Prism.highlightAll()\r\n                const codeBlock = document.querySelector(\"pre code\")\r\n                if (codeBlock) {\r\n                  const lines = codeBlock.innerHTML\r\n                    .replace(/^\\n+|\\n+$/g, \"\")\r\n                    .replace(/\\n\\s*\\n/g, \"\\n\")\r\n                    .replace(/\\t/g, \"  \")\r\n                    .replace(/\\r\\n/g, \"\\n\")\r\n                    .split(\"\\n\")\r\n                  const highlightedLines = lines.map((line, index) => {\r\n                    if (highlightLines.includes(index + 1)) {\r\n                      return \\`<span class=\"highlighted-line\">\\${line}</span>\\`\r\n                    }\r\n                    return line\r\n                  })\r\n                  codeBlock.innerHTML = highlightedLines.join(\"\\n\")\r\n                }\r\n              }\r\n            }, [children, highlightLines, highlightStyle, customHighlightClass, isClient])\r\n\r\n            const language = className?.split(\"-\")[1] || \"typescript\"\r\n            const code = typeof children === \"string\" ? children.trim() : \" \"\r\n            const lineNumbersClass = showLineNumbers ? \"line-numbers\" : \"\"\r\n\r\n            if (!isClient) {\r\n              return (\r\n                <div className=\"code-block-container relative group rounded-[6px] custom-scrollbar my-5 w-full\">\r\n                  <pre\r\n                    className={\\`overflow-x-auto max-h-[650px] hide-scrollbar \\${lineNumbersClass}\\`}\r\n                  >\r\n                    <code>{children}</code>\r\n                  </pre>\r\n                </div>\r\n              )\r\n            }\r\n\r\n            return (\r\n              <div className=\"code-block-container relative group rounded-[6px] w-full\">\r\n                <div className=\"code-block-header code-block-toolbar overflow-x-auto hide-scrollbar flex items-center justify-between\">\r\n                  <div className=\"flex items-center justify-between space-x-4\">\r\n                    <div className=\"flex space-x-2 items-center\">\r\n                      <div className=\"w-3 h-3 rounded-full bg-red-500/30 border border-red-500/40\" />\r\n                      <div className=\"w-3 h-3 rounded-full bg-yellow-500/30 border border-yellow-500/40\" />\r\n                      <div className=\"w-3 h-3 rounded-full bg-green-500/30 border border-green-500/40\" />\r\n                    </div>\r\n                    <span className=\"code-block-folder-path font-medium text-gray-400 text-sm text-nowrap max-w-md\">\r\n                      {folderPath}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <div>\r\n                      <CopyButton content={raw || code} />\r\n                    </div>\r\n                    <div className=\"w-4 h-4 rounded-sm\">\r\n                      {languageIcons[language] || (\r\n                        <FileCode className=\"w-4 h-4 text-gray-400\" />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <pre\r\n                  className={cn(\r\n                    \\`language-\\${language}\\`,\r\n                    className,\r\n                    \"overflow-x-auto\",\r\n                    \"max-h-[650px]\",\r\n                    \"border-none\",\r\n                    \"custom-scrollbar\",\r\n                    lineNumbersClass\r\n                  )}\r\n                  data-line={\r\n                    highlightLines.length > 0 ? highlightLines.join(\",\") : undefined\r\n                  }\r\n                >\r\n                  <code className={cn(\"language-\" + language)}>{children}</code>\r\n                </pre>\r\n              </div>\r\n            )\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Create prism-theme.css file\">\n      Create file called <MdxBadge>prism-theme.css</MdxBadge> in you app directory, and put the following code in it,\n\n      <Note type=\"note\" className=\"!mb-5 !my-3\">\n        This is the same styling as visual studio code theme dark\n      </Note>\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-css\" folderPath=\"prism-theme.css\">\n          {`:root {\r\n            --code-background: #1e1e1e;\r\n            --code-text-color: #cccccc;\r\n            --code-selection-background: #264f78;\r\n            --code-comment-color: #6a9955;\r\n            --code-line-number-color: #666;\r\n            --code-toolbar-background: #2d2d2d;\r\n            --code-folder-path-color: hsl(var(--muted));\r\n            }\r\n\r\n            .code-block-container {\r\n            background-color: var(--code-background);\r\n            border-radius: 6px;\r\n            width: 100%;\r\n            position: relative;\r\n            }\r\n\r\n            .code-block-header {\r\n            background-color: var(--code-background);\r\n            border-bottom: 1px solid #333;\r\n            }\r\n\r\n            .code-block-toolbar {\r\n            background-color: var(--code-toolbar-background);\r\n            padding-left: 1rem;\r\n            padding-right: 1rem;\r\n            border-radius: 6px 6px 0 0;\r\n            }\r\n\r\n            pre[class*=\"language-\"],\r\n            code[class*=\"language-\"] {\r\n            color: var(--code-text-color);\r\n            font-size: 14px;\r\n            text-shadow: none;\r\n            direction: ltr;\r\n            text-align: left;\r\n            white-space: pre;\r\n            word-spacing: normal;\r\n            word-break: normal;\r\n            line-height: 1.5;\r\n            -moz-tab-size: 4;\r\n            -o-tab-size: 4;\r\n            tab-size: 4;\r\n            -webkit-hyphens: none;\r\n            -moz-hyphens: none;\r\n            -ms-hyphens: none;\r\n            hyphens: none;\r\n            background: transparent;\r\n            }\r\n\r\n            pre[class*=\"language-\"]::selection,\r\n            code[class*=\"language-\"]::selection,\r\n            pre[class*=\"language-\"] *::selection,\r\n            code[class*=\"language-\"] *::selection {\r\n            text-shadow: none;\r\n            background: var(--code-selection-background);\r\n            }\r\n\r\n            @media print {\r\n            pre[class*=\"language-\"],\r\n            code[class*=\"language-\"] {\r\n              text-shadow: none;\r\n            }\r\n            }\r\n\r\n            pre[class*=\"language-\"] {\r\n            padding: 0.8rem;\r\n            margin: 0;\r\n            overflow-x: auto;\r\n            border-radius: 0 0 6px 6px;\r\n            }\r\n\r\n            .line-numbers .line-numbers-rows {\r\n            border-right: none !important;\r\n            padding-right: 1rem !important;\r\n            top: -2.5px !important;\r\n            left: -39px !important;\r\n            position: absolute;\r\n            height: 100%;\r\n            -webkit-user-select: none;\r\n            -moz-user-select: none;\r\n            -ms-user-select: none;\r\n            user-select: none;\r\n            }\r\n\r\n            .line-numbers-rows > span {\r\n            padding: 0;\r\n            border: 0;\r\n            display: block;\r\n            counter-increment: linenumbers;\r\n            color: hsl(var(--muted)) !important;\r\n            font-size: 14px;\r\n            line-height: 1.5;\r\n            text-align: right;\r\n            }\r\n\r\n            :not(pre) > code[class*=\"language-\"] {\r\n            padding: 0.3em;\r\n            border-radius: 0.3em;\r\n            color: #db4c69;\r\n            background: var(--code-background);\r\n            }\r\n            /*********************************************************\r\n            * Tokens (No changes here, kept for completeness)\r\n            */\r\n            .namespace {\r\n            opacity: 0.7;\r\n            }\r\n\r\n            .token.doctype .token.doctype-tag {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.doctype .token.name {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.comment,\r\n            .token.prolog {\r\n            color: #6a9955;\r\n            }\r\n\r\n            .token.punctuation,\r\n            .language-html .language-css .token.punctuation,\r\n            .language-html .language-javascript .token.punctuation {\r\n            color: #d4d4d4;\r\n            }\r\n\r\n            .token.property,\r\n            .token.tag,\r\n            .token.boolean,\r\n            .token.number,\r\n            .token.constant,\r\n            .token.symbol,\r\n            .token.inserted,\r\n            .token.unit {\r\n            color: #b5cea8;\r\n            }\r\n\r\n            .token.selector,\r\n            .token.attr-name,\r\n            .token.string,\r\n            .token.char,\r\n            .token.builtin,\r\n            .token.deleted {\r\n            color: #ce9178;\r\n            }\r\n\r\n            .language-css .token.string.url {\r\n            text-decoration: underline;\r\n            }\r\n\r\n            .token.operator,\r\n            .token.entity {\r\n            color: #d4d4d4;\r\n            }\r\n\r\n            .token.operator.arrow {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.atrule {\r\n            color: #ce9178;\r\n            }\r\n\r\n            .token.atrule .token.rule {\r\n            color: #c586c0;\r\n            }\r\n\r\n            .token.atrule .token.url {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.atrule .token.url .token.function {\r\n            color: #dcdcaa;\r\n            }\r\n\r\n            .token.atrule .token.url .token.punctuation {\r\n            color: #d4d4d4;\r\n            }\r\n\r\n            .token.keyword {\r\n            color: #d681ce;\r\n            }\r\n\r\n            .token.keyword.module,\r\n            .token.keyword.control-flow {\r\n            color: #c586c0;\r\n            }\r\n\r\n            .token.function,\r\n            .token.function .token.maybe-class-name {\r\n            color: #dcdcaa;\r\n            }\r\n            .token.regex {\r\n            color: #d16969;\r\n            }\r\n\r\n            .token.important {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.italic {\r\n            font-style: italic;\r\n            }\r\n\r\n            .token.constant {\r\n            color: #4ec9b0;\r\n            }\r\n\r\n            .token.class-name,\r\n            .token.maybe-class-name {\r\n            color: #4ec9b0;\r\n            }\r\n\r\n            .token.console {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.parameter {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.interpolation {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.punctuation.interpolation-punctuation {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.boolean {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.property,\r\n            .token.variable,\r\n            .token.imports .token.maybe-class-name,\r\n            .token.exports .token.maybe-class-name {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.selector {\r\n            color: #d7ba7d;\r\n            }\r\n\r\n            .token.escape {\r\n            color: #d7ba7d;\r\n            }\r\n\r\n            .token.tag {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.tag .token.punctuation {\r\n            color: #c1c1c1;\r\n            }\r\n\r\n            .token.cdata {\r\n            color: #808080;\r\n            }\r\n\r\n            .token.attr-name {\r\n            color: #9cdcfe;\r\n            }\r\n\r\n            .token.attr-value,\r\n            .token.attr-value .token.punctuation {\r\n            color: #ce9178;\r\n            }\r\n\r\n            .token.attr-value .token.punctuation.attr-equals {\r\n            color: #d4d4d4;\r\n            }\r\n\r\n            .token.entity {\r\n            color: #569cd6;\r\n            }\r\n\r\n            .token.namespace {\r\n            color: #4ec9b0;\r\n            }\r\n\r\n            .plain-text {\r\n            color: #fff;\r\n            }\r\n\r\n            pre[class*=\"language-javascript\"],\r\n            code[class*=\"language-javascript\"],\r\n            pre[class*=\"language-jsx\"],\r\n            code[class*=\"language-jsx\"],\r\n            pre[class*=\"language-typescript\"],\r\n            code[class*=\"language-typescript\"],\r\n            pre[class*=\"language-tsx\"],\r\n            code[class*=\"language-tsx\"] {\r\n            color: #569cd6;\r\n            }\r\n\r\n            pre[class*=\"language-css\"],\r\n            code[class*=\"language-css\"] {\r\n            color: #ce9178;\r\n            }\r\n\r\n            pre[class*=\"language-html\"],\r\n            code[class*=\"language-html\"] {\r\n            color: #d4d4d4 !important;\r\n            }\r\n\r\n            .language-regex .token.anchor {\r\n            color: #dcdcaa;\r\n            }\r\n\r\n            .language-html .token.punctuation {\r\n            color: #808080;\r\n            }\r\n            /*********************************************************\r\n            * Line highlighting (No changes here, kept for completeness)\r\n            */\r\n            pre[class*=\"language-\"] > code[class*=\"language-\"] {\r\n            position: relative;\r\n            z-index: 1;\r\n            }\r\n\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Adding a code language\">\n      this step is <MdxBadge>Optional</MdxBadge> it shows a the language of your code\r\n      you can pass an <MdxBadge>Images</MdxBadge> or <MdxBadge>Icons</MdxBadge> but if you choose icons make sure the library that you choose let you edit in colors of the icon\r\n      to do that you create a folder called <MdxBadge>language-icon.ts</MdxBadge> and add the following code in it:\n\n      <Pre>\n        {`import type { JSX } from \"react\"\r\n          import Image from \"next/image\"\r\n          import { Terminal } from \"lucide-react\"\r\n\r\n          export const languageIcons: Record<string, JSX.Element> = {\r\n            javascript: (\r\n              <Image\r\n                src=\"/icons/javascript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"javascript\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            js: (\r\n              <Image\r\n                src=\"/icons/javascript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"javascript\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            jsx: (\r\n              <Image\r\n                src=\"/icons/javascript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"jsx\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            typescript: (\r\n              <Image\r\n                src=\"/icons/typescript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"typescript\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            ts: (\r\n              <Image\r\n                src=\"/icons/typescript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"typescript\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            tsx: (\r\n              <Image\r\n                src=\"/icons/typescript.svg\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                alt=\"typescript\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            html: (\r\n              <Image\r\n                src=\"/icons/html.svg\"\r\n                alt=\"html\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            css: (\r\n              <Image\r\n                src=\"/icons/css.svg\"\r\n                alt=\"css\"\r\n                className=\"w-[18px] h-[18px]\"\r\n                width={10}\r\n                height={10}\r\n                quality={100}\r\n              />\r\n            ),\r\n            bash: <Terminal className=\"w-5 h-5 text-gray-100 rounded-lg\" />,\r\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Now, Feel  to use it and customize it\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"`}\n  </Pre>\n\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"\r\n      import { cn } from \"@/lib/utils\"\r\n\r\n      const CodeBlockDemo = ({ className }: { className: string }) => {\r\n       const ExampleCode = \\`function MyComponent(props) {\r\n       return (\r\n          <div>\r\n             <h1>Hello, {props.name}!</h1>\r\n             <p>This is an example React component.</p>\r\n          </div>\r\n       )};\\`\r\n       return (\r\n          <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}  >\r\n             {ExampleCode}\r\n          </Pre>\r\n       )\r\n      }\r\n\r\n      export default CodeBlockDemo`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/collapsible",
    "title": "Collapsible",
    "description": "Collapsible component for hiding and showing content.",
    "content": "<ComponentPreview name=\"collapsible-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create collapsible.tsx\">\n      Third, you need to create a new folder called <MdxBadge>components</MdxBadge> in you app directory and create a new file called <MdxBadge>collapsible.tsx</MdxBadge> and paste the following code in it:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/collapsible.tsx\">\n          {`\"use client\"\r\n\r\n            import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\r\n\r\n            const Collapsible = CollapsiblePrimitive.Root\r\n\r\n            const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\r\n\r\n            const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\r\n\r\n            export { Collapsible, CollapsibleTrigger, CollapsibleContent }\r\n\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Collapsible,\r\n        CollapsibleContent,\r\n        CollapsibleTrigger,\r\n      } from \"@/components/ui/collapsible\"`}\n  </Pre>\n\n  <Pre>\n    {`<Collapsible>\r\n      <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\r\n      <CollapsibleContent>\r\n        Yes. Free to use for personal and commercial projects. No attribution\r\n        required.\r\n      </CollapsibleContent>\r\n      </Collapsible>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components",
    "title": "Components",
    "description": "A list of custom components it made for your application",
    "content": ""
  },
  {
    "slug": "/components/data-picker",
    "title": "Data Picker",
    "description": "Data Picker component documentation.",
    "content": "<ComponentPreview name=\"date-picker-demo\" />\n\n## Installation\n\nThe Date Picker is built using a composition of  <MdxBadge>\\<Popover /></MdxBadge> component  and the  <MdxBadge>\\<Calendar /></MdxBadge> component.\n\nSee installation instructions for the [Popover](https://alphabyte-labs.vercel.app/docs/components/popover) and the [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) components.\r\nfor quick installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose\">\n  <Pre>\n    {`\"use client\"\r\n\r\n      import { format } from \"date-fns\"\r\n      import { CalendarIcon } from \"lucide-react\"\r\n      import * as React from \"react\"\r\n      import { Button } from \"@/components/library/button\"\r\n      import { Calendar } from \"@/components/library/calendar\"\r\n      import {\r\n       Popover,\r\n       PopoverContent,\r\n       PopoverTrigger,\r\n      } from \"@/components/library/popover\"\r\n      import { cn } from \"@/lib/utils\"\r\n\r\n      export default function DatePickerDemo() {\r\n       const [date, setDate] = React.useState<Date>()\r\n\r\n       return (\r\n          <Popover>\r\n             <PopoverTrigger asChild>\r\n                <Button\r\n                   variant={\"outline\"}\r\n                   className={cn(\r\n                      \"w-[240px] justify-start text-left font-normal\",\r\n                      !date && \"text-muted-foreground\"\r\n                   )}\r\n                >\r\n                   <CalendarIcon />\r\n                   {date ? format(date, \"PPP\") : <span>Pick a date</span>}\r\n                </Button>\r\n             </PopoverTrigger>\r\n             <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n                <Calendar\r\n                   mode=\"single\"\r\n                   selected={date}\r\n                   onSelect={setDate}\r\n                   initialFocus\r\n                />\r\n             </PopoverContent>\r\n          </Popover>\r\n       )\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Date Picker Range\n\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\n"
  },
  {
    "slug": "/components/diagrams",
    "title": "Diagrams",
    "description": "Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.",
    "content": "<ComponentPreview name=\"diagram-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"install dependencies\">\n      First, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge mermaid`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a <MdxBadge>lib</MdxBadge> in you root directory and create a file called <MdxBadge>utils.ts</MdxBadge> and add the following code :\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Creating components\">\n      In Your <MdxBadge>component</MdxBadge> folder, Create a new file called <MdxBadge>Mermaid.tsx</MdxBadge> and add the following code:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/mermaid.tsx\">\n          {`\"use client\"\r\n\r\n            import React, {\r\n            useCallback,\r\n            useEffect,\r\n            useLayoutEffect,\r\n            useMemo,\r\n            useRef,\r\n            useState,\r\n            } from \"react\"\r\n            import clsx from \"clsx\"\r\n            import mermaid from \"mermaid\"\r\n\r\n            interface MermaidProps {\r\n            chart: string\r\n            className?: string\r\n            }\r\n\r\n            mermaid.initialize({\r\n            theme: \"neutral\",\r\n            })\r\n\r\n            const Mermaid = ({ chart, className }: MermaidProps) => {\r\n            const ref = useRef<HTMLDivElement | null>(null)\r\n            const uniqueId = \\`mermaid-\\${Math.random().toString(36).slice(2, 11)}\\`\r\n            const [mounted, setMounted] = useState(false)\r\n\r\n            const renderMermaid = useCallback(async () => {\r\n              if (ref.current) {\r\n                try {\r\n                  const { svg } = await mermaid.render(uniqueId, chart)\r\n                  ref.current.innerHTML = svg\r\n                } catch (error) {\r\n                  console.error(\"Mermaid diagram render error:\", error)\r\n                }\r\n              }\r\n            }, [chart, uniqueId])\r\n\r\n            const memoizedClassName = useMemo(\r\n              () => clsx(\"mermaid\", className),\r\n              [className]\r\n            )\r\n\r\n            useEffect(() => {\r\n              setMounted(true)\r\n            }, [])\r\n\r\n            useLayoutEffect(() => {\r\n              if (mounted && ref.current) {\r\n                renderMermaid()\r\n              }\r\n            }, [mounted, renderMermaid])\r\n\r\n            if (!mounted) {\r\n              return null\r\n            }\r\n\r\n            return <div className={memoizedClassName} ref={ref} />\r\n            }\r\n\r\n            const MermaidMemo = React.memo(Mermaid)\r\n            export default MermaidMemo\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Here you go, you can start creating diagrams like a designer\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import Mermaid from \"@/components/library/mermaid\"`}\n  </Pre>\n\n  <Pre>\n    {`const DiagramsDemo = () => {\r\n      return (\r\n        <Mermaid\r\n          chart={\\`graph TD;\r\n        Start --> Task1;\r\n        Task1 --> Task2;\r\n        Task2 --> End;\\`}\r\n        />\r\n      )\r\n      }\r\n\r\n      export default DiagramsDemo`}\n  </Pre>\n</div>\n\n## Example\n\n### Flowchart\n\n<ComponentPreview name=\"diagram-demo\" />\n\n### Decision Tree\n\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\n\n### Entity-Relationship Diagram\n\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\n\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\n"
  },
  {
    "slug": "/components/dialog",
    "title": "Dialog",
    "description": "A dialog component",
    "content": "<div className=\"not-prose\">\n  <ComponentPreview name=\"dialog-demo\" />\n</div>\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Dialog\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>dialog.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre folderPath=\"components/dialog.tsx\">\n          {`\"use client\"\r\n            import * as React from \"react\"\r\n            import * as DialogPrimitive from \"@radix-ui/react-dialog\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n            import { buttonVariants } from \"@/components/library/button\"\r\n\r\n            const Dialog = DialogPrimitive.Root\r\n\r\n            const DialogTrigger = React.forwardRef<\r\n            React.ElementRef<typeof DialogPrimitive.Trigger>,\r\n            React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>\r\n            >(({ className, children, ...props }, ref) => (\r\n            <DialogPrimitive.Trigger\r\n              ref={ref}\r\n              className={cn(\r\n                \"focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500/50\",\r\n                className\r\n              )}\r\n              {...props}\r\n            >\r\n              {children}\r\n            </DialogPrimitive.Trigger>\r\n            ))\r\n            DialogTrigger.displayName = DialogPrimitive.Trigger.displayName\r\n\r\n            const DialogPortal = DialogPrimitive.Portal\r\n\r\n            const DialogClose = DialogPrimitive.Close\r\n\r\n            const DialogOverlay = React.forwardRef<\r\n            React.ElementRef<typeof DialogPrimitive.Overlay>,\r\n            React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\r\n            >(({ className, ...props }, ref) => (\r\n            <DialogPrimitive.Overlay\r\n              ref={ref}\r\n              className={cn(\r\n                \"fixed inset-0 z-50 bg-black/40 backdrop-blur-md transition\",\r\n                \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n                \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            DialogOverlay.displayName = DialogPrimitive.Overlay.displayName\r\n\r\n            const dialogContentVariants = cva(\r\n            \"fixed z-50 grid max-w-md gap-4 border bg-background shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n            {\r\n              variants: {\r\n                position: {\r\n                  default:\r\n                    \"left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\",\r\n                  top: \"left-[50%] top-[5%] translate-x-[-50%] translate-y-[30%] data-[state=closed]:slide-out-to-top-0 data-[state=open]:slide-in-from-top-0 data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[50%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[50%] \",\r\n                  bottom:\r\n                    \"left-[50%] bottom-[5%] translate-x-[-50%] translate-y-[-30%] data-[state=closed]:slide-out-to-bottom-0 data-[state=open]:slide-in-from-bottom-0 data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0  data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-bottom-[50%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[50%] \",\r\n                },\r\n                appearance: {\r\n                  default: \"bg-white/95 dark:bg-neutral-900/95\",\r\n                  destructive: \"bg-red-50/95 dark:bg-red-950/95\",\r\n                },\r\n              },\r\n              defaultVariants: {\r\n                appearance: \"default\",\r\n                position: \"default\",\r\n              },\r\n            }\r\n            )\r\n\r\n            export interface DialogContentProps\r\n            extends React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>,\r\n            VariantProps<typeof dialogContentVariants> {\r\n            closeOnClickOutside?: boolean\r\n            }\r\n\r\n            const DialogContent = React.forwardRef<\r\n            React.ElementRef<typeof DialogPrimitive.Content>,\r\n            DialogContentProps\r\n            >(\r\n            ({ className, appearance, position = \"default\", closeOnClickOutside = true, children, ...props }, ref) => (\r\n              <DialogPortal>\r\n                <DialogOverlay\r\n                  onClick={closeOnClickOutside ? undefined : (e) => e.stopPropagation()}\r\n                />\r\n                <DialogPrimitive.Content\r\n                  ref={ref}\r\n                  className={cn(\r\n                    dialogContentVariants({ appearance, position }),\r\n                    className,\r\n                    \"p-6 rounded-2xl w-full\"\r\n                  )}\r\n                  {...props}\r\n                >\r\n                  {children}\r\n                </DialogPrimitive.Content>\r\n              </DialogPortal>\r\n            )\r\n            )\r\n\r\n            DialogContent.displayName = DialogPrimitive.Content.displayName\r\n\r\n            const DialogHeader = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"flex flex-col space-y-2 text-center sm:text-left\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            DialogHeader.displayName = \"DialogHeader\"\r\n\r\n            const DialogFooter = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            DialogFooter.displayName = \"DialogFooter\"\r\n\r\n            const DialogTitle = React.forwardRef<\r\n            React.ElementRef<typeof DialogPrimitive.Title>,\r\n            React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\r\n            >(({ className, ...props }, ref) => (\r\n            <DialogPrimitive.Title\r\n              ref={ref}\r\n              className={cn(\"text-lg font-bold\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            DialogTitle.displayName = DialogPrimitive.Title.displayName\r\n\r\n            const DialogDescription = React.forwardRef<\r\n            React.ElementRef<typeof DialogPrimitive.Description>,\r\n            React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\r\n            >(({ className, ...props }, ref) => (\r\n            <DialogPrimitive.Description\r\n              ref={ref}\r\n              className={cn(\"text-sm text-muted-foreground\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            DialogDescription.displayName = DialogPrimitive.Description.displayName\r\n\r\n            const DialogAction = React.forwardRef<\r\n            React.ElementRef<typeof DialogClose>,\r\n            React.ComponentPropsWithoutRef<typeof DialogClose> & {\r\n              variant?: VariantProps<typeof buttonVariants>[\"variant\"]\r\n              size?: VariantProps<typeof buttonVariants>[\"size\"]\r\n            }\r\n            >(({ className, variant = \"default\", size = \"default\", ...props }, ref) => (\r\n            <DialogClose\r\n              ref={ref}\r\n              className={cn(buttonVariants({ variant, size }), className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            DialogAction.displayName = \"DialogAction\"\r\n\r\n            const DialogCancel = React.forwardRef<\r\n            React.ElementRef<typeof DialogClose>,\r\n            React.ComponentPropsWithoutRef<typeof DialogClose> & {\r\n              variant?: VariantProps<typeof buttonVariants>[\"variant\"]\r\n              size?: VariantProps<typeof buttonVariants>[\"size\"]\r\n            }\r\n            >(({ className, variant = \"outline\", size = \"default\", ...props }, ref) => (\r\n            <DialogClose\r\n              ref={ref}\r\n              className={cn(buttonVariants({ variant, size }), \"mt-2 sm:mt-0\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            DialogCancel.displayName = \"DialogCancel\"\r\n\r\n            export {\r\n            Dialog,\r\n            DialogAction,\r\n            DialogCancel,\r\n            DialogClose,\r\n            DialogContent,\r\n            dialogContentVariants,\r\n            DialogDescription,\r\n            DialogFooter,\r\n            DialogHeader,\r\n            DialogOverlay,\r\n            DialogPortal,\r\n            DialogTitle,\r\n            DialogTrigger,\r\n            }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      Dialog,\r\n      DialogContent,\r\n      DialogDescription,\r\n      DialogHeader,\r\n      DialogTitle,\r\n      DialogTrigger,\r\n      } from \"@/components/ui/dialog\"\r\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Dialog>\r\n      <DialogTrigger>Open</DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Are you absolutely sure?</DialogTitle>\r\n          <DialogDescription>\r\n            This action cannot be undone. This will permanently delete your account\r\n            and remove your data from our servers.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n      </DialogContent>\r\n      </Dialog>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\n\n### Adding custom position\n\n#### Top position\n\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\n\n#### Bottom position\n\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\n"
  },
  {
    "slug": "/components/drawer",
    "title": "Drawer",
    "description": "Drawer component",
    "content": "<ComponentPreview name=\"drawer-demo\" />\n\n## About\n\n<MdxBadge>Drawer</MdxBadge> is built on top of [Vaul](https://github.com/emilkowalski/vaul) by [emilkowalski\\_](https://x.com/emilkowalski_).\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge vaul`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create drawer component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>drawer.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import { Drawer as DrawerPrimitive } from \"vaul\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Drawer = ({\r\n             shouldScaleBackground = true,\r\n             ...props\r\n            }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\r\n             <DrawerPrimitive.Root\r\n                shouldScaleBackground={shouldScaleBackground}\r\n                {...props}\r\n             />\r\n            )\r\n            Drawer.displayName = \"Drawer\"\r\n\r\n            const DrawerTrigger = DrawerPrimitive.Trigger\r\n\r\n            const DrawerPortal = DrawerPrimitive.Portal\r\n\r\n            const DrawerClose = DrawerPrimitive.Close\r\n\r\n            const DrawerOverlay = React.forwardRef<\r\n             React.ElementRef<typeof DrawerPrimitive.Overlay>,\r\n             React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\r\n            >(({ className, ...props }, ref) => (\r\n             <DrawerPrimitive.Overlay\r\n                ref={ref}\r\n                className={cn(\"fixed inset-0 z-50 bg-black/40 backdrop-blur-sm\", className)}\r\n                {...props}\r\n             />\r\n            ))\r\n            DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\r\n\r\n            const DrawerContent = React.forwardRef<\r\n             React.ElementRef<typeof DrawerPrimitive.Content>,\r\n             React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> & {\r\n                description?: string;\r\n             }\r\n            >(({ className, children, description, ...props }, ref) => (\r\n             <DrawerPortal>\r\n                <DrawerOverlay />\r\n                <DrawerPrimitive.Content\r\n                   ref={ref}\r\n                   className={cn(\r\n                      \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-2xl bg-background\",\r\n                      className\r\n                   )}\r\n                   aria-describedby={description ? \"drawer-description\" : undefined}\r\n                   {...props}\r\n                >\r\n                   <div className=\"mx-auto mt-4 w-[100px] !min-h-[4px] bg-muted rounded-full \" />\r\n                   {description && (\r\n                      <div id=\"drawer-description\" className=\"sr-only\">\r\n                         {description}\r\n                      </div>\r\n                   )}\r\n                   {children}\r\n                </DrawerPrimitive.Content>\r\n             </DrawerPortal>\r\n            ))\r\n            DrawerContent.displayName = \"DrawerContent\"\r\n\r\n            const DrawerHeader = ({\r\n             className,\r\n             ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n             <div\r\n                className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\r\n                {...props}\r\n             />\r\n            )\r\n            DrawerHeader.displayName = \"DrawerHeader\"\r\n\r\n            const DrawerFooter = ({\r\n             className,\r\n             ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n             <div\r\n                className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\r\n                {...props}\r\n             />\r\n            )\r\n            DrawerFooter.displayName = \"DrawerFooter\"\r\n\r\n            const DrawerTitle = React.forwardRef<\r\n             React.ElementRef<typeof DrawerPrimitive.Title>,\r\n             React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\r\n            >(({ className, ...props }, ref) => (\r\n             <DrawerPrimitive.Title\r\n                ref={ref}\r\n                className={cn(\r\n                   \"text-lg font-semibold leading-none tracking-tight\",\r\n                   className\r\n                )}\r\n                {...props}\r\n             />\r\n            ))\r\n            DrawerTitle.displayName = DrawerPrimitive.Title.displayName\r\n\r\n            const DrawerDescription = React.forwardRef<\r\n             React.ElementRef<typeof DrawerPrimitive.Description>,\r\n             React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\r\n            >(({ className, ...props }, ref) => (\r\n             <DrawerPrimitive.Description\r\n                ref={ref}\r\n                className={cn(\"text-sm text-muted-foreground\", className)}\r\n                {...props}\r\n             />\r\n            ))\r\n            DrawerDescription.displayName = DrawerPrimitive.Description.displayName\r\n\r\n            export {\r\n             Drawer, DrawerClose,\r\n             DrawerContent, DrawerDescription, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerPortal, DrawerTitle, DrawerTrigger\r\n            }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Edit layout.tsx for background scaling\">\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add <MdxBadge>vaul-drawer-wrapper</MdxBadge> to support scaling:\n\n      <Pre highlightLines={[4]}>\n        {`<html lang=\"en\" suppressHydrationWarning>\r\n          <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\r\n              {/* Create a div and passe it vaul-drawer-wrapper like this way */}\r\n              <div vaul-drawer-wrapper=\"\">\r\n                 <div className=\"relative flex min-h-svh flex-col bg-background\">\r\n                    {children}\r\n                 </div>\r\n              </div>\r\n           </body>\r\n          </html>`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"space-y-6 not-prose\">\n  <Pre>\n    {`import {\r\n      Drawer,\r\n      DrawerClose,\r\n      DrawerContent,\r\n      DrawerDescription,\r\n      DrawerFooter,\r\n      DrawerHeader,\r\n      DrawerTitle,\r\n      DrawerTrigger,\r\n      } from \"@/components/ui/drawer\"\r\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Drawer>\r\n      <DrawerTrigger>Open</DrawerTrigger>\r\n      <DrawerContent>\r\n        <DrawerHeader>\r\n          <DrawerTitle>Are you absolutely sure?</DrawerTitle>\r\n          <DrawerDescription>This action cannot be undone.</DrawerDescription>\r\n        </DrawerHeader>\r\n        <DrawerFooter>\r\n          <Button>Submit</Button>\r\n          <DrawerClose>\r\n            <Button variant=\"outline\">Cancel</Button>\r\n          </DrawerClose>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n      </Drawer>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Nested Drawer\n\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\n"
  },
  {
    "slug": "/components/dropdown-menu",
    "title": "Dropdown Menu",
    "description": "Dropdown menu component for displaying a list of items.",
    "content": "<ComponentPreview name=\"dropdown-menu-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\r\n            import { Check, ChevronRight, Circle } from \"lucide-react\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const DropdownMenu = DropdownMenuPrimitive.Root\r\n\r\n            const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\r\n\r\n            const DropdownMenuGroup = DropdownMenuPrimitive.Group\r\n\r\n            const DropdownMenuPortal = DropdownMenuPrimitive.Portal\r\n\r\n            const DropdownMenuSub = DropdownMenuPrimitive.Sub\r\n\r\n            const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\r\n\r\n            const DropdownMenuSubTrigger = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\r\n                  inset?: boolean\r\n              }\r\n            >(({ className, inset, children, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.SubTrigger\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"flex cursor-default select-none items-center gap-2 rounded-md px-3 py-2 text-sm outline-none focus:bg-gray-100 data-[state=open]:bg-gray-100 [&_svg]:pointer-events-none [&_svg]:h-4 [&_svg]:w-4\",\r\n                      inset && \"pl-10\",\r\n                      className\r\n                  )}\r\n                  {...props}\r\n              >\r\n                  {children}\r\n                  <ChevronRight className=\"ml-auto\" />\r\n              </DropdownMenuPrimitive.SubTrigger>\r\n            ))\r\n            DropdownMenuSubTrigger.displayName =\r\n              DropdownMenuPrimitive.SubTrigger.displayName\r\n\r\n            const DropdownMenuSubContent = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\r\n            >(({ className, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.SubContent\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"z-50 min-w-[8rem] overflow-hidden rounded-lg border border-gray-200 bg-white p-2 text-gray-900 shadow-lg backdrop-blur-sm\",\r\n                      // Using subtle fade/scale transitions inspired by Apple’s design language\r\n                      \"data-[state=open]:animate-[fadeInScale_150ms_ease-out] data-[state=closed]:animate-[fadeOutScale_100ms_ease-in]\",\r\n                      className\r\n                  )}\r\n                  {...props}\r\n              />\r\n            ))\r\n            DropdownMenuSubContent.displayName =\r\n              DropdownMenuPrimitive.SubContent.displayName\r\n\r\n            const DropdownMenuContent = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.Content>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\r\n            >(({ className, sideOffset = 4, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.Portal>\r\n                  <DropdownMenuPrimitive.Content\r\n                      ref={ref}\r\n                      sideOffset={sideOffset}\r\n                      className={cn(\r\n                          \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\r\n                          \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\r\n                          className\r\n                      )}\r\n                      {...props}\r\n                  />\r\n              </DropdownMenuPrimitive.Portal>\r\n            ))\r\n            DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\r\n            const DropdownMenuItem = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.Item>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\r\n                  inset?: boolean\r\n              }\r\n            >(({ className, inset, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.Item\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"relative flex cursor-default select-none items-center gap-2 rounded-md px-3 py-2 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:h-4 [&>svg]:w-4\",\r\n                      inset && \"pl-10\",\r\n                      className\r\n                  )}\r\n                  {...props}\r\n              />\r\n            ))\r\n            DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\r\n\r\n            const DropdownMenuCheckboxItem = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\r\n            >(({ className, children, checked, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.CheckboxItem\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"relative flex cursor-default select-none items-center rounded-md py-2 pl-10 pr-3 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n                      className\r\n                  )}\r\n                  checked={checked}\r\n                  {...props}\r\n              >\r\n                  <span className=\"absolute left-3 flex h-4 w-4 items-center justify-center\">\r\n                      <DropdownMenuPrimitive.ItemIndicator>\r\n                          <Check className=\"h-4 w-4\" />\r\n                      </DropdownMenuPrimitive.ItemIndicator>\r\n                  </span>\r\n                  {children}\r\n              </DropdownMenuPrimitive.CheckboxItem>\r\n            ))\r\n            DropdownMenuCheckboxItem.displayName =\r\n              DropdownMenuPrimitive.CheckboxItem.displayName\r\n\r\n            const DropdownMenuRadioItem = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\r\n            >(({ className, children, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.RadioItem\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"relative flex cursor-default select-none items-center rounded-md py-2 pl-10 pr-3 text-sm outline-none transition-colors focus:bg-gray-100 focus:text-gray-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n                      className\r\n                  )}\r\n                  {...props}\r\n              >\r\n                  <span className=\"absolute left-3 flex h-4 w-4 items-center justify-center\">\r\n                      <DropdownMenuPrimitive.ItemIndicator>\r\n                          <Circle className=\"h-2 w-2 fill-current\" />\r\n                      </DropdownMenuPrimitive.ItemIndicator>\r\n                  </span>\r\n                  {children}\r\n              </DropdownMenuPrimitive.RadioItem>\r\n            ))\r\n            DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\r\n\r\n            const DropdownMenuLabel = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.Label>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\r\n                  inset?: boolean\r\n              }\r\n            >(({ className, inset, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.Label\r\n                  ref={ref}\r\n                  className={cn(\r\n                      \"px-3 py-2 text-sm font-semibold\",\r\n                      inset && \"pl-10\",\r\n                      className\r\n                  )}\r\n                  {...props}\r\n              />\r\n            ))\r\n            DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\r\n\r\n            const DropdownMenuSeparator = React.forwardRef<\r\n              React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\r\n              React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\r\n            >(({ className, ...props }, ref) => (\r\n              <DropdownMenuPrimitive.Separator\r\n                  ref={ref}\r\n                  className={cn(\"mx-3 my-1 h-px bg-gray-200\", className)}\r\n                  {...props}\r\n              />\r\n            ))\r\n            DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\r\n\r\n            const DropdownMenuShortcut = ({\r\n              className,\r\n              ...props\r\n            }: React.HTMLAttributes<HTMLSpanElement>) => {\r\n              return (\r\n                  <span\r\n                      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\r\n                      {...props}\r\n                  />\r\n              )\r\n            }\r\n            DropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\r\n\r\n            export {\r\n              DropdownMenu,\r\n              DropdownMenuTrigger,\r\n              DropdownMenuContent,\r\n              DropdownMenuItem,\r\n              DropdownMenuCheckboxItem,\r\n              DropdownMenuRadioItem,\r\n              DropdownMenuLabel,\r\n              DropdownMenuSeparator,\r\n              DropdownMenuShortcut,\r\n              DropdownMenuGroup,\r\n              DropdownMenuPortal,\r\n              DropdownMenuSub,\r\n              DropdownMenuSubContent,\r\n              DropdownMenuSubTrigger,\r\n              DropdownMenuRadioGroup,\r\n            }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        DropdownMenu,\r\n        DropdownMenuContent,\r\n        DropdownMenuItem,\r\n        DropdownMenuLabel,\r\n        DropdownMenuSeparator,\r\n        DropdownMenuTrigger\r\n      } from '@/components/library/dropdown-menu'`}\n  </Pre>\n\n  <Pre>\n    {`<DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\">Open Menu</Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent className=\"w-56\">\r\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n                <Edit className=\"mr-2 h-4 w-4\" />\r\n                <span>Edit Profile</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem>\r\n                <Download className=\"mr-2 h-4 w-4\" />\r\n                <span>Download</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem disabled>\r\n                <Share className=\"mr-2 h-4 w-4\" />\r\n                <span>Share (Disabled)</span>\r\n            </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Checkbox\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\n\n### Radio\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\n\n### Nested\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\n"
  },
  {
    "slug": "/components/folder-structure",
    "title": "Folder Structure",
    "description": "This section provides an overview of file structures and their implementation using the FileTree component.",
    "content": "<ComponentPreview name=\"folder-tree-demo\" />\n\n## About\n\nFoldet structure is built on top of <MdxBadge>sidebar</MdxBadge> from [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install dependencies\">\n      First , you need to install prism.js\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n\n      <Pre className=\"language-bash\">\n        {`npx shadcn@latest add sidebar`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"utils.ts\">\n      Second, you need to create a <MdxBadge>lib</MdxBadge> in you root directory and create a file called <MdxBadge>utils.ts</MdxBadge> and add the following code :\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create the hook\">\n      create in your root directory folder called <MdxBadge>hook</MdxBadge> and create a file called <MdxBadge>seSubmenuState.ts </MdxBadge>\n\n      <Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\n        {`import { useState, useCallback } from \"react\"\r\n\r\n          export function useSubmenuState(initialState: Record<string, boolean> = {}) {\r\n           const [openStates, setOpenStates] = useState(initialState)\r\n\r\n           const toggleSubmenu = useCallback((id: string) => {\r\n              setOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\r\n           }, [])\r\n\r\n           return { openStates, toggleSubmenu }\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Components\">\n      In your <MdxBadge>Component</MdxBadge> folder start create fill called <MdxBadge>FolderTree</MdxBadge> and add the following code:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderTree.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import { ChevronRight, File, Folder, FolderOpen } from 'lucide-react'\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            interface FileItem {\r\n            id: string\r\n            name: string\r\n            type: \"file\" | \"folder\"\r\n            path?: string\r\n            items?: FileItem[]\r\n            }\r\n\r\n            interface FileExplorerNavProps {\r\n            items: FileItem[]\r\n            }\r\n\r\n            export function FolderTree({ items }: FileExplorerNavProps) {\r\n            const [openFolders, setOpenFolders] = React.useState<Record<string, boolean>>({})\r\n\r\n            const toggleFolder = (id: string) => {\r\n              setOpenFolders((prev) => ({ ...prev, [id]: !prev[id] }))\r\n            }\r\n\r\n            const renderItem = (item: FileItem, level = 0) => {\r\n              const isOpen = openFolders[item.id]\r\n              const hasItems = item.items && item.items.length > 0\r\n\r\n              return (\r\n                <div key={item.id} className=\"relative\">\r\n                  <button\r\n                    onClick={(e) => {\r\n                      e.stopPropagation()\r\n                      if (hasItems) toggleFolder(item.id)\r\n                    }}\r\n                    className={cn(\r\n                      \"flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-sm text-gray-400 transition-colors hover:bg-white/5\",\r\n                      isOpen && \"text-white\",\r\n                    )}\r\n                    style={{ paddingLeft: \\`\\${(level + 1) * 12}px\\` }}\r\n                  >\r\n                    {hasItems ? (\r\n                      <span className=\"flex items-center gap-2\">\r\n                        <ChevronRight className={cn(\"h-3.5 w-3.5 transition-transform\", isOpen && \"rotate-90\")} />\r\n                        {isOpen ? <FolderOpen className=\"h-4 w-4\" /> : <Folder className=\"h-4 w-4\" />}\r\n                      </span>\r\n                    ) : (\r\n                      <File className=\"ml-5.5 h-4 w-4\" />\r\n                    )}\r\n                    <span>{item.name}</span>\r\n                    {item.path && <span className=\"ml-auto text-xs text-gray-500\">{item.path}</span>}\r\n                  </button>\r\n                  {hasItems && isOpen && (\r\n                    <div className=\"relative\">{item.items!.map((subItem) => renderItem(subItem, level + 1))}</div>\r\n                  )}\r\n                </div>\r\n              )\r\n            }\r\n\r\n            return (\r\n              <div className=\"w-72 overflow-hidden rounded-lg bg-gray-900 p-2 \">\r\n                <div className=\"space-y-0.5\">{items.map((item) => renderItem(item))}</div>\r\n              </div>\r\n            )\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Create folder menu\">\n      and create another file in your <MdxBadge>component</MdxBadge> folder called <MdxBadge>FolderTreeMenu</MdxBadge> and add the following code:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\n          {`\"use client\"\r\n\r\n            import { ChevronDown, ChevronRight } from \"lucide-react\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n            import {\r\n             Sidebar,\r\n             SidebarContent,\r\n             SidebarHeader,\r\n             SidebarMenu,\r\n             SidebarMenuButton,\r\n             SidebarMenuItem,\r\n             SidebarMenuSub,\r\n             SidebarMenuSubButton,\r\n             SidebarMenuSubItem,\r\n            } from \"@/components/ui/sidebar\"\r\n            import { useSubmenuState } from \"@/hooks/use-submenu-state\"\r\n\r\n            interface MenuItem {\r\n             id: string\r\n             title: string\r\n             items?: MenuItem[]\r\n            }\r\n\r\n            interface CardSidenavProps {\r\n             items: MenuItem[]\r\n            }\r\n\r\n            export function FolderTreeMenu({ items } : CardSidenavProps) {\r\n             const { openStates, toggleSubmenu } = useSubmenuState()\r\n\r\n             const renderMenuItem = (item: MenuItem) => {\r\n                const hasSubItems = item.items && item.items.length > 0\r\n                const isOpen = openStates[item.id]\r\n\r\n                return (\r\n                   <SidebarMenuItem key={item.id}>\r\n                      <SidebarMenuButton\r\n                         onClick={() => hasSubItems && toggleSubmenu(item.id)}\r\n                         className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\r\n                      >\r\n                         {item.title}\r\n                         {hasSubItems && (\r\n                            <span className=\"ml-auto\">\r\n                               {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                            </span>\r\n                         )}\r\n                      </SidebarMenuButton>\r\n                      {hasSubItems && (\r\n                         <SidebarMenuSub>\r\n                            {isOpen &&\r\n                               item.items!.map((subItem) => (\r\n                                  <SidebarMenuSubItem key={subItem.id}>\r\n                                     <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\r\n                                  </SidebarMenuSubItem>\r\n                               ))}\r\n                         </SidebarMenuSub>\r\n                      )}\r\n                   </SidebarMenuItem>\r\n                )\r\n             }\r\n\r\n             return (\r\n                <Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\r\n                   <SidebarHeader className=\"px-4 py-2\">\r\n                      <h2 className=\"text-lg font-semibold\">Menu</h2>\r\n                   </SidebarHeader>\r\n                   <SidebarContent>\r\n                      <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\r\n                   </SidebarContent>\r\n                </Sidebar>\r\n             )\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Create example folder\">\n      And last file create in your <MdxBadge>component</MdxBadge> folder file called <MdxBadge>FolderExample.tsx</MdxBadge> and add the following code :\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\n          {`\"use client\"\r\n\r\n            import { FolderTree } from \"./FolderTree\"\r\n\r\n            type FileItem = {\r\n             id: string\r\n             name: string\r\n             type: \"file\" | \"folder\"\r\n             path?: string\r\n             items?: FileItem[]\r\n            }\r\n\r\n            const fileStructure: FileItem[] = [\r\n             {\r\n                id: \"app\",\r\n                name: \"app\",\r\n                type: \"folder\",\r\n                items: [\r\n                   {\r\n                      id: \"layout\",\r\n                      name: \"layout.js\",\r\n                      type: \"file\",\r\n                   },\r\n                   {\r\n                      id: \"marketing\",\r\n                      name: \"(marketing)\",\r\n                      type: \"folder\",\r\n                      items: [\r\n                         {\r\n                            id: \"about\",\r\n                            name: \"about\",\r\n                            type: \"folder\",\r\n                            path: \"/about\",\r\n                            items: [\r\n                               {\r\n                                  id: \"about-page\",\r\n                                  name: \"page.js\",\r\n                                  type: \"file\",\r\n                               },\r\n                            ],\r\n                         },\r\n                         {\r\n                            id: \"blog\",\r\n                            name: \"blog\",\r\n                            type: \"folder\",\r\n                            path: \"/blog\",\r\n                            items: [\r\n                               {\r\n                                  id: \"blog-page\",\r\n                                  name: \"page.js\",\r\n                                  type: \"file\",\r\n                               },\r\n                            ],\r\n                         },\r\n                      ],\r\n                   },\r\n                   {\r\n                      id: \"shop\",\r\n                      name: \"(shop)\",\r\n                      type: \"folder\",\r\n                      items: [\r\n                         {\r\n                            id: \"account\",\r\n                            name: \"account\",\r\n                            type: \"folder\",\r\n                            path: \"/account\",\r\n                            items: [\r\n                               {\r\n                                  id: \"account-page\",\r\n                                  name: \"page.js\",\r\n                                  type: \"file\",\r\n                               },\r\n                            ],\r\n                         },\r\n                      ],\r\n                   },\r\n                ],\r\n             },\r\n            ]\r\n\r\n            export default function FolderTreeExample() {\r\n             return (\r\n                <div className=\"flex items-center justify-center \">\r\n                   <FolderTree items={fileStructure} />\r\n                </div>\r\n             )\r\n            } \r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space space-y-4\">\n  <p className=\"text-base\">\n    start use it by creating an object with the following properties :\n  </p>\n\n  <Pre className=\"language-typescript\">\n    {`type FileItem = {\r\n       id: string\r\n       name: string\r\n       type: \"file\" | \"folder\"\r\n       path?: string\r\n       items?: FileItem[]\r\n      }\r\n      const fileStructure: FileItem[] = [\r\n       {\r\n        // your have to give it an id\r\n          id: \"app\",\r\n          name: \"app\",\r\n          type: \"folder\",\r\n          items: [\r\n             {\r\n                id: \"layout\",\r\n                name: \"layout.js\",\r\n                type: \"file\",\r\n             },\r\n             {\r\n                id: \"marketing\",\r\n                name: \"(marketing)\",\r\n                type: \"folder\",\r\n                items: [\r\n                   {\r\n                      id: \"about\",\r\n                      name: \"about\",\r\n                      type: \"folder\",\r\n                      path: \"/about\",\r\n                   },\r\n                ],\r\n             },\r\n          ],\r\n       },\r\n      ]\r\n      `}\n  </Pre>\n\n  <p className=\"text-base\">\n    and then create a <MdxBadge>div tag</MdxBadge> and import  the obj in it\n  </p>\n\n  <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\n    {`\"use client\"\r\n\r\n      import { FileExplorerNav } from \"./FolderTree\"\r\n      export default function FolderTreeExample() {\r\n       return (\r\n          <div className=\"flex items-center justify-center \">\r\n             <FolderTree items={fileStructure} />\r\n          </div>\r\n       )\r\n      }  \r\n      `}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/input",
    "title": "Input",
    "description": "A Input component",
    "content": "<ComponentPreview name=\"input-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"install dependencies\">\n      First, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a <MdxBadge>lib</MdxBadge> in you root directory and create a file called <MdxBadge>utils.ts</MdxBadge> and add the following code :\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Input Component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>input.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"className-typescript\" folderPath=\"components/input.tsx\" highlightLines={[6]}>\n          {`import * as React from \"react\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\r\n            ({ className, type, ...props }, ref) => {\r\n              return (\r\n                <input\r\n                  type={type}\r\n                  className={cn(\r\n                    \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\r\n                    className\r\n                  )}\r\n                  ref={ref}\r\n                  {...props}\r\n                />\r\n              )\r\n            }\r\n            )\r\n            Input.displayName = \"Input\"\r\n\r\n            export { Input }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Input } from \"@/components/library/input\"`}\n  </Pre>\n\n  <Pre>\n    {`const InputDemo = () => {\r\n      return <Input className=\"w-56\" type=\"email\" placeholder=\"Email\" />\r\n      }\r\n\r\n      export default InputDemo`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"input-demo\" />\n\n### File\n\nupload file\n\n<ComponentPreview name=\"input\" variant=\"file\" />\n\n### Disabled\n\n<ComponentPreview name=\"input\" variant=\"disabled\" />\n\n### With Label\n\n<ComponentPreview name=\"input\" variant=\"label\" />\n\n### With button\n\n<ComponentPreview name=\"input\" variant=\"button\" />\n"
  },
  {
    "slug": "/components/label",
    "title": "Label",
    "description": "A Label component",
    "content": "<ComponentPreview name=\"label-demo\" />\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"install dependencies\">\n      First, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a <MdxBadge>lib</MdxBadge> in you root directory and create a file called <MdxBadge>utils.ts</MdxBadge> and add the following code :\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Label Component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>label.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"className-typescript\" folderPath=\"components/label.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as LabelPrimitive from \"@radix-ui/react-label\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const labelVariants = cva(\r\n            \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n            )\r\n\r\n            const Label = React.forwardRef<\r\n            React.ElementRef<typeof LabelPrimitive.Root>,\r\n            React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n              VariantProps<typeof labelVariants>\r\n            >(({ className, ...props }, ref) => (\r\n            <LabelPrimitive.Root\r\n              ref={ref}\r\n              className={cn(labelVariants(), className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            Label.displayName = LabelPrimitive.Root.displayName\r\n\r\n            export { Label }\r\n\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Checkbox } from \"@/components/library/checkbox\"\r\n      import { Label } from \"@/components/library/label\"\r\n      `}\n  </Pre>\n\n  <Pre>\n    {`\r\n      const LabelDemo = () => {\r\n      return (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Checkbox id=\"terms\" />\r\n          <Label\r\n            htmlFor=\"terms\"\r\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n          >\r\n            Accept terms and conditions\r\n          </Label>\r\n        </div>\r\n      )\r\n      }\r\n\r\n      export default LabelDemo`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/note",
    "title": "Note Component",
    "description": "Introducing the Note Component Communicating Effectively in Your UI",
    "content": "**Learn how to use the versatile Note component to communicate important information effectively within your user interface.**\n\n<ComponentPreview name=\"note-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Note Component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>Note.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"className-typescript\" folderPath=\"components/note.tsx\" highlightLines={[6]}>\n          {`\"use client\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n            import { AlertTriangleIcon, CheckCircle2Icon, InfoIcon, X, XCircleIcon } from \"lucide-react\"\r\n            import React, { useState } from \"react\"\r\n            type NoteVariant = \"info\" | \"warning\" | \"success\" | \"error\"\r\n\r\n            interface NoteProps {\r\n            variant?: NoteVariant\r\n            className?: string\r\n            closable?: boolean\r\n            children: React.ReactNode\r\n            }\r\n\r\n            const variantConfig = {\r\n            info: {\r\n              bg: \"bg-blue-50/80 dark:bg-blue-900/20\",\r\n              border: \"border-l-4 border-blue-400\",\r\n              icon: \"text-blue-500\",\r\n            },\r\n            warning: {\r\n              bg: \"bg-yellow-50/80 dark:bg-yellow-900/20\",\r\n              border: \"border-l-4 border-yellow-400\",\r\n              icon: \"text-yellow-500\",\r\n            },\r\n            success: {\r\n              bg: \"bg-green-50/80 dark:bg-green-900/20\",\r\n              border: \"border-l-4 border-green-400\",\r\n              icon: \"text-green-500\",\r\n            },\r\n            error: {\r\n              bg: \"bg-red-50/80 dark:bg-red-900/20\",\r\n              border: \"border-l-4 border-red-400\",\r\n              icon: \"text-red-500\",\r\n            },\r\n            }\r\n\r\n            const Note = ({\r\n            variant = \"info\",\r\n            className,\r\n            closable = false,\r\n            children\r\n            }: NoteProps) => {\r\n            const [isClosed, setIsClosed] = useState(false)\r\n\r\n            if (isClosed) return null\r\n\r\n            return (\r\n              <div\r\n                className={cn(\r\n                  \"p-4 rounded-lg relative backdrop-blur-sm\",\r\n                  variantConfig[variant].bg,\r\n                  variantConfig[variant].border,\r\n                  className\r\n                )}\r\n              >\r\n                {closable && (\r\n                  <button\r\n                    onClick={() => setIsClosed(true)}\r\n                    className=\"absolute top-2 right-2 p-1 rounded-full hover:bg-black/5 dark:hover:bg-white/10\"\r\n                  >\r\n                    <X className=\"w-4 h-4 text-muted-foreground\" />\r\n                  </button>\r\n                )}\r\n\r\n                <div className=\"flex items-start gap-3\">\r\n                  <div className={cn(\"mt-0.5 flex-shrink-0\", variantConfig[variant].icon)}>\r\n                    {variant === \"info\" && <InfoIcon className=\"w-5 h-5\" />}\r\n                    {variant === \"warning\" && <AlertTriangleIcon className=\"w-5 h-5\" />}\r\n                    {variant === \"success\" && <CheckCircle2Icon className=\"w-5 h-5\" />}\r\n                    {variant === \"error\" && <XCircleIcon className=\"w-5 h-5\" />}\r\n                  </div>\r\n                  <div className=\"[&>:last-child]:mb-0 [&>:first-child]:mt-0 text-sm\">\r\n                    {children}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n            }\r\n\r\n            export { Note }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import { Note } from \"@/components/Note\"`}\n  </Pre>\n\n  <Pre className=\"language-tsx\">\n    {`import { Note } from \"@/components/library/note\"\r\n\r\n      const NoteDemo = () => {\r\n         return <Note variant=\"info\">This is an informational note.</Note>\r\n      }\r\n\r\n      export default NoteDemo`}\n  </Pre>\n</div>\n\n## Example\n\n### Standard Note\n\n<ComponentPreview name=\"note-demo\" />\n\n### Success Note\n\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\n\n### Warning Note\n\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\n\n### Danger Note\n\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\n\n## Closable Notes\n\nTo allow users to dismiss the note, set the <MdxBadge>closable</MdxBadge> prop to <MdxBadge>true</MdxBadge>.\n\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\n"
  },
  {
    "slug": "/components/popover",
    "title": "Popover",
    "description": "Popover component",
    "content": "<ComponentPreview name=\"popover-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Popover.tsx\">\n      Third, you need to create a new folder called <MdxBadge>components</MdxBadge> in you app directory and create a new file called <MdxBadge>popover.tsx</MdxBadge> and paste the following code in it:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/popover.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as PopoverPrimitive from \"@radix-ui/react-popover\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Popover = PopoverPrimitive.Root\r\n\r\n            const PopoverTrigger = PopoverPrimitive.Trigger\r\n\r\n            const PopoverAnchor = PopoverPrimitive.Anchor\r\n\r\n            const PopoverContent = React.forwardRef<\r\n             React.ElementRef<typeof PopoverPrimitive.Content>,\r\n             React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\r\n            >(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\r\n             <PopoverPrimitive.Portal>\r\n                <PopoverPrimitive.Content\r\n                   ref={ref}\r\n                   align={align}\r\n                   sideOffset={sideOffset}\r\n                   className={cn(\r\n                      \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\r\n                      className\r\n                   )}\r\n                   {...props}\r\n                />\r\n             </PopoverPrimitive.Portal>\r\n            ))\r\n            PopoverContent.displayName = PopoverPrimitive.Content.displayName\r\n\r\n            export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      Popover,\r\n      PopoverContent,\r\n      PopoverTrigger,\r\n      } from \"@/components/ui/popover\"`}\n  </Pre>\n\n  <Pre>\n    {`<Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button>Click me</Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent>\r\n        <p>Your content here</p>\r\n      </PopoverContent>\r\n      </Popover>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/product-card",
    "title": "Product Card",
    "description": "This section provides an overview of Introduction.",
    "content": "<ComponentPreview name=\"product-card-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>product-card.tsx</MdxBadge> file and add the following code in it :\n\n      <Pre className=\"language-typescript\" folderPath=\"components/product-card.tsx\">\n        {`\"use client\"\r\n\r\n          import { cn } from \"@/lib/utils\";\r\n          import { Truck } from \"lucide-react\";\r\n          import { useState } from \"react\";\r\n\r\n          export default function ProductCard() {\r\n           const [isDetailsClicked, setIsDetailsClicked] = useState(false);\r\n           return (\r\n              <div className=\"select-none max-w-[300px] relative\">\r\n                 <div className=\"absolute top-[3%] -left-[3%] z-10 px-[5px] py-[7px] flex items-center justify-center gap-2 text-background text-xs rounded-tl-[0] rounded-br-[5px] rounded-tr-[5px] rounded-bl-[0] bg-[#676769] dark:bg-[#dad4d4]\">\r\n                    <Truck className=\"w-4 h-4\" />\r\n                    Fast shipping\r\n                 </div>\r\n                 <div className=\"absolute right-[0px] z-10 flex items-center justify-center text-background text-xs\">\r\n                    <span className='rounded-none text-sm px-2 py-1 bg-destructive'>20%</span>\r\n                 </div>\r\n                 <div className=\"p-0\">\r\n                    <div className=\"relative\">\r\n                       <img\r\n                          src=\"/JY-BO-001-650MM-8W (1).png\"\r\n                          alt=\"LED Chandelier\"\r\n                          className=\"object-contain\"\r\n                       />\r\n                    </div>\r\n                    <div className=\"space-y-1\">\r\n                       <p className=\"text-[19px] mt-[10px] font-medium\">PRODUCT-MC6015-H3</p>\r\n                       <h3 className=\" leading-tight text-zinc-500\">\r\n                          Aluminum Shade + Glass LED Chandelier With E27 Base & 36W\r\n                       </h3>\r\n                       <div className=\"flex items-baseline gap-2\">\r\n                          <span className=\"text-lg font-bold text-red-500\">EGP 2576.00</span>\r\n                          <span className=\"text-sm text-zinc-400 line-through\">EGP 3219.00</span>\r\n                       </div>\r\n                    </div>\r\n                 </div>\r\n                 <div className=\"flex justify-between gap-2 mt-[10px]\">\r\n                    <button className={cn(\"flex-1 border border-black py-2 px-2 rounded-md\", { \"bg-gray-100\": isDetailsClicked })}\r\n                       onClick={() => setIsDetailsClicked(true)}>\r\n                       More details\r\n                    </button>\r\n                    <button className=\"shrink-0 bg-black rounded-md py-1 px-2 \">\r\n                       <svg\r\n                          xmlns=\"http://www.w3.org/2000/svg\"\r\n                          viewBox=\"0 0 576 512\"\r\n                          width={20}\r\n                          height={20}\r\n                          fill=\"white\"\r\n                       >\r\n                          <path\r\n                             d=\"M0 24C0 10.7 10.7 0 24 0H69.5c22 0 41.5 12.8 50.6 32h411c26.3 0 45.5 25 38.6 50.4l-41 152.3c-8.5 31.4-37 53.3-69.5 53.3H170.7l5.4 28.5c2.2 11.3 12.1 19.5 23.6 19.5H488c13.3 0 24 10.7 24 24s-10.7 24-24 24H199.7c-34.6 0-64.3-24.6-70.7-58.5L77.4 54.5c-.7-3.8-4-6.5-7.9-6.5H24C10.7 48 0 37.3 0 24zM128 464a48 48 0 1 1 96 0 48 48 0 1 1 -96 0zm336-48a48 48 0 1 1 0 96 48 48 0 1 1 0-96z\" />\r\n                       </svg>\r\n                    </button>\r\n                 </div>\r\n              </div>\r\n           )} \r\n           `}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n"
  },
  {
    "slug": "/components/scroll-area",
    "title": "Scroll Area",
    "description": "Scroll Area Component",
    "content": "<ComponentPreview name=\"scroll-area-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const ScrollArea = React.forwardRef<\r\n            React.ElementRef<typeof ScrollAreaPrimitive.Root>,\r\n            React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\r\n            >(({ className, children, ...props }, ref) => (\r\n            <ScrollAreaPrimitive.Root\r\n              ref={ref}\r\n              className={cn(\"relative overflow-hidden h-[25.5rem]\", className)}\r\n              {...props}\r\n            >\r\n              <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\r\n                {children}\r\n              </ScrollAreaPrimitive.Viewport>\r\n              <ScrollBar />\r\n              <ScrollAreaPrimitive.Corner />\r\n            </ScrollAreaPrimitive.Root>\r\n            ))\r\n            ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\r\n\r\n            const ScrollBar = React.forwardRef<\r\n            React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\r\n            React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n            >(({ className, orientation = \"vertical\", ...props }, ref) => (\r\n            <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n              ref={ref}\r\n              orientation={orientation}\r\n              className={cn(\r\n                \"flex touch-none select-none transition-colors\",\r\n                orientation === \"vertical\" &&\r\n                \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\r\n                orientation === \"horizontal\" &&\r\n                \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\r\n                className\r\n              )}\r\n              {...props}\r\n            >\r\n              <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\r\n            </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n            ))\r\n            ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\r\n\r\n            export { ScrollArea, ScrollBar }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ScrollArea } from \"@/components/ui/scroll-area\"`}\n  </Pre>\n\n  <Pre>\n    {`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\r\n      Jokester began sneaking into the castle in the middle of the night and leaving\r\n      jokes all over the place: under the king's pillow, in his soup, even in the\r\n      royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\r\n      then, one day, the people of the kingdom discovered that the jokes left by\r\n      Jokester were so funny that they couldn't help but laugh. And once they\r\n      started laughing, they couldn't stop.\r\n      </ScrollArea>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Horizontal\n\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\n"
  },
  {
    "slug": "/components/separator",
    "title": "Separator",
    "description": "Separator",
    "content": "<ComponentPreview name=\"separator-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-separator`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...Inputs: ClassValue[]) {\r\n            return twMerge(clsx(Inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre folderPath=\"component/separator.tsx\">\n          {`\"use client\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n            import * as SeparatorPrimitive from \"@radix-ui/react-separator\"\r\n            import * as React from \"react\"\r\n\r\n            const Separator = React.forwardRef<\r\n            React.ElementRef<typeof SeparatorPrimitive.Root>,\r\n            React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root> & {\r\n              weight?: \"ultralight\" | \"light\" | \"regular\";\r\n            }\r\n            >(\r\n            (\r\n              {\r\n                className,\r\n                orientation = \"horizontal\",\r\n                decorative = true,\r\n                weight = \"regular\",\r\n                ...props\r\n              },\r\n              ref\r\n            ) => {\r\n              const weightOpacity = {\r\n                ultralight: \"opacity-[0.15]\",\r\n                light: \"opacity-[0.90]\",\r\n                regular: \"opacity-1\"\r\n              }\r\n              return (\r\n                <SeparatorPrimitive.Root\r\n                  ref={ref}\r\n                  decorative={decorative}\r\n                  orientation={orientation}\r\n                  className={cn(\r\n                    \"shrink-0 bg-border transition-all\",\r\n                    weightOpacity[weight],\r\n                    orientation === \"horizontal\" ? \"h-[1.1] w-full\" : \"h-full w-px\",\r\n                    className\r\n                  )}\r\n                  {...props}\r\n                />\r\n              )\r\n            }\r\n            )\r\n            Separator.displayName = SeparatorPrimitive.Root.displayName\r\n\r\n            export { Separator }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Separator } from \"@/components/library/separator\"`}\n  </Pre>\n\n  <Pre>\n    {`<Separator />`}\n  </Pre>\n</div>\n\n## Examples\n\n### Vertical\n\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\n\n### Weight\n\n#### Ultralight\n\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\n\n#### Light\n\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\n\n#### Regular\n\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\n"
  },
  {
    "slug": "/components/sheet",
    "title": "Sheet",
    "description": "A sheet is a component that slides in from the bottom of the screen, typically used for displaying additional content or options without navigating away from the current screen.",
    "content": "<ComponentPreview name=\"sheet-demo\" />\n\n<div className=\"not-prose mdx:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...Inputs: ClassValue[]) {\r\n            return twMerge(clsx(Inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem>\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as SheetPrimitive from \"@radix-ui/react-dialog\"\r\n            import { cva, type VariantProps } from \"class-variance-authority\"\r\n            import { X } from \"lucide-react\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Sheet = SheetPrimitive.Root\r\n\r\n            const SheetTrigger = SheetPrimitive.Trigger\r\n\r\n            const SheetClose = SheetPrimitive.Close\r\n\r\n            const SheetPortal = SheetPrimitive.Portal\r\n\r\n            const SheetOverlay = React.forwardRef<\r\n            React.ElementRef<typeof SheetPrimitive.Overlay>,\r\n            React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\r\n            >(({ className, ...props }, ref) => (\r\n            <SheetPrimitive.Overlay\r\n              className={cn(\r\n                \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n                className\r\n              )}\r\n              {...props}\r\n              ref={ref}\r\n            />\r\n            ))\r\n            SheetOverlay.displayName = SheetPrimitive.Overlay.displayName\r\n\r\n            const sheetVariants = cva(\r\n            \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\r\n            {\r\n              variants: {\r\n                side: {\r\n                  top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\r\n                  bottom:\r\n                    \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\r\n                  left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\r\n                  right:\r\n                    \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\r\n                },\r\n              },\r\n              defaultVariants: {\r\n                side: \"right\",\r\n              },\r\n            }\r\n            )\r\n\r\n            interface SheetContentProps\r\n            extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\r\n            VariantProps<typeof sheetVariants> { }\r\n\r\n            const SheetContent = React.forwardRef<\r\n            React.ElementRef<typeof SheetPrimitive.Content>,\r\n            SheetContentProps\r\n            >(({ side = \"right\", className, children, ...props }, ref) => (\r\n            <SheetPortal>\r\n              <SheetOverlay />\r\n              <SheetPrimitive.Content\r\n                ref={ref}\r\n                className={cn(sheetVariants({ side }), className)}\r\n                {...props}\r\n              >\r\n                <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\r\n                  <X className=\"h-4 w-4\" />\r\n                  <span className=\"sr-only\">Close</span>\r\n                </SheetPrimitive.Close>\r\n                {children}\r\n              </SheetPrimitive.Content>\r\n            </SheetPortal>\r\n            ))\r\n            SheetContent.displayName = SheetPrimitive.Content.displayName\r\n\r\n            const SheetHeader = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"flex flex-col space-y-2 text-center sm:text-left\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            SheetHeader.displayName = \"SheetHeader\"\r\n\r\n            const SheetFooter = ({\r\n            className,\r\n            ...props\r\n            }: React.HTMLAttributes<HTMLDivElement>) => (\r\n            <div\r\n              className={cn(\r\n                \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n                className\r\n              )}\r\n              {...props}\r\n            />\r\n            )\r\n            SheetFooter.displayName = \"SheetFooter\"\r\n\r\n            const SheetTitle = React.forwardRef<\r\n            React.ElementRef<typeof SheetPrimitive.Title>,\r\n            React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\r\n            >(({ className, ...props }, ref) => (\r\n            <SheetPrimitive.Title\r\n              ref={ref}\r\n              className={cn(\"text-lg font-semibold text-foreground\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            SheetTitle.displayName = SheetPrimitive.Title.displayName\r\n\r\n            const SheetDescription = React.forwardRef<\r\n            React.ElementRef<typeof SheetPrimitive.Description>,\r\n            React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\r\n            >(({ className, ...props }, ref) => (\r\n            <SheetPrimitive.Description\r\n              ref={ref}\r\n              className={cn(\"text-sm text-muted-foreground\", className)}\r\n              {...props}\r\n            />\r\n            ))\r\n            SheetDescription.displayName = SheetPrimitive.Description.displayName\r\n\r\n            export {\r\n            Sheet,\r\n            SheetPortal,\r\n            SheetOverlay,\r\n            SheetTrigger,\r\n            SheetClose,\r\n            SheetContent,\r\n            SheetHeader,\r\n            SheetFooter,\r\n            SheetTitle,\r\n            SheetDescription,\r\n            }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Sheet,\r\n        SheetClose,\r\n        SheetContent,\r\n        SheetDescription,\r\n        SheetFooter,\r\n        SheetHeader,\r\n        SheetTitle,\r\n        SheetTrigger\r\n      } from '@/components/library/sheet';`}\n  </Pre>\n\n  <Pre>\n    {`<Sheet>\r\n        <SheetTrigger asChild>\r\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n                <Settings size={16} />\r\n                Open Settings\r\n            </Button>\r\n        </SheetTrigger>\r\n        <SheetContent side=\"right\">\r\n        <SheetHeader>\r\n            <SheetTitle>Settings</SheetTitle>\r\n            <SheetDescription>Configure your application preferences here</SheetDescription>\r\n        </SheetHeader>\r\n        <div className=\"py-6\">\r\n            <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Dark Mode</Label>\r\n                    <Checkbox id=\"dark-mood\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Notification</Label>\r\n                    <Checkbox id=\"notification\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Email Updates</Label>\r\n                    <Checkbox id=\"email-updates\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <SheetFooter>\r\n            <SheetClose asChild>\r\n                <Button>Save Changes</Button>\r\n            </SheetClose>\r\n        </SheetFooter>\r\n      </SheetContent>\r\n      </Sheet>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Control Side\n\n#### Top\n\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\n\n#### Right\n\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\n\n#### Bottom\n\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\n\n#### Left\n\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\n"
  },
  {
    "slug": "/components/sonner",
    "title": "Sonner",
    "description": "An opinionated toast component for React.",
    "content": "<ComponentPreview name=\"sonner-demo\" />\n\n## About\n\n<MdxBadge>Sonner</MdxBadge> is built on top of [Sonner](https://sonner.emilkowal.ski/) by [emilkowalski\\_](https://x.com/emilkowalski_).\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge sonner next-themes`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create sonner component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>sonner.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre>\n          {`\"use client\"\r\n\r\n            import { useTheme } from \"next-themes\"\r\n            import React from \"react\"\r\n            import { Toaster as Sonner } from \"sonner\"\r\n\r\n            type ToasterProps = React.ComponentProps<typeof Sonner>\r\n\r\n            const Toaster = ({ ...props }: ToasterProps) => {\r\n            const { theme = \"system\" } = useTheme()\r\n\r\n            return (\r\n              <Sonner\r\n                theme={theme as ToasterProps[\"theme\"]}\r\n                className=\"toaster group\"\r\n                toastOptions={{\r\n                  classNames: {\r\n                    toast:\r\n                      \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-md rounded-lg backdrop-blur-sm dark:backdrop-blur-lg group-[.toaster]:border-0\",\r\n                    title: \"text-base font-medium tracking-tight\",\r\n                    description: \"group-[.toast]:text-muted-foreground text-sm font-normal leading-5\",\r\n                    actionButton:\r\n                      \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground rounded-full px-4 py-1.5 text-xs font-medium transition-colors hover:opacity-90\",\r\n                    cancelButton:\r\n                      \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground rounded-full px-4 py-1.5 text-xs font-medium transition-colors hover:opacity-80\",\r\n                    success: \"!bg-green-50 dark:!bg-green-950/30 !border-l-4 !border-l-green-500\",\r\n                    error: \"!bg-red-50 dark:!bg-red-950/30 !border-l-4 !border-l-red-500\",\r\n                    warning: \"!bg-amber-50 dark:!bg-amber-950/30 !border-l-4 !border-l-amber-500\",\r\n                    info: \"!bg-blue-50 dark:!bg-blue-950/30 !border-l-4 !border-l-blue-500\",\r\n                    loader: \"group-[.toast]:text-muted-foreground\",\r\n                  },\r\n                  duration: 4000,\r\n                }}\r\n                closeButton\r\n                icons={{\r\n                  success: <CheckIcon className=\"h-5 w-5 text-green-500\" />,\r\n                  error: <XIcon className=\"h-5 w-5 text-red-500\" />,\r\n                  warning: <AlertIcon className=\"h-5 w-5 text-amber-500\" />,\r\n                  info: <InfoIcon className=\"h-5 w-5 text-blue-500\" />,\r\n                }}\r\n                // Custom animations\r\n                expand={false}\r\n                position=\"top-center\"\r\n                visibleToasts={5}\r\n                gap={8}\r\n                {...props}\r\n              />\r\n            )\r\n            }\r\n\r\n\r\n            const CheckIcon = ({ className = \"\" }) => (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className={className}\r\n            >\r\n              <path d=\"M20 6L9 17l-5-5\" />\r\n            </svg>\r\n            )\r\n\r\n            const XIcon = ({ className = \"\" }) => (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className={className}\r\n            >\r\n              <path d=\"M18 6L6 18M6 6l12 12\" />\r\n            </svg>\r\n            )\r\n\r\n            const AlertIcon = ({ className = \"\" }) => (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className={className}\r\n            >\r\n              <path d=\"M12 9v4M12 17.5v.5\" />\r\n              <path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\" />\r\n            </svg>\r\n            )\r\n\r\n            const InfoIcon = ({ className = \"\" }) => (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 24 24\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              className={className}\r\n            >\r\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\r\n              <path d=\"M12 16v-4M12 8h.01\" />\r\n            </svg>\r\n            )\r\n\r\n            export { Toaster }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"edit layout.tsx for Toaster component\">\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add <MdxBadge>\\<Toaster/></MdxBadge> to show the toast :\n\n      <Pre highlightLines={[8]}>\n        {`import { Toaster } from \"@/components/library/sonner\"\r\n\r\n          export default function RootLayout({ children }) {\r\n          return (\r\n            <html lang=\"en\">\r\n              <body>\r\n                <main>{children}</main>\r\n                <Toaster />\r\n              </body>\r\n            </html>\r\n           )\r\n          }`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"space-y-6 not-prose\">\n  <Pre>\n    {`import { toast } from \"sonner\"`}\n  </Pre>\n\n  <Pre>\n    {`toast(\"Event has been created.\")`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/steps",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "<ComponentPreview name=\"steps-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Step component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a Step.tsx file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/Step.tsx\">\n          {`import { Children, PropsWithChildren } from \"react\"\r\n            import clsx from \"clsx\"\r\n\r\n            import { StepItemProps, StepProps } from \"@/types/components\"\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            export function Step({ children }: PropsWithChildren<StepProps>) {\r\n            const length = Children.count(children)\r\n            return (\r\n              <div className=\"flex flex-col my-5 w-full\">\r\n                {Children.map(children, (child, index) => (\r\n                  <div\r\n                    className={cn(\r\n                      \"relative border-l md:pl-9 pl-7\",\r\n                      clsx({ \"pb-5\": index < length - 1 })\r\n                    )}\r\n                  >\r\n                    <div className=\"absolute -left-4 flex items-center justify-center w-8 h-8 rounded-full bg-muted text-sm font-code font-medium -indent-[1px]\">\r\n                      {index + 1}\r\n                    </div>\r\n                    {child}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )\r\n            }\r\n\r\n            export function StepItem({ children, title }: StepItemProps) {\r\n            return (\r\n              <div className=\"space-y-4\">\r\n                {title && (\r\n                  <h3 className=\"!mt-0 text-lg md:text-xl text-gray-950 dark:text-gray-50\">\r\n                    {title}\r\n                  </h3>\r\n                )}\r\n                <div className=\"text-base text-muted-foreground space-y-3\">\r\n                  {children}\r\n                </div>\r\n              </div>\r\n            )\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Step, StepItem } from \"@/components/library/step\"`}\n  </Pre>\n\n  <Pre>\n    {`<Step>\r\n            <StepItem title=\"development\">localhost:3000</StepItem>\r\n            <StepItem title=\"production\">localhost:3000</StepItem>\r\n        </Step>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/tabs",
    "title": "Tabs",
    "description": "A tabs component",
    "content": "<ComponentPreview name=\"tabs-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Button component\">\n      Now you can create in your <MdxBadge>components</MdxBadge> a <MdxBadge>tab.tsx</MdxBadge> file and add the following code in it :\n\n      <CodeBlockWrapper>\n        <Pre className=\"className-typescript\" folderPath=\"components/tabs.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as TabsPrimitive from \"@radix-ui/react-tabs\"\r\n            import { AnimatePresence, motion } from \"framer-motion\"\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            const Tabs = TabsPrimitive.Root\r\n\r\n            const TabsList = React.forwardRef<\r\n            React.ElementRef<typeof TabsPrimitive.List>,\r\n            React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\r\n            >(({ className, ...props }, ref) => (\r\n            <TabsPrimitive.List\r\n              ref={ref}\r\n              className={cn(\r\n                \"inline-flex items-center justify-center rounded-lg bg-transparent p-0.5 text-muted-foreground\",\r\n                \"h-9\",\r\n                className,\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            TabsList.displayName = TabsPrimitive.List.displayName\r\n\r\n            const TabsContainer = React.forwardRef<\r\n            HTMLDivElement,\r\n            React.HTMLAttributes<HTMLDivElement> & {\r\n              defaultIndex?: number\r\n              value?: string\r\n              defaultValue?: string\r\n              onValueChange?: (value: string) => void\r\n            }\r\n            >(({ className, defaultIndex = 0, children, ...props }, ref) => {\r\n            const [activeIndex, setActiveIndex] = React.useState(defaultIndex)\r\n            const tabRefs = React.useRef<Map<number, HTMLButtonElement>>(new Map())\r\n            const containerRef = React.useRef<HTMLDivElement>(null)\r\n            const [activeStyle, setActiveStyle] = React.useState({\r\n              left: \"0px\",\r\n              width: \"0px\",\r\n            })\r\n\r\n            const updateActiveStyle = React.useCallback(() => {\r\n              const activeElement = tabRefs.current.get(activeIndex)\r\n              if (activeElement && containerRef.current) {\r\n                const containerRect = containerRef.current.getBoundingClientRect()\r\n                const tabRect = activeElement.getBoundingClientRect()\r\n                const left = tabRect.left - containerRect.left\r\n\r\n                setActiveStyle({\r\n                  left: \\`\\${left}px\\`,\r\n                  width: \\`\\${tabRect.width}px\\`,\r\n                })\r\n              }\r\n            }, [activeIndex])\r\n\r\n            React.useEffect(() => {\r\n              updateActiveStyle()\r\n\r\n              const handleResize = () => {\r\n                requestAnimationFrame(updateActiveStyle)\r\n              }\r\n\r\n              window.addEventListener(\"resize\", handleResize)\r\n              const resizeObserver = new ResizeObserver(() => {\r\n                requestAnimationFrame(updateActiveStyle)\r\n              })\r\n              if (containerRef.current) {\r\n                resizeObserver.observe(containerRef.current)\r\n              }\r\n\r\n              tabRefs.current.forEach((tabElement) => {\r\n                resizeObserver.observe(tabElement)\r\n              })\r\n\r\n              return () => {\r\n                window.removeEventListener(\"resize\", handleResize)\r\n                resizeObserver.disconnect()\r\n              }\r\n            }, [activeIndex, updateActiveStyle])\r\n\r\n            React.useEffect(() => {\r\n              if (!containerRef.current) return\r\n\r\n              const observer = new MutationObserver(() => {\r\n                requestAnimationFrame(updateActiveStyle)\r\n              })\r\n\r\n              observer.observe(containerRef.current, {\r\n                childList: true,\r\n                subtree: true,\r\n                attributes: true,\r\n                characterData: true,\r\n              })\r\n\r\n              return () => observer.disconnect()\r\n            }, [updateActiveStyle])\r\n\r\n            return (\r\n              <TabsPrimitive.List\r\n                ref={(el) => {\r\n                  if (typeof ref === \"function\") ref(el)\r\n                  else if (ref) ref.current = el\r\n                  containerRef.current = el as HTMLDivElement\r\n                }}\r\n                className={cn(\"relative bg-muted py-1 px-1 rounded-[7px] flex\", className)}\r\n                {...props}\r\n              >\r\n                <motion.div\r\n                  className=\"absolute rounded-[6px] bg-background shadow-sm border-none\"\r\n                  style={{\r\n                    willChange: \"left, width\",\r\n                    transitionProperty: \"left, width\",\r\n                    height: \"calc(100% - 8px)\",\r\n                    top: \"4px\",\r\n                  }}\r\n                  animate={activeStyle}\r\n                  transition={{\r\n                    stiffness: 10000,\r\n                    mass: 1,\r\n                  }}\r\n                  layout\r\n                />\r\n                {React.Children.map(children, (child, index) =>\r\n                  React.isValidElement(child)\r\n                    ? React.cloneElement(child as React.ReactElement<any>, {\r\n                      onClick: (e: React.MouseEvent) => {\r\n                        setActiveIndex(index)\r\n                        if ((child as React.ReactElement<any>).props.onClick) {\r\n                          ; (child as React.ReactElement<any>).props.onClick(e)\r\n                        }\r\n                      },\r\n                      ref: (el: HTMLButtonElement) => {\r\n                        if (el) tabRefs.current.set(index, el)\r\n                        const childRef = (child as any).ref\r\n                        if (childRef) {\r\n                          if (typeof childRef === \"function\") {\r\n                            childRef(el)\r\n                          } else {\r\n                            childRef.current = el\r\n                          }\r\n                        }\r\n                      },\r\n                    })\r\n                    : child,\r\n                )}\r\n              </TabsPrimitive.List>\r\n            )\r\n            })\r\n            TabsContainer.displayName = \"TabsContainer\"\r\n\r\n            const TabsTrigger = React.forwardRef<\r\n            React.ElementRef<typeof TabsPrimitive.Trigger>,\r\n            React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\r\n            >(({ className, ...props }, ref) => (\r\n            <TabsPrimitive.Trigger\r\n              ref={ref}\r\n              className={cn(\r\n                \"inline-flex items-center justify-center whitespace-nowrap rounded-[7px] px-3.5 py-1.5\",\r\n                \"text-sm font-medium transition-all\",\r\n                \"relative z-10\",\r\n                \"data-[state=active]:text-foreground data-[state=active]:font-semibold data-[state=inactive]:text-muted-foreground\",\r\n                \"hover:text-foreground\",\r\n                \"disabled:pointer-events-none disabled:opacity-50\",\r\n                \"transition-all duration-200 ease-in-out\",\r\n                className,\r\n              )}\r\n              {...props}\r\n            />\r\n            ))\r\n            TabsTrigger.displayName = TabsPrimitive.Trigger.displayName\r\n\r\n            const TabsContent = React.forwardRef<\r\n            React.ElementRef<typeof TabsPrimitive.Content>,\r\n            React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\r\n            >(({ className, ...props }, ref) => (\r\n            <TabsPrimitive.Content ref={ref} className={cn(\"relative overflow-hidden mt-3\", className)} {...props}>\r\n              <AnimatePresence mode=\"wait\">\r\n                <motion.div\r\n                  key={props.value}\r\n                  initial={{ opacity: 0, y: 10 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  exit={{ opacity: 0, y: -10 }}\r\n                  transition={{ duration: 0.3, ease: \"easeOut\" }}\r\n                >\r\n                  {props.children}\r\n                </motion.div>\r\n              </AnimatePresence>\r\n            </TabsPrimitive.Content>\r\n            ))\r\n            TabsContent.displayName = TabsPrimitive.Content.displayName\r\n\r\n            export { Tabs, TabsContainer, TabsContent, TabsList, TabsTrigger }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <p className=\"text-base\">First import the tabs component in your file like this:</p>\n\n  <Pre>\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\n  </Pre>\n\n  <p className=\"text-base\">Then you can use the tabs component like this:</p>\n\n  <Pre>\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\r\n             <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\r\n                <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\r\n                   tab 1\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\r\n                   tab 2\r\n                </TabsTrigger>\r\n             </TabsList>\r\n             <div>\r\n                <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\r\n                <div>\r\n                   Content One\r\n                </div>\r\n                </TabsContent>\r\n                <TabsContent value=\"code\" className=\"rounded-xl\">\r\n                <div>Content two</div>\r\n                </TabsContent>\r\n             </div>\r\n          </Tabs>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/tooltip",
    "title": "Tooltip",
    "description": "A tooltip is a small pop-up box that appears when a user hovers over an element, providing additional information about that element.",
    "content": "<ComponentPreview name=\"tooltip-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      Second, you need to create a new folder called <MdxBadge>lib</MdxBadge> in you app directory and create a new file called <MdxBadge>utils.ts</MdxBadge> and paste the following code in it:\n\n      <Pre className=\"language-typescript\" folderPath=\"lib/utils.ts\">\n        {`import { type ClassValue, clsx } from \"clsx\";\r\n          import { twMerge } from \"tailwind-merge\";\r\n\r\n          export function cn(...inputs: ClassValue[]) {\r\n            return twMerge(clsx(inputs));\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Tooltip.tsx\">\n      Third, you need to create a new folder called <MdxBadge>components</MdxBadge> in you app directory and create a new file called <MdxBadge>tooltip.tsx</MdxBadge> and paste the following code in it:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/tooltip.tsx\">\n          {`\"use client\"\r\n\r\n            import * as React from \"react\"\r\n            import * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\r\n\r\n            import { cn } from \"@/lib/utils\"\r\n\r\n            interface TooltipProviderProps {\r\n              children: React.ReactNode;\r\n              delayDuration?: number;\r\n            }\r\n\r\n            const TooltipProvider: React.FC<TooltipProviderProps> = ({ children, delayDuration = 200 }) => (\r\n              <TooltipPrimitive.Provider delayDuration={delayDuration}>\r\n                  {children}\r\n              </TooltipPrimitive.Provider>\r\n            )\r\n\r\n            const Tooltip = TooltipPrimitive.Root\r\n\r\n            const TooltipTrigger = TooltipPrimitive.Trigger\r\n\r\n            const TooltipContent = React.forwardRef<\r\n              React.ElementRef<typeof TooltipPrimitive.Content>,\r\n              React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> & { side?: \"top\" | \"right\" | \"bottom\" | \"left\" }\r\n            >(({ className, side = \"top\", sideOffset = 4, ...props }, ref) => (\r\n              <TooltipPrimitive.Portal>\r\n                  <TooltipPrimitive.Content\r\n                      ref={ref}\r\n                      side={side}\r\n                      sideOffset={sideOffset}\r\n                      className={cn(\r\n                          \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\r\n                          className\r\n                      )}\r\n                      {...props}\r\n                  />\r\n              </TooltipPrimitive.Portal>\r\n            ))\r\n            TooltipContent.displayName = TooltipPrimitive.Content.displayName\r\n\r\n            export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"space-y-6\">\n  <Pre>\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\n  </Pre>\n\n  <Pre>\n    {`<TooltipProvider>\r\n        <Tooltip>\r\n            <TooltipTrigger asChild>Hover</TooltipTrigger>\r\n                <TooltipContent >\r\n                    <p>Default Tooltip</p>\r\n                </TooltipContent>\r\n            </Tooltip>\r\n        </TooltipProvider>\r\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Top Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\n\n### Right Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\n\n### Bottom Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\n\n### Left Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\n\n### Tooltip with custom delay duration\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />\n"
  },
  {
    "slug": "/installation",
    "title": "Installation",
    "description": "Your gateway to mastering modern software development.",
    "content": "to use our component you should using [next.js](https://nextjs.org/)\n\n## System Requirements\n\n* [Node.js 18.18](https://nodejs.org/) or later.\n* macOS, Windows (including WSL), and Linux are supported.\n\n<div className=\"not-prose px-4\">\n  <Note>If Your using windows recommended to use WSL with windows to have all the features in linux <br /> but if you don't have don't worry windows s also great choice</Note>\n\n  <Step>\n    <StepItem title=\"Step 1: Create Your Next.js Project\">\n      Start by running the following command in your terminal to set up a new Next.js project:\\\n      To verify installation, run:\n\n      <Pre>\n        {`npx create-next-app@latest`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Step 2: Configure Your Project\">\n      During the setup, you'll be prompted to configure your project. Below is an example of the default prompts and options you'll encounter:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes `}\n      </Pre>\n\n      <Note type=\"note\" title=\"Important Note\">\n        The above configurations are entirely customizable. If you choose to enable **TypeScript**, **ESLint**, **Tailwind CSS**, the **src** directory, or the **App Router**, the necessary setup files and configurations will be automatically added to your project.\n      </Note>\n    </StepItem>\n\n    <StepItem title=\"Step 3: React 19 & Next.js 15 Configurations (Optional)\">\n      If you're using **React 19** and **Next.js 15**, you may encounter an additional configuration option for Turbopack:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes  \r\n          Would you like to use Turbopack for \\`next dev\\`? » No / Yes`}\n      </Pre>\n\n      <Note variant=\"info\" closable>\n        **Turbopack** is a high-performance bundler and dev server for Next.js. Enabling this option ensures faster builds and an improved development experience.\n      </Note>\n    </StepItem>\n  </Step>\n</div>\n\n## Next Steps\n\nOnce your project is created, you’re ready to explore and integrate Alpha’s modern components and utilities to bring your vision to life. Start building your next-generation application today with Alpha! 🚀\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "A set of beautifully-designed, accessible, and customizable components to help you build your component library. Open Source.",
    "content": "**This is not a component library. It is how you build your component library.**\n\nYou know how most traditional component libraries work: you install a package from NPM, import the components, and use them in your app.\n\nRoach works well until you need to customize a component to fit your design system or require one that isn’t included in the library. Often, you end up wrapping library components, writing workarounds to override styles, or mixing components from different libraries with incompatible APIs.\n\nThis is what **alphabyte-labs** aims to solve. It is built around the following principles:\n\n* **Open code** – The leading React framework for production-grade applications.\n* **Composition** – Combine Markdown and JSX for dynamic, interactive content.\n* **Distribution** – The go-to library for building seamless user interfaces.\n* **Beautiful Defaults** – Ensure reliability and scalability with this powerful JavaScript superset.\n\n## Welcome to Alphabyte-labs\n\nAt alphabyte, we believe that knowledge is the foundation of innovation. Our documentation hub is your ultimate resource for mastering software development, offering guides, tutorials, and insights designed to equip you with the tools to build impactful solutions.\n\n### What You’ll Discover\n\nWe Will Discover A Collection of components that real world components you can use it in you next.js application or any react.js application\n"
  }
]