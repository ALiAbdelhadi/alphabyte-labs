[
  {
    "slug": "/components/accordion",
    "title": "Accordion",
    "description": "The Accordion component is a container that can hold multiple items, each of which can be expanded or collapsed to show or hide its content.",
    "content": "<ComponentPreview name=\"accordion-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add accordion`,\r\n            npm: `npx alphabyte-cli@latest add accordion`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add accordion`,\r\n            bun: `bunx alphabyte-cli@latest add accordion`,\r\n            deno: `deno run -A npm:alphabyte-cli add accordion`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Accordion Component\">\n          <ComponentSource name=\"accordion-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import {\r\n      Accordion,\r\n      AccordionContent,\r\n      AccordionItem,\r\n      AccordionTrigger,\r\n      } from \"@/components/ui/accordion\"`}\n  </Pre>\n\n  <Pre className=\"language-typescript\">\n    {`<Accordion type=\"single\" collapsible>\r\n      <AccordionItem value=\"item-1\">\r\n        <AccordionTrigger>Section Title</AccordionTrigger>\r\n        <AccordionContent>\r\n          Content goes here\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n      </Accordion>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Accordion\r\ndescription: The Accordion component is a container that can hold multiple items, each of which can be expanded or collapsed to show or hide its content.\r\nkeywords: [accordion, component, collapsible, expandable]\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/accordion\r\n  api: https://www.radix-ui.com/docs/primitives/components/accordion#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"accordion-demo\" />\r\n\r\n## Installation\r\n\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add accordion`,\r\n      npm: `npx alphabyte-cli@latest add accordion`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add accordion`,\r\n      bun: `bunx alphabyte-cli@latest add accordion`,\r\n      deno: `deno run -A npm:alphabyte-cli add accordion`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Accordion Component\">\r\n      <ComponentSource name=\"accordion-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre className=\"language-typescript\">\r\n    {`import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\"`}\r\n  </Pre>\r\n  <Pre className=\"language-typescript\">\r\n    {`<Accordion type=\"single\" collapsible>\r\n  <AccordionItem value=\"item-1\">\r\n    <AccordionTrigger>Section Title</AccordionTrigger>\r\n    <AccordionContent>\r\n      Content goes here\r\n    </AccordionContent>\r\n  </AccordionItem>\r\n</Accordion>`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/alert-dialog",
    "title": "Alert Dialog",
    "description": "A versatile Alert dialog component for critical user interactions.",
    "content": "<ComponentPreview name=\"alert-dialog-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add alert-dialog`,\r\n            npm: `npx alphabyte-cli@latest add alert-dialog`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add alert-dialog`,\r\n            bun: `bunx alphabyte-cli@latest add alert-dialog`,\r\n            deno: `deno run -A npm:alphabyte-cli add alert-dialog`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Alert dialog Component\">\n          <ComponentSource name=\"alert-dialog-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      AlertDialog,\r\n      AlertDialogAction,\r\n      AlertDialogCancel,\r\n      AlertDialogContent,\r\n      AlertDialogDescription,\r\n      AlertDialogFooter,\r\n      AlertDialogHeader,\r\n      AlertDialogTitle,\r\n      AlertDialogTrigger,\r\n      } from \"@/components/ui/alert-dialog\"\r\n      import { Button } from \"@/components/ui/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function AlertDialogDemo() {\r\n      return (\r\n        <AlertDialog>\r\n          <AlertDialogTrigger asChild>\r\n            <Button variant=\"outline\">Open Dialog</Button>\r\n          </AlertDialogTrigger>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader>\r\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n              <AlertDialogDescription>\r\n                This action cannot be undone. The data will be permanently deleted\r\n                from the servers.\r\n              </AlertDialogDescription>\r\n            </AlertDialogHeader>\r\n            <AlertDialogFooter>\r\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n              <AlertDialogAction>Continue</AlertDialogAction>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialog>\r\n      )\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\n",
    "raw": "---\r\ntitle: \"Alert Dialog\"\r\ndescription: \"A versatile Alert dialog component for critical user interactions.\"\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/alert-dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/alert-dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"alert-dialog-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add alert-dialog`,\r\n      npm: `npx alphabyte-cli@latest add alert-dialog`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add alert-dialog`,\r\n      bun: `bunx alphabyte-cli@latest add alert-dialog`,\r\n      deno: `deno run -A npm:alphabyte-cli add alert-dialog`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Alert dialog Component\">\r\n      <ComponentSource name=\"alert-dialog-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>\r\n    {`import {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\"\r\nimport { Button } from \"@/components/ui/button\"`}\r\n  </Pre>\r\n  <Pre>\r\n    {`export default function AlertDialogDemo() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant=\"outline\">Open Dialog</Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n          <AlertDialogDescription>\r\n            This action cannot be undone. The data will be permanently deleted\r\n            from the servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>Continue</AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  )\r\n}`}\r\n  </Pre>\r\n</div>\r\n## Examples\r\n\r\n### Destructive\r\n\r\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\r\n"
  },
  {
    "slug": "/components/badge",
    "title": "Badge",
    "description": "A badge is a small, often circular, visual element that provides information or context about an item. It can be used to indicate status, notifications, or other relevant details.",
    "content": "<ComponentPreview name=\"badge-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add badge`,\r\n            npm: `npx alphabyte-cli@latest add badge`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add badge`,\r\n            bun: `bunx alphabyte-cli@latest add badge`,\r\n            deno: `deno run -A npm:alphabyte-cli add badge`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Badge Component\">\n          <ComponentSource name=\"badge-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/ui/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Badge variant=\"outline\">Badge</Badge>`}\n  </Pre>\n</div>\n\n## Tips\n\nTip: You can use <MdxBadge>badgeVariants</MdxBadge> to create your own\r\nbadge component with different styles.\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/ui/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"badge-demo\" />\n\n### Outline\n\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\n\n### Destructive\n\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\n\n### Success\n\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\n\n### Warning\n\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\n\n### Info\n\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\n\n### Removable\n\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\n\n### With icon\n\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\n",
    "raw": "---\r\ntitle: Badge\r\ndescription: A badge is a small, often circular, visual element that provides information or context about an item. It can be used to indicate status, notifications, or other relevant details.\r\n---\r\n\r\n<ComponentPreview name=\"badge-demo\" />\r\n\r\n## Installation\r\n\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add badge`,\r\n      npm: `npx alphabyte-cli@latest add badge`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add badge`,\r\n      bun: `bunx alphabyte-cli@latest add badge`,\r\n      deno: `deno run -A npm:alphabyte-cli add badge`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge `}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Badge Component\">\r\n      <ComponentSource name=\"badge-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Badge } from '@/components/ui/badge'`}</Pre>\r\n  <Pre>{`<Badge variant=\"outline\">Badge</Badge>`}</Pre>\r\n</div>\r\n## Tips \r\nTip: You can use <MdxBadge>badgeVariants</MdxBadge> to create your own\r\nbadge component with different styles.\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Badge } from '@/components/ui/badge'`}</Pre>\r\n  <Pre>{`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}</Pre>\r\n</div>\r\n## Examples \r\n### Default\r\n<ComponentPreview name=\"badge-demo\" />\r\n### Outline\r\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\r\n### Destructive\r\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\r\n### Success\r\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\r\n### Warning\r\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\r\n### Info\r\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\r\n### Removable\r\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\r\n### With icon\r\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\r\n"
  },
  {
    "slug": "/components/breadcrumb",
    "title": "breadcrumb",
    "description": "breadcrumb",
    "content": "<ComponentPreview name=\"breadcrumb-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add breadcrumb`,\r\n            npm: `npx alphabyte-cli@latest add breadcrumb`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add breadcrumb`,\r\n            bun: `bunx alphabyte-cli@latest add breadcrumb`,\r\n            deno: `deno run -A npm:alphabyte-cli add breadcrumb`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Breadcrumb Component\">\n          <ComponentSource name=\"breadcrumb-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Breadcrumb,\r\n        BreadcrumbItem,\r\n        BreadcrumbLink,\r\n        BreadcrumbList,\r\n        BreadcrumbPage,\r\n        BreadcrumbSeparator,\r\n      } from \"@/components/ui/breadcrumb\"`}\n  </Pre>\n\n  <Pre>\n    {`<Breadcrumb>\r\n        <BreadcrumbList>\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">\r\n                    <HiHome className=\"h-4 w-4\" />\r\n                </BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbPage>Current Page</BreadcrumbPage>\r\n            </BreadcrumbItem>\r\n        </BreadcrumbList>\r\n      </Breadcrumb>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Custom Separator\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\n\n### Ellipsis\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\n\nDropdown You can compose <MdxBadge>\\<breadcrumb-item /></MdxBadge> with a <MdxBadge>\\<dropdown-menu /></MdxBadge> component to create a dropdown in the breadcrumb.\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\n\n### Icons\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\n\n### Responsive\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\n",
    "raw": "---\r\ntitle: breadcrumb\r\ndescription: breadcrumb\r\n---\r\n\r\n<ComponentPreview name=\"breadcrumb-demo\" />\r\n## Installation\r\n\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add breadcrumb`,\r\n      npm: `npx alphabyte-cli@latest add breadcrumb`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add breadcrumb`,\r\n      bun: `bunx alphabyte-cli@latest add breadcrumb`,\r\n      deno: `deno run -A npm:alphabyte-cli add breadcrumb`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge `}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Breadcrumb Component\">\r\n      <ComponentSource name=\"breadcrumb-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    BreadcrumbLink,\r\n    BreadcrumbList,\r\n    BreadcrumbPage,\r\n    BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\"`}</Pre>\r\n  <Pre>{`<Breadcrumb>\r\n    <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n            <BreadcrumbLink href=\"#\">\r\n                <HiHome className=\"h-4 w-4\" />\r\n            </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n            <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n            <BreadcrumbPage>Current Page</BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n    </BreadcrumbList>\r\n</Breadcrumb>`}</Pre>\r\n</div>\r\n## Examples \r\n### Custom Separator\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\r\n### Ellipsis\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\r\nDropdown You can compose <MdxBadge>\\<breadcrumb-item /\\></MdxBadge> with a <MdxBadge>\\<dropdown-menu /\\></MdxBadge> component to create a dropdown in the breadcrumb.\r\n\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\r\n### Icons\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\r\n### Responsive\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\r\n"
  },
  {
    "slug": "/components/button",
    "title": "Button",
    "description": "A button that displays a list of options when clicked.",
    "content": "<ComponentPreview name=\"button\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add button`,\r\n            npm: `npx alphabyte-cli@latest add button`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add button`,\r\n            bun: `bunx alphabyte-cli@latest add button`,\r\n            deno: `deno run -A npm:alphabyte-cli add button`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Button Component\">\n          <ComponentSource name=\"button\" />\n        </StepItem>\n\n        <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Button } from \"@/components/ui/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function ButtonDemo() {\r\n        return <Button variant={\"default\"}>Getting Started</Button>\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Primary\n\n<ComponentPreview name=\"button\" variant=\"primary\" />\n\n### Secondary\n\n<ComponentPreview name=\"button\" variant=\"secondary\" />\n\n### Destructive\n\n<ComponentPreview name=\"button\" variant=\"destructive\" />\n\n### Ghost\n\n<ComponentPreview name=\"button\" variant=\"ghost\" />\n\n### Link\n\n<ComponentPreview name=\"button\" variant=\"link\" />\n\n### Outline\n\n<ComponentPreview name=\"button\" variant=\"outline\" />\n\n### Neural\n\n<ComponentPreview name=\"button\" variant=\"neural\" />\n\n### Loading\n\n<ComponentPreview name=\"button\" variant=\"loading\" />\n\n### Icon\n\n<ComponentPreview name=\"button\" variant=\"icon\" />\n\n### Animation bounce\n\n<ComponentPreview name=\"button\" variant=\"bounce\" />\n\n### Animation pulse\n\n<ComponentPreview name=\"button\" variant=\"pulse\" />\n",
    "raw": "---\r\ntitle: Button\r\ndescription: A button that displays a list of options when clicked.\r\n---\r\n\r\n<ComponentPreview name=\"button\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add button`,\r\n      npm: `npx alphabyte-cli@latest add button`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add button`,\r\n      bun: `bunx alphabyte-cli@latest add button`,\r\n      deno: `deno run -A npm:alphabyte-cli add button`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Button Component\">\r\n      <ComponentSource name=\"button\" />\r\n    </StepItem>\r\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Button } from \"@/components/ui/button\"`}</Pre>\r\n  <Pre>\r\n    {`export default function ButtonDemo() {\r\n    return <Button variant={\"default\"}>Getting Started</Button>\r\n}`}\r\n  </Pre>\r\n</div>\r\n## Examples \r\n\r\n### Primary\r\n<ComponentPreview name=\"button\" variant=\"primary\" />\r\n\r\n### Secondary\r\n\r\n<ComponentPreview name=\"button\" variant=\"secondary\" />\r\n### Destructive\r\n\r\n<ComponentPreview name=\"button\" variant=\"destructive\" />\r\n### Ghost\r\n\r\n<ComponentPreview name=\"button\" variant=\"ghost\" />\r\n### Link\r\n\r\n<ComponentPreview name=\"button\" variant=\"link\" />\r\n### Outline\r\n\r\n<ComponentPreview name=\"button\" variant=\"outline\" />\r\n### Neural\r\n\r\n<ComponentPreview name=\"button\" variant=\"neural\" />\r\n### Loading\r\n\r\n<ComponentPreview name=\"button\" variant=\"loading\" />\r\n### Icon\r\n\r\n<ComponentPreview name=\"button\" variant=\"icon\" />\r\n\r\n### Animation bounce\r\n\r\n<ComponentPreview name=\"button\" variant=\"bounce\" />\r\n### Animation pulse\r\n\r\n<ComponentPreview name=\"button\" variant=\"pulse\" />\r\n"
  },
  {
    "slug": "/components/calendar",
    "title": "Calendar",
    "description": "Calendar component",
    "content": "<ComponentPreview name=\"calendar-demo\" />\n\n## About The\n\n<MdxBadge>Calendar</MdxBadge> component is built on top of\r\n[ReactDayPicker](https://daypicker.dev/).\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add calendar`,\r\n            npm: `npx alphabyte-cli@latest add calendar`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add calendar`,\r\n            bun: `bunx alphabyte-cli@latest add calendar`,\r\n            deno: `deno run -A npm:alphabyte-cli add calendar`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Calendar Component\">\n          <ComponentSource name=\"calendar-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Calendar } from \"@/components/ui/calendar\"`}\n  </Pre>\n\n  <Pre>\n    {`const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n\r\n      return (\r\n      <Calendar\r\n        mode=\"single\"\r\n        selected={date}\r\n        onSelect={setDate}\r\n        className=\"rounded-md border\"\r\n      />\r\n      )`}\n  </Pre>\n</div>\n\n## Examples\n\n<ComponentPreview name=\"date-picker-demo\" />\n",
    "raw": "---\r\ntitle: Calendar\r\ndescription: Calendar component\r\nlinks:\r\n  doc: https://react-day-picker.js.org\r\n---\r\n\r\n<ComponentPreview name=\"calendar-demo\" />\r\n\r\n## About The\r\n\r\n<MdxBadge>Calendar</MdxBadge> component is built on top of\r\n[ReactDayPicker](https://daypicker.dev/). \r\n## Installation\r\n<CliCodeTabs>\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add calendar`,\r\n      npm: `npx alphabyte-cli@latest add calendar`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add calendar`,\r\n      bun: `bunx alphabyte-cli@latest add calendar`,\r\n      deno: `deno run -A npm:alphabyte-cli add calendar`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Calendar Component\">\r\n      <ComponentSource name=\"calendar-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Calendar } from \"@/components/ui/calendar\"`}</Pre>\r\n  <Pre>{`const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n \r\nreturn (\r\n  <Calendar\r\n    mode=\"single\"\r\n    selected={date}\r\n    onSelect={setDate}\r\n    className=\"rounded-md border\"\r\n  />\r\n)`}</Pre>\r\n</div>\r\n## Examples\r\n<ComponentPreview name=\"date-picker-demo\" />\r\n"
  },
  {
    "slug": "/components/collapsible",
    "title": "Collapsible",
    "description": "Collapsible component for hiding and showing content.",
    "content": "<ComponentPreview name=\"collapsible-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add collapsible`,\r\n            npm: `npx alphabyte-cli@latest add collapsible`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add collapsible`,\r\n            bun: `bunx alphabyte-cli@latest add collapsible`,\r\n            deno: `deno run -A npm:alphabyte-cli add collapsible`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Collapsible Component\">\n          <ComponentSource name=\"collapsible-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Collapsible,\r\n        CollapsibleContent,\r\n        CollapsibleTrigger,\r\n      } from \"@/components/ui/collapsible\"`}\n  </Pre>\n\n  <Pre>\n    {`<Collapsible>\r\n      <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\r\n      <CollapsibleContent>\r\n        Yes. Free to use for personal and commercial projects. No attribution\r\n        required.\r\n      </CollapsibleContent>\r\n      </Collapsible>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Collapsible\r\ndescription: Collapsible component for hiding and showing content.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/collapsible\r\n  api: https://www.radix-ui.com/docs/primitives/components/collapsible#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"collapsible-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add collapsible`,\r\n      npm: `npx alphabyte-cli@latest add collapsible`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add collapsible`,\r\n      bun: `bunx alphabyte-cli@latest add collapsible`,\r\n      deno: `deno run -A npm:alphabyte-cli add collapsible`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Collapsible Component\">\r\n      <ComponentSource name=\"collapsible-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import {\r\n    Collapsible,\r\n    CollapsibleContent,\r\n    CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\"`}\r\n</Pre>\r\n\r\n<Pre>{`<Collapsible>\r\n  <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\r\n  <CollapsibleContent>\r\n    Yes. Free to use for personal and commercial projects. No attribution\r\n    required.\r\n  </CollapsibleContent>\r\n</Collapsible>`}</Pre>\r\n\r\n</div>\r\n"
  },
  {
    "slug": "/components",
    "title": "Components",
    "description": "components are reusable pieces of UI that can be used across different parts of the application.",
    "content": "<ComponentsList />\n",
    "raw": "---\r\ntitle: \"Components\"\r\ndescription: \"components are reusable pieces of UI that can be used across different parts of the application.\"\r\n---\r\n\r\n<ComponentsList/>"
  },
  {
    "slug": "/components/data-picker",
    "title": "Data Picker",
    "description": "Data Picker component documentation.",
    "content": "<ComponentPreview name=\"date-picker-demo\" />\n\n## Installation\n\nThe Date Picker is built using a composition of  <MdxBadge>\\<Popover /></MdxBadge> component  and the  <MdxBadge>\\<Calendar /></MdxBadge> component.\n\nSee installation instructions for the [Popover](https://alphabyte-labs.vercel.app/docs/components/popover) and the [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) components.\r\nfor quick installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add date-picker`,\r\n            npm: `npx alphabyte-cli@latest add date-picker`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add date-picker`,\r\n            bun: `bunx alphabyte-cli@latest add date-picker`,\r\n            deno: `deno run -A npm:alphabyte-cli add date-picker`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose\">\n  <Pre>\n    {`\"use client\"\r\n\r\n      import * as React from \"react\"\r\n      import { format } from \"date-fns\"\r\n      import { CalendarIcon } from \"lucide-react\"\r\n\r\n      import { cn } from \"@/lib/utils\"\r\n      import { Button } from \"@/components/ui/button\"\r\n      import { Calendar } from \"@/components/ui/calendar\"\r\n      import {\r\n      Popover,\r\n      PopoverContent,\r\n      PopoverTrigger,\r\n      } from \"@/components/ui/popover\"\r\n\r\n      export default function DatePickerDemo() {\r\n      const [date, setDate] = React.useState<Date>()\r\n\r\n      return (\r\n\r\n        <Popover>\r\n          <PopoverTrigger asChild >\r\n            <Button\r\n              variant={\"outline\"}\r\n              className={\r\n                cn(\r\n                  \"w-[240px] justify-start text-left font-normal\",\r\n                  !date && \"text-muted-foreground\"\r\n                )\r\n              } >\r\n              <CalendarIcon />\r\n              {date ? format(date, \"PPP\") : <span>Pick a date </span>}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-auto p-0\" align=\"start\" >\r\n            <Calendar\r\n              mode=\"single\"\r\n              selected={date}\r\n              onSelect={setDate}\r\n              initialFocus\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n      )\r\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Date Picker Range\n\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\n",
    "raw": "---\r\ntitle: Data Picker\r\ndescription: Data Picker component documentation.\r\n---\r\n\r\n<ComponentPreview name=\"date-picker-demo\" />\r\n## Installation\r\n\r\n\r\nThe Date Picker is built using a composition of  <MdxBadge>\\<Popover \\/></MdxBadge> component  and the  <MdxBadge>\\<Calendar \\/></MdxBadge> component.\r\n\r\nSee installation instructions for the [Popover](https://alphabyte-labs.vercel.app/docs/components/popover) and the [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) components.\r\nfor quick installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add date-picker`,\r\n      npm: `npx alphabyte-cli@latest add date-picker`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add date-picker`,\r\n      bun: `bunx alphabyte-cli@latest add date-picker`,\r\n      deno: `deno run -A npm:alphabyte-cli add date-picker`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose\">\r\n<Pre>{`\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format } from \"date-fns\"\r\nimport { CalendarIcon } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\n\r\nexport default function DatePickerDemo() {\r\n  const [date, setDate] = React.useState<Date>()\r\n\r\n  return (\r\n\r\n    <Popover>\r\n      <PopoverTrigger asChild >\r\n        <Button\r\n          variant={\"outline\"}\r\n          className={\r\n            cn(\r\n              \"w-[240px] justify-start text-left font-normal\",\r\n              !date && \"text-muted-foreground\"\r\n            )\r\n          } >\r\n          <CalendarIcon />\r\n          {date ? format(date, \"PPP\") : <span>Pick a date </span>}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto p-0\" align=\"start\" >\r\n        <Calendar\r\n          mode=\"single\"\r\n          selected={date}\r\n          onSelect={setDate}\r\n          initialFocus\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}`}</Pre>\r\n\r\n</div>\r\n## Examples\r\n### Date Picker Range\r\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\r\n"
  },
  {
    "slug": "/components/diagrams",
    "title": "Diagrams",
    "description": "Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.",
    "content": "<ComponentPreview name=\"diagram-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add diagrams`,\r\n            npm: `npx alphabyte-cli@latest add diagrams`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add diagrams`,\r\n            bun: `bunx alphabyte-cli@latest add diagrams`,\r\n            deno: `deno run -A npm:alphabyte-cli add diagrams`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"install dependencies\">\n          First, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\n\n          <Pre className=\"language-bash\">\n            {`npm i install clsx tailwind-merge mermaid`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Here you go, you can start creating diagrams like a designer\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import Mermaid from \"@/components/ui/mermaid\"`}\n  </Pre>\n\n  <Pre>\n    {`const DiagramsDemo = () => {\r\n      return (\r\n        <Mermaid\r\n          chart={\\`graph TD;\r\n        Start --> Task1;\r\n        Task1 --> Task2;\r\n        Task2 --> End;\\`}\r\n        />\r\n      )\r\n      }\r\n\r\n      export default DiagramsDemo`}\n  </Pre>\n</div>\n\n## Example\n\n### Flowchart\n\n<ComponentPreview name=\"diagram-demo\" />\n\n### Decision Tree\n\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\n\n### Entity-Relationship Diagram\n\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\n\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\n",
    "raw": "---\r\ntitle: Diagrams\r\ndescription: Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.\r\n---\r\n\r\n<ComponentPreview name=\"diagram-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add diagrams`,\r\n      npm: `npx alphabyte-cli@latest add diagrams`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add diagrams`,\r\n      bun: `bunx alphabyte-cli@latest add diagrams`,\r\n      deno: `deno run -A npm:alphabyte-cli add diagrams`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"install dependencies\">\r\nFirst, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\r\n<Pre className=\"language-bash\">\r\n{`npm i install clsx tailwind-merge mermaid`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"Create utils.ts\"> \r\n  <ComponentUtilsText/>\r\n  <ComponentUtils/>\r\n  </StepItem>\r\n<StepItem title=\"Here you go, you can start creating diagrams like a designer\"/>\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import Mermaid from \"@/components/ui/mermaid\"`}</Pre>\r\n<Pre>{`const DiagramsDemo = () => {\r\n  return (\r\n    <Mermaid\r\n      chart={\\`graph TD;\r\n    Start --> Task1;\r\n    Task1 --> Task2;\r\n    Task2 --> End;\\`}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DiagramsDemo`}</Pre>\r\n</div>\r\n## Example\r\n\r\n### Flowchart\r\n\r\n<ComponentPreview name=\"diagram-demo\" />\r\n\r\n### Decision Tree\r\n\r\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\r\n\r\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\r\n\r\n### Entity-Relationship Diagram\r\n\r\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\r\n\r\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\r\n\r\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\r\n"
  },
  {
    "slug": "/components/dialog",
    "title": "Dialog",
    "description": "A dialog component",
    "content": "<ComponentPreview name=\"dialog-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add dialog`,\r\n            npm: `npx alphabyte-cli@latest add dialog`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add dialog`,\r\n            bun: `bunx alphabyte-cli@latest add dialog`,\r\n            deno: `deno run -A npm:alphabyte-cli add dialog`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you need to install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install @radix-ui/react-dialog clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n\n          <p className=\"text-gray-600 mt-2\">\n            ⚠️ If you already have a <code>utils.ts</code> file in your project, you can skip this step.\n          </p>\n        </StepItem>\n\n        <StepItem title=\"Create Dialog Component\">\n          <ComponentSource name=\"dialog-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<Pre className=\"language-tsx\">\n  {`import {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogDescription,\r\n    DialogHeader,\r\n    DialogTitle,\r\n    DialogTrigger,\r\n    } from \"@/components/ui/dialog\"\r\n\r\n    export default function Example() {\r\n    return (\r\n      <Dialog>\r\n        <DialogTrigger>Open</DialogTrigger>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>Are you absolutely sure?</DialogTitle>\r\n            <DialogDescription>\r\n              This action cannot be undone. This will permanently delete your account\r\n              and remove your data from our servers.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n    }`}\n</Pre>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\n\n### Custom Position\n\n#### Top\n\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\n\n#### Bottom\n\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\n\n### Form Example\n\n<ComponentPreview name=\"dialog-demo\" variant=\"form\" />\n",
    "raw": "---\r\ntitle: \"Dialog\"\r\ndescription: \"A dialog component\"\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"dialog-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add dialog`,\r\n      npm: `npx alphabyte-cli@latest add dialog`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add dialog`,\r\n      bun: `bunx alphabyte-cli@latest add dialog`,\r\n      deno: `deno run -A npm:alphabyte-cli add dialog`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, you need to install the required dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install @radix-ui/react-dialog clsx tailwind-merge`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n      <p className=\"text-gray-600 mt-2\">\r\n        ⚠️ If you already have a <code>utils.ts</code> file in your project, you can skip this step.\r\n      </p>\r\n    </StepItem>\r\n    <StepItem title=\"Create Dialog Component\">\r\n      <ComponentSource name=\"dialog-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<Pre className=\"language-tsx\">\r\n{`import {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\n\r\nexport default function Example() {\r\n  return (\r\n    <Dialog>\r\n      <DialogTrigger>Open</DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>Are you absolutely sure?</DialogTitle>\r\n          <DialogDescription>\r\n            This action cannot be undone. This will permanently delete your account\r\n            and remove your data from our servers.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}`}\r\n</Pre>\r\n\r\n## Examples\r\n\r\n### Destructive\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\r\n\r\n### Custom Position\r\n\r\n#### Top\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\r\n\r\n#### Bottom\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\r\n\r\n### Form Example\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"form\" />\r\n"
  },
  {
    "slug": "/components/drawer",
    "title": "Drawer",
    "description": "Drawer component",
    "content": "<ComponentPreview name=\"drawer-demo\" />\n\n## About\n\n<MdxBadge>Drawer</MdxBadge> is built on top of\r\n[Vaul](https://github.com/emilkowalski/vaul) by\r\n[emilkowalski\\_](https://x.com/emilkowalski_).\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add drawer`,\r\n            npm: `npx alphabyte-cli@latest add drawer`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add drawer`,\r\n            bun: `bunx alphabyte-cli@latest add drawer`,\r\n            deno: `deno run -A npm:alphabyte-cli add drawer`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you need to install dependencies:\n\n          <Pre>\n            {`npm install clsx tailwind-merge vaul`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Drawer Component\">\n          <ComponentSource name=\"drawer-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n<div className=\"not-prose my-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Edit layout.tsx for background scaling\">\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"}\r\n      <MdxBadge>vaul-drawer-wrapper</MdxBadge> to support scaling:\n\n      <Pre highlightLines={[4]}>\n        {`<html lang=\"en\" suppressHydrationWarning>\r\n          <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\r\n              {/* Create a div and passe it vaul-drawer-wrapper like this way */}\r\n              <div vaul-drawer-wrapper=\"\">\r\n                 <div className=\"relative flex min-h-svh flex-col bg-background\">\r\n                    {children}\r\n                 </div>\r\n              </div>\r\n           </body>\r\n          </html>`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      Drawer,\r\n      DrawerClose,\r\n      DrawerContent,\r\n      DrawerDescription,\r\n      DrawerFooter,\r\n      DrawerHeader,\r\n      DrawerTitle,\r\n      DrawerTrigger,\r\n      } from \"@/components/ui/drawer\"\r\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Drawer>\r\n      <DrawerTrigger>Open</DrawerTrigger>\r\n      <DrawerContent>\r\n        <DrawerHeader>\r\n          <DrawerTitle>Are you absolutely sure?</DrawerTitle>\r\n          <DrawerDescription>This action cannot be undone.</DrawerDescription>\r\n        </DrawerHeader>\r\n        <DrawerFooter>\r\n          <Button>Submit</Button>\r\n          <DrawerClose>\r\n            <Button variant=\"outline\">Cancel</Button>\r\n          </DrawerClose>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n      </Drawer>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Nested Drawer\n\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\n",
    "raw": "---\r\ntitle: Drawer\r\ndescription: Drawer component\r\nlinks:\r\n  doc: https://vaul.emilkowal.ski/getting-started\r\n---\r\n\r\n<ComponentPreview name=\"drawer-demo\" />\r\n## About\r\n<MdxBadge>Drawer</MdxBadge> is built on top of\r\n[Vaul](https://github.com/emilkowalski/vaul) by\r\n[emilkowalski_](https://x.com/emilkowalski_). \r\n\r\n## Installation\r\n\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add drawer`,\r\n      npm: `npx alphabyte-cli@latest add drawer`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add drawer`,\r\n      bun: `bunx alphabyte-cli@latest add drawer`,\r\n      deno: `deno run -A npm:alphabyte-cli add drawer`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, you need to install dependencies:\r\n      <Pre>{`npm install clsx tailwind-merge vaul`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Drawer Component\">\r\n      <ComponentSource name=\"drawer-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n<div className='not-prose my-4 md:px-0'>\r\n<Step>\r\n    <StepItem title=\"Edit layout.tsx for background scaling\">\r\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"}\r\n      <MdxBadge>vaul-drawer-wrapper</MdxBadge> to support scaling:\r\n      <Pre highlightLines={[4]}>{`<html lang=\"en\" suppressHydrationWarning>\r\n  <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\r\n      {/* Create a div and passe it vaul-drawer-wrapper like this way */}\r\n      <div vaul-drawer-wrapper=\"\">\r\n         <div className=\"relative flex min-h-svh flex-col bg-background\">\r\n            {children}\r\n         </div>\r\n      </div>\r\n   </body>\r\n</html>`}</Pre>\r\n    </StepItem>\r\n</Step>\r\n</div>\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>\r\n    {`import {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\"\r\n`}\r\n  </Pre>\r\n  <Pre>\r\n    {`<Drawer>\r\n  <DrawerTrigger>Open</DrawerTrigger>\r\n  <DrawerContent>\r\n    <DrawerHeader>\r\n      <DrawerTitle>Are you absolutely sure?</DrawerTitle>\r\n      <DrawerDescription>This action cannot be undone.</DrawerDescription>\r\n    </DrawerHeader>\r\n    <DrawerFooter>\r\n      <Button>Submit</Button>\r\n      <DrawerClose>\r\n        <Button variant=\"outline\">Cancel</Button>\r\n      </DrawerClose>\r\n    </DrawerFooter>\r\n  </DrawerContent>\r\n</Drawer>`}\r\n  </Pre>\r\n</div>\r\n## Examples \r\n### Nested Drawer\r\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\r\n"
  },
  {
    "slug": "/components/dropdown-menu",
    "title": "Dropdown Menu",
    "description": "Dropdown menu component for displaying a list of items.",
    "content": "<ComponentPreview name=\"dropdown-menu-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add dropdown-menu`,\r\n            npm: `npx alphabyte-cli@latest add dropdown-menu`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add dropdown-menu`,\r\n            bun: `bunx alphabyte-cli@latest add dropdown-menu`,\r\n            deno: `deno run -A npm:alphabyte-cli add dropdown-menu`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Dropdown-menu Component\">\n          <ComponentSource name=\"dropdown-menu-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        DropdownMenu,\r\n        DropdownMenuContent,\r\n        DropdownMenuItem,\r\n        DropdownMenuLabel,\r\n        DropdownMenuSeparator,\r\n        DropdownMenuTrigger\r\n      } from '@/components/ui/dropdown-menu'`}\n  </Pre>\n\n  <Pre>\n    {`<DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\">Open Menu</Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent className=\"w-56\">\r\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n                <Edit className=\"mr-2 h-4 w-4\" />\r\n                <span>Edit Profile</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem>\r\n                <Download className=\"mr-2 h-4 w-4\" />\r\n                <span>Download</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem disabled>\r\n                <Share className=\"mr-2 h-4 w-4\" />\r\n                <span>Share (Disabled)</span>\r\n            </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Checkbox\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\n\n### Radio\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\n\n### Nested\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\n",
    "raw": "---\r\ntitle: Dropdown Menu\r\ndescription: Dropdown menu component for displaying a list of items.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dropdown-menu\r\n  api: https://www.radix-ui.com/docs/primitives/components/dropdown-menu#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"dropdown-menu-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add dropdown-menu`,\r\n      npm: `npx alphabyte-cli@latest add dropdown-menu`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add dropdown-menu`,\r\n      bun: `bunx alphabyte-cli@latest add dropdown-menu`,\r\n      deno: `deno run -A npm:alphabyte-cli add dropdown-menu`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Dropdown-menu Component\">\r\n      <ComponentSource name=\"dropdown-menu-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'`}</Pre>\r\n  <Pre>{`<DropdownMenu>\r\n    <DropdownMenuTrigger asChild>\r\n        <Button variant=\"outline\">Open Menu</Button>\r\n    </DropdownMenuTrigger>\r\n    <DropdownMenuContent className=\"w-56\">\r\n        <DropdownMenuLabel>My Account</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>\r\n            <Edit className=\"mr-2 h-4 w-4\" />\r\n            <span>Edit Profile</span>\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem>\r\n            <Download className=\"mr-2 h-4 w-4\" />\r\n            <span>Download</span>\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem disabled>\r\n            <Share className=\"mr-2 h-4 w-4\" />\r\n            <span>Share (Disabled)</span>\r\n        </DropdownMenuItem>\r\n    </DropdownMenuContent>\r\n</DropdownMenu>\r\n`}</Pre>\r\n</div>\r\n\r\n## Examples\r\n\r\n### Checkbox\r\n\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\r\n### Radio\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\r\n### Nested\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\r\n"
  },
  {
    "slug": "/components/folder-structure",
    "title": "Folder Structure",
    "description": "This section provides an overview of file structures and their implementation using the FileTree component.",
    "content": "<ComponentPreview name=\"folder-tree-demo\" />\n\n## About\n\nFoldet structure is built on top of <MdxBadge>sidebar</MdxBadge> from [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add folder-structure`,\r\n            npm: `npx alphabyte-cli@latest add folder-structure`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add folder-structure`,\r\n            bun: `bunx alphabyte-cli@latest add folder-structure`,\r\n            deno: `deno run -A npm:alphabyte-cli add folder-structure`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install dependencies\">\n          First , you need to install dependencies\n\n          <Pre className=\"language-bash\">\n            {`npm i install clsx tailwind-merge`}\n          </Pre>\n\n          <Pre className=\"language-bash\">\n            {`npx shadcn@latest add sidebar`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create the hook\">\n          create in your root directory folder called <MdxBadge>hook</MdxBadge> and create a file called <MdxBadge>seSubmenuState.ts </MdxBadge>\n\n          <Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\n            {`import { useState, useCallback } from \"react\"\r\n\r\n              export function useSubmenuState(initialState: Record<string, boolean> = {}) {\r\n               const [openStates, setOpenStates] = useState(initialState)\r\n\r\n              const toggleSubmenu = useCallback((id: string) => {\r\n              setOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\r\n              }, [])\r\n\r\n              return { openStates, toggleSubmenu }\r\n              }\r\n              `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create Folder-Tree Component\">\n          <ComponentSource name=\"folder-tree-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Create folder menu\">\n          and create another file in your <MdxBadge>component</MdxBadge> folder called <MdxBadge>FolderTreeMenu</MdxBadge> and add the following code:\n\n          <CodeBlockWrapper>\n            <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\n              {`\"use client\"\r\n\r\n                import { ChevronDown, ChevronRight } from \"lucide-react\"\r\n\r\n                import { cn } from \"@/lib/utils\"\r\n                import { useSubmenuState } from \"@/hooks/use-submenu-state\"\r\n                import {\r\n                Sidebar,\r\n                SidebarContent,\r\n                SidebarHeader,\r\n                SidebarMenu,\r\n                SidebarMenuButton,\r\n                SidebarMenuItem,\r\n                SidebarMenuSub,\r\n                SidebarMenuSubButton,\r\n                SidebarMenuSubItem,\r\n                } from \"@/components/ui/sidebar\"\r\n\r\n                interface MenuItem {\r\n                id: string\r\n                title: string\r\n                items?: MenuItem[]\r\n                }\r\n\r\n                interface CardSidenavProps {\r\n                items: MenuItem[]\r\n                }\r\n\r\n                export function FolderTreeMenu({ items } : CardSidenavProps) {\r\n                 const { openStates, toggleSubmenu } = useSubmenuState()\r\n\r\n                const renderMenuItem = (item: MenuItem) => {\r\n                const hasSubItems = item.items && item.items.length > 0\r\n                const isOpen = openStates[item.id]\r\n\r\n                    return (\r\n                       <SidebarMenuItem key={item.id}>\r\n                          <SidebarMenuButton\r\n                             onClick={() => hasSubItems && toggleSubmenu(item.id)}\r\n                             className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\r\n                          >\r\n                             {item.title}\r\n                             {hasSubItems && (\r\n                                <span className=\"ml-auto\">\r\n                                   {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                                </span>\r\n                             )}\r\n                          </SidebarMenuButton>\r\n                          {hasSubItems && (\r\n                             <SidebarMenuSub>\r\n                                {isOpen &&\r\n                                   item.items!.map((subItem) => (\r\n                                      <SidebarMenuSubItem key={subItem.id}>\r\n                                         <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\r\n                                      </SidebarMenuSubItem>\r\n                                   ))}\r\n                             </SidebarMenuSub>\r\n                          )}\r\n                       </SidebarMenuItem>\r\n                    )\r\n\r\n                }\r\n\r\n                return (\r\n\r\n                <Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\r\n                <SidebarHeader className=\"px-4 py-2\">\r\n                  <h2 className=\"text-lg font-semibold\">Menu</h2>\r\n                </SidebarHeader>\r\n                <SidebarContent>\r\n                  <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\r\n                </SidebarContent>\r\n                </Sidebar>\r\n                ) } `}\n            </Pre>\n          </CodeBlockWrapper>\n        </StepItem>\n\n        <StepItem title=\"Create example folder\">\n          And last file create in your <MdxBadge>component</MdxBadge> folder file called <MdxBadge>FolderExample.tsx</MdxBadge> and add the following code :\n\n          <CodeBlockWrapper>\n            <Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\n              {`\"use client\"\r\n\r\n                import { FolderTree } from \"./FolderTree\"\r\n\r\n                type FileItem = {\r\n                id: string\r\n                name: string\r\n                type: \"file\" | \"folder\"\r\n                path?: string\r\n                items?: FileItem[]\r\n                }\r\n\r\n                const fileStructure: FileItem[] = [\r\n                {\r\n                id: \"app\",\r\n                name: \"app\",\r\n                type: \"folder\",\r\n                items: [\r\n                {\r\n                id: \"layout\",\r\n                name: \"layout.js\",\r\n                type: \"file\",\r\n                },\r\n                {\r\n                id: \"marketing\",\r\n                name: \"(marketing)\",\r\n                type: \"folder\",\r\n                items: [\r\n                {\r\n                id: \"about\",\r\n                name: \"about\",\r\n                type: \"folder\",\r\n                path: \"/about\",\r\n                items: [\r\n                {\r\n                id: \"about-page\",\r\n                name: \"page.js\",\r\n                type: \"file\",\r\n                },\r\n                ],\r\n                },\r\n                {\r\n                id: \"blog\",\r\n                name: \"blog\",\r\n                type: \"folder\",\r\n                path: \"/blog\",\r\n                items: [\r\n                {\r\n                id: \"blog-page\",\r\n                name: \"page.js\",\r\n                type: \"file\",\r\n                },\r\n                ],\r\n                },\r\n                ],\r\n                },\r\n                {\r\n                id: \"shop\",\r\n                name: \"(shop)\",\r\n                type: \"folder\",\r\n                items: [\r\n                {\r\n                id: \"account\",\r\n                name: \"account\",\r\n                type: \"folder\",\r\n                path: \"/account\",\r\n                items: [\r\n                {\r\n                id: \"account-page\",\r\n                name: \"page.js\",\r\n                type: \"file\",\r\n                },\r\n                ],\r\n                },\r\n                ],\r\n                },\r\n                ],\r\n                },\r\n                ]\r\n\r\n                export default function FolderTreeExample() {\r\n                 return (\r\n                    <div className=\"flex items-center justify-center \">\r\n                       <FolderTree items={fileStructure} />\r\n                    </div>\r\n                 )\r\n                } \r\n                `}\n            </Pre>\n          </CodeBlockWrapper>\n        </StepItem>\n\n        <StepItem title=\"Be comfortable to use it and make it yours\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space space-y-4\">\n  <p className=\"text-base\">\n    start use it by creating an object with the following properties :\n  </p>\n\n  <Pre className=\"language-typescript\">\n    {`type FileItem = {\r\n       id: string\r\n       name: string\r\n       type: \"file\" | \"folder\"\r\n       path?: string\r\n       items?: FileItem[]\r\n      }\r\n      const fileStructure: FileItem[] = [\r\n       {\r\n        // your have to give it an id\r\n          id: \"app\",\r\n          name: \"app\",\r\n          type: \"folder\",\r\n          items: [\r\n             {\r\n                id: \"layout\",\r\n                name: \"layout.js\",\r\n                type: \"file\",\r\n             },\r\n             {\r\n                id: \"marketing\",\r\n                name: \"(marketing)\",\r\n                type: \"folder\",\r\n                items: [\r\n                   {\r\n                      id: \"about\",\r\n                      name: \"about\",\r\n                      type: \"folder\",\r\n                      path: \"/about\",\r\n                   },\r\n                ],\r\n             },\r\n          ],\r\n       },\r\n      ]\r\n      `}\n  </Pre>\n\n  <p className=\"text-base\">\n    and then create a <MdxBadge>div tag</MdxBadge> and import  the obj in it\n  </p>\n\n  <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\n    {`\"use client\"\r\n\r\n      import { FileExplorerNav } from \"./FolderTree\"\r\n      export default function FolderTreeExample() {\r\n       return (\r\n          <div className=\"flex items-center justify-center \">\r\n             <FolderTree items={fileStructure} />\r\n          </div>\r\n       )\r\n      }  \r\n      `}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Folder Structure\r\ndescription: This section provides an overview of file structures and their implementation using the FileTree component.\r\nlinks:\r\ndoc: https://shadcn-ui/docs/components/sidebar\r\n---\r\n\r\n<ComponentPreview name=\"folder-tree-demo\"/>\r\n## About\r\nFoldet structure is built on top of <MdxBadge>sidebar</MdxBadge> from [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\r\n## Installation\r\n<CliCodeTabs>\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add folder-structure`,\r\n      npm: `npx alphabyte-cli@latest add folder-structure`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add folder-structure`,\r\n      bun: `bunx alphabyte-cli@latest add folder-structure`,\r\n      deno: `deno run -A npm:alphabyte-cli add folder-structure`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"Install dependencies\">\r\nFirst , you need to install dependencies\r\n<Pre className=\"language-bash\">\r\n{`npm i install clsx tailwind-merge`}\r\n</Pre>\r\n<Pre className=\"language-bash\">\r\n{`npx shadcn@latest add sidebar`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"Create utils.ts\"> \r\n  <ComponentUtilsText/>\r\n  <ComponentUtils/>\r\n  </StepItem>\r\n<StepItem title=\"Create the hook\">\r\ncreate in your root directory folder called <MdxBadge>hook</MdxBadge> and create a file called <MdxBadge>seSubmenuState.ts </MdxBadge>\r\n<Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\r\n{`import { useState, useCallback } from \"react\"\r\n\r\nexport function useSubmenuState(initialState: Record<string, boolean> = {}) {\r\n   const [openStates, setOpenStates] = useState(initialState)\r\n\r\nconst toggleSubmenu = useCallback((id: string) => {\r\nsetOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\r\n}, [])\r\n\r\nreturn { openStates, toggleSubmenu }\r\n}\r\n`}\r\n\r\n</Pre>\r\n</StepItem>\r\n<StepItem title=\"Create Folder-Tree Component\">\r\n<ComponentSource name=\"folder-tree-demo\" />\r\n</StepItem>\r\n<StepItem title=\"Create folder menu\">\r\nand create another file in your <MdxBadge>component</MdxBadge> folder called <MdxBadge>FolderTreeMenu</MdxBadge> and add the following code:\r\n<CodeBlockWrapper>\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\r\n{`\"use client\"\r\n\r\nimport { ChevronDown, ChevronRight } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useSubmenuState } from \"@/hooks/use-submenu-state\"\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarHeader,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\ninterface MenuItem {\r\nid: string\r\ntitle: string\r\nitems?: MenuItem[]\r\n}\r\n\r\ninterface CardSidenavProps {\r\nitems: MenuItem[]\r\n}\r\n\r\nexport function FolderTreeMenu({ items } : CardSidenavProps) {\r\n   const { openStates, toggleSubmenu } = useSubmenuState()\r\n\r\nconst renderMenuItem = (item: MenuItem) => {\r\nconst hasSubItems = item.items && item.items.length > 0\r\nconst isOpen = openStates[item.id]\r\n\r\n      return (\r\n         <SidebarMenuItem key={item.id}>\r\n            <SidebarMenuButton\r\n               onClick={() => hasSubItems && toggleSubmenu(item.id)}\r\n               className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\r\n            >\r\n               {item.title}\r\n               {hasSubItems && (\r\n                  <span className=\"ml-auto\">\r\n                     {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                  </span>\r\n               )}\r\n            </SidebarMenuButton>\r\n            {hasSubItems && (\r\n               <SidebarMenuSub>\r\n                  {isOpen &&\r\n                     item.items!.map((subItem) => (\r\n                        <SidebarMenuSubItem key={subItem.id}>\r\n                           <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\r\n                        </SidebarMenuSubItem>\r\n                     ))}\r\n               </SidebarMenuSub>\r\n            )}\r\n         </SidebarMenuItem>\r\n      )\r\n\r\n}\r\n\r\nreturn (\r\n\r\n<Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\r\n  <SidebarHeader className=\"px-4 py-2\">\r\n    <h2 className=\"text-lg font-semibold\">Menu</h2>\r\n  </SidebarHeader>\r\n  <SidebarContent>\r\n    <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\r\n  </SidebarContent>\r\n</Sidebar>\r\n) } `}\r\n\r\n</Pre>\r\n</CodeBlockWrapper>\r\n</StepItem>\r\n<StepItem title=\"Create example folder\">\r\nAnd last file create in your <MdxBadge>component</MdxBadge> folder file called <MdxBadge>FolderExample.tsx</MdxBadge> and add the following code :\r\n<CodeBlockWrapper>\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\r\n{`\"use client\"\r\n\r\nimport { FolderTree } from \"./FolderTree\"\r\n\r\ntype FileItem = {\r\nid: string\r\nname: string\r\ntype: \"file\" | \"folder\"\r\npath?: string\r\nitems?: FileItem[]\r\n}\r\n\r\nconst fileStructure: FileItem[] = [\r\n{\r\nid: \"app\",\r\nname: \"app\",\r\ntype: \"folder\",\r\nitems: [\r\n{\r\nid: \"layout\",\r\nname: \"layout.js\",\r\ntype: \"file\",\r\n},\r\n{\r\nid: \"marketing\",\r\nname: \"(marketing)\",\r\ntype: \"folder\",\r\nitems: [\r\n{\r\nid: \"about\",\r\nname: \"about\",\r\ntype: \"folder\",\r\npath: \"/about\",\r\nitems: [\r\n{\r\nid: \"about-page\",\r\nname: \"page.js\",\r\ntype: \"file\",\r\n},\r\n],\r\n},\r\n{\r\nid: \"blog\",\r\nname: \"blog\",\r\ntype: \"folder\",\r\npath: \"/blog\",\r\nitems: [\r\n{\r\nid: \"blog-page\",\r\nname: \"page.js\",\r\ntype: \"file\",\r\n},\r\n],\r\n},\r\n],\r\n},\r\n{\r\nid: \"shop\",\r\nname: \"(shop)\",\r\ntype: \"folder\",\r\nitems: [\r\n{\r\nid: \"account\",\r\nname: \"account\",\r\ntype: \"folder\",\r\npath: \"/account\",\r\nitems: [\r\n{\r\nid: \"account-page\",\r\nname: \"page.js\",\r\ntype: \"file\",\r\n},\r\n],\r\n},\r\n],\r\n},\r\n],\r\n},\r\n]\r\n\r\nexport default function FolderTreeExample() {\r\n   return (\r\n      <div className=\"flex items-center justify-center \">\r\n         <FolderTree items={fileStructure} />\r\n      </div>\r\n   )\r\n} \r\n`}\r\n</Pre>\r\n</CodeBlockWrapper>\r\n</StepItem>\r\n<StepItem title=\"Be comfortable to use it and make it yours\"/>\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space space-y-4\">\r\n<p className=\"text-base\">\r\nstart use it by creating an object with the following properties :\r\n</p>\r\n<Pre className=\"language-typescript\">\r\n{`type FileItem = {\r\n   id: string\r\n   name: string\r\n   type: \"file\" | \"folder\"\r\n   path?: string\r\n   items?: FileItem[]\r\n}\r\nconst fileStructure: FileItem[] = [\r\n   {\r\n    // your have to give it an id\r\n      id: \"app\",\r\n      name: \"app\",\r\n      type: \"folder\",\r\n      items: [\r\n         {\r\n            id: \"layout\",\r\n            name: \"layout.js\",\r\n            type: \"file\",\r\n         },\r\n         {\r\n            id: \"marketing\",\r\n            name: \"(marketing)\",\r\n            type: \"folder\",\r\n            items: [\r\n               {\r\n                  id: \"about\",\r\n                  name: \"about\",\r\n                  type: \"folder\",\r\n                  path: \"/about\",\r\n               },\r\n            ],\r\n         },\r\n      ],\r\n   },\r\n]\r\n`}\r\n</Pre>\r\n<p className=\"text-base\">\r\nand then create a <MdxBadge>div tag</MdxBadge> and import  the obj in it\r\n</p>\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\r\n{`\"use client\"\r\n\r\nimport { FileExplorerNav } from \"./FolderTree\"\r\nexport default function FolderTreeExample() {\r\n   return (\r\n      <div className=\"flex items-center justify-center \">\r\n         <FolderTree items={fileStructure} />\r\n      </div>\r\n   )\r\n}  \r\n`}\r\n</Pre>\r\n</div\r\n\r\n>\r\n"
  },
  {
    "slug": "/components/input",
    "title": "Input",
    "description": "Input component for text, email, file upload, and more.",
    "content": "<ComponentPreview name=\"input-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add input`,\r\n            npm: `npx alphabyte-cli@latest add input`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add input`,\r\n            bun: `bunx alphabyte-cli@latest add input`,\r\n            deno: `deno run -A npm:alphabyte-cli add input`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Input Component\">\n          <ComponentSource name=\"input\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Input } from \"@/components/ui/input\"`}\n  </Pre>\n\n  <Pre>\n    {`const InputDemo = () => {\r\n      return <Input className=\"w-56\" type=\"email\" placeholder=\"Email\" />\r\n      }\r\n\r\n      export default InputDemo`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"input-demo\" />\n\n### File Upload\n\n<ComponentPreview name=\"input\" variant=\"file\" />\n\n### Disabled\n\n<ComponentPreview name=\"input\" variant=\"disabled\" />\n\n### With Label\n\n<ComponentPreview name=\"input\" variant=\"label\" />\n\n### With Button\n\n<ComponentPreview name=\"input\" variant=\"button\" />\n",
    "raw": "---\r\ntitle: Input\r\ndescription: Input component for text, email, file upload, and more.\r\n---\r\n\r\n<ComponentPreview name=\"input-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add input`,\r\n      npm: `npx alphabyte-cli@latest add input`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add input`,\r\n      bun: `bunx alphabyte-cli@latest add input`,\r\n      deno: `deno run -A npm:alphabyte-cli add input`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, install the required dependencies:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Input Component\">\r\n      <ComponentSource name=\"input\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { Input } from \"@/components/ui/input\"`}</Pre>\r\n<Pre>{`const InputDemo = () => {\r\n  return <Input className=\"w-56\" type=\"email\" placeholder=\"Email\" />\r\n}\r\n\r\nexport default InputDemo`}</Pre>\r\n</div>\r\n\r\n## Examples\r\n\r\n### Default\r\n<ComponentPreview name=\"input-demo\" />\r\n\r\n### File Upload\r\n<ComponentPreview name=\"input\" variant=\"file\" />\r\n\r\n### Disabled\r\n<ComponentPreview name=\"input\" variant=\"disabled\" />\r\n\r\n### With Label\r\n<ComponentPreview name=\"input\" variant=\"label\" />\r\n\r\n### With Button\r\n<ComponentPreview name=\"input\" variant=\"button\" />\r\n"
  },
  {
    "slug": "/components/label",
    "title": "Label",
    "description": "Label component for form fields and accessibility.",
    "content": "<ComponentPreview name=\"label-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add label`,\r\n            npm: `npx alphabyte-cli@latest add label`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add label`,\r\n            bun: `bunx alphabyte-cli@latest add label`,\r\n            deno: `deno run -A npm:alphabyte-cli add label`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Label Component\">\n          <ComponentSource name=\"label-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Checkbox } from \"@/components/ui/checkbox\"\r\n      import { Label } from \"@/components/ui/label\"`}\n  </Pre>\n\n  <Pre>\n    {`\r\n      const LabelDemo = () => {\r\n      return (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Checkbox id=\"terms\" />\r\n          <Label\r\n            htmlFor=\"terms\"\r\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n          >\r\n            Accept terms and conditions\r\n          </Label>\r\n        </div>\r\n      )\r\n      }\r\n\r\n      export default LabelDemo\r\n      `}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Label\r\ndescription: Label component for form fields and accessibility.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/label\r\n  api: https://www.radix-ui.com/docs/primitives/components/label#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"label-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add label`,\r\n      npm: `npx alphabyte-cli@latest add label`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add label`,\r\n      bun: `bunx alphabyte-cli@latest add label`,\r\n      deno: `deno run -A npm:alphabyte-cli add label`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"Install Dependencies\">\r\nFirst, install the required dependencies:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"Create utils.ts\"> \r\n    <ComponentUtilsText/>\r\n    <ComponentUtils/>\r\n  </StepItem>\r\n  <StepItem title=\"Create Label Component\">\r\n    <ComponentSource name=\"label-demo\"/>\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Label } from \"@/components/ui/label\"`}\r\n</Pre>\r\n\r\n<Pre>{`\r\nconst LabelDemo = () => {\r\n  return (\r\n    <div className=\"flex items-center space-x-2\">\r\n      <Checkbox id=\"terms\" />\r\n      <Label\r\n        htmlFor=\"terms\"\r\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n      >\r\n        Accept terms and conditions\r\n      </Label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LabelDemo\r\n`}</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/note",
    "title": "Note",
    "description": "A flexible Note component to highlight important information in your UI.",
    "content": "**Use the versatile Note component to effectively communicate important information within your interface.**\n\n<ComponentPreview name=\"note-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add note`,\r\n            npm: `npx alphabyte-cli@latest add note`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add note`,\r\n            bun: `bunx alphabyte-cli@latest add note`,\r\n            deno: `deno run -A npm:alphabyte-cli add note`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          Install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create the Note Component\">\n          <ComponentSource name=\"note-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Customize\">\n          Now you can edit and style it to fit your needs.\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import { Note } from \"@/components/ui/note\"`}\n  </Pre>\n\n  <Pre className=\"language-tsx\">\n    {`const NoteDemo = () => {\r\n      return <Note variant=\"info\">This is an informational note.</Note>\r\n      }\r\n\r\n      export default NoteDemo`}\n  </Pre>\n</div>\n\n## Examples\n\n### Standard Note\n\n<ComponentPreview name=\"note-demo\" />\n\n### Success Note\n\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\n\n### Warning Note\n\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\n\n### Error Note\n\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\n\n## Closable Notes\n\nTo make a note dismissible, set the <MdxBadge>closable</MdxBadge> prop to <MdxBadge>true</MdxBadge>.\n\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\n",
    "raw": "---\r\ntitle: Note\r\ndescription: A flexible Note component to highlight important information in your UI.\r\n---\r\n\r\n**Use the versatile Note component to effectively communicate important information within your interface.**\r\n\r\n<ComponentPreview name=\"note-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add note`,\r\n      npm: `npx alphabyte-cli@latest add note`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add note`,\r\n      bun: `bunx alphabyte-cli@latest add note`,\r\n      deno: `deno run -A npm:alphabyte-cli add note`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\"> \r\n<Step>\r\n<StepItem title=\"Install Dependencies\">\r\nInstall the required dependencies:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"Create utils.ts\"> \r\n    <ComponentUtilsText/>\r\n    <ComponentUtils/>\r\n  </StepItem>\r\n  <StepItem title=\"Create the Note Component\">\r\n    <ComponentSource name=\"note-demo\"/>\r\n  </StepItem>\r\n  <StepItem title=\"Customize\">\r\n    Now you can edit and style it to fit your needs.\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre className=\"language-typescript\">\r\n{`import { Note } from \"@/components/ui/note\"`}\r\n</Pre>\r\n<Pre className=\"language-tsx\">\r\n{`const NoteDemo = () => {\r\n  return <Note variant=\"info\">This is an informational note.</Note>\r\n}\r\n\r\nexport default NoteDemo`}\r\n</Pre>\r\n</div>\r\n\r\n## Examples\r\n\r\n### Standard Note\r\n<ComponentPreview name=\"note-demo\" />\r\n\r\n### Success Note\r\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\r\n\r\n### Warning Note\r\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\r\n\r\n### Error Note\r\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\r\n\r\n## Closable Notes\r\n\r\nTo make a note dismissible, set the <MdxBadge>closable</MdxBadge> prop to <MdxBadge>true</MdxBadge>.\r\n\r\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\r\n"
  },
  {
    "slug": "/components/popover",
    "title": "Popover",
    "description": "A floating panel that appears when users interact with an element.",
    "content": "<ComponentPreview name=\"popover-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add popover`,\r\n            npm: `npx alphabyte-cli@latest add popover`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add popover`,\r\n            bun: `bunx alphabyte-cli@latest add popover`,\r\n            deno: `deno run -A npm:alphabyte-cli add popover`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-popover`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Popover Component\">\n          <ComponentSource name=\"popover-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Button } from \"@/components/ui/button\"\r\n      import {\r\n      Popover,\r\n      PopoverContent,\r\n      PopoverTrigger,\r\n      } from \"@/components/ui/popover\"\r\n\r\n      const PopoverDemo = () => {\r\n      return (\r\n        <Popover>\r\n          <PopoverTrigger asChild>\r\n            <Button>Click me</Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent>\r\n            <p>Your content here</p>\r\n          </PopoverContent>\r\n        </Popover>\r\n      )\r\n      }\r\n\r\n      export default PopoverDemo`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Popover\r\ndescription: A floating panel that appears when users interact with an element.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/popover\r\n  api: https://www.radix-ui.com/docs/primitives/components/popover#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"popover-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add popover`,\r\n      npm: `npx alphabyte-cli@latest add popover`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add popover`,\r\n      bun: `bunx alphabyte-cli@latest add popover`,\r\n      deno: `deno run -A npm:alphabyte-cli add popover`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, install the required dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-popover`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Popover Component\">\r\n      <ComponentSource name=\"popover-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\n\r\nconst PopoverDemo = () => {\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button>Click me</Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent>\r\n        <p>Your content here</p>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nexport default PopoverDemo`}</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/pre",
    "title": "Pre (Code Block)",
    "description": "Showcase beautifully styled and customizable code snippets with advanced features like syntax highlighting, line numbering, and line highlighting.",
    "content": "<ComponentPreview name=\"code-block-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add pre`,\r\n            npm: `npx alphabyte-cli@latest add pre`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add pre`,\r\n            bun: `bunx alphabyte-cli@latest add pre`,\r\n            deno: `deno run -A npm:alphabyte-cli add pre`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, install Prism.js and other required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install prismjs clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Pre Component\">\n          <ComponentSource name=\"pre\" />\n        </StepItem>\n\n        <StepItem title=\"Create prism-theme.css file\">\n          Create a file called <MdxBadge>prism-theme.css</MdxBadge> in your app directory, and apply your Prism.js styles there.\n\n          <Pre className=\"language-css\" folderPath=\"prism-theme.css\">\n            {`\r\n                :root {\r\n              --code-background: #1e1e1e;\r\n              --code-text-color: #e8e8e8;\r\n              --code-toolbar-background: #252526;\r\n              --code-border-color: #404040;\r\n              --code-folder-path-color: #a0a0a0;\r\n              --code-selection-background: rgba(173, 214, 255, 0.15);\r\n              --code-line-numbers-color: #6e7681;\r\n              --code-line-numbers-hover: #8b949e;\r\n              --sidebar-background: #252526;\r\n              --sidebar-header-background: #333333;\r\n              --sidebar-text-color: #cccccc;\r\n              --sidebar-text-hover: #ffffff;\r\n              --sidebar-text-muted: #8a8a8a;\r\n              --sidebar-item-hover-bg: #2a2d2e;\r\n              --sidebar-item-active-bg: #37373d;\r\n              --sidebar-border-color: #474747;\r\n              --sidebar-resize-handle: #0e639c;\r\n              --sidebar-loading-bg: #37373d;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) {\r\n                --code-background: #fafafa;\r\n                --code-text-color: #24292f;\r\n                --code-toolbar-background: #f0f0f0;\r\n                --code-border-color: #d1d9e0;\r\n                --code-folder-path-color: #636c76;\r\n                --code-selection-background: rgba(0, 92, 197, 0.12);\r\n                --code-line-numbers-color: #8c959f;\r\n                --code-line-numbers-hover: #656d76;\r\n                --sidebar-background: #f6f8fa;\r\n                --sidebar-header-background: #f0f3f6;\r\n                --sidebar-text-color: #24292f;\r\n                --sidebar-text-hover: #0969da;\r\n                --sidebar-text-muted: #656d76;\r\n                --sidebar-item-hover-bg: #f3f4f6;\r\n                --sidebar-item-active-bg: #dbeafe;\r\n                --sidebar-border-color: #d0d7de;\r\n                --sidebar-resize-handle: #0969da;\r\n                --sidebar-loading-bg: #f3f4f6;\r\n              }\r\n              }\r\n\r\n              .code-block-container {\r\n              background-color: var(--code-background);\r\n              border-radius: 12px;\r\n              width: 100%;\r\n              position: relative;\r\n              font-family:\r\n                \"Cascadia Code\", \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\",\r\n                \"Courier New\", monospace;\r\n              overflow: hidden;\r\n              }\r\n\r\n              .code-block-header {\r\n              background-color: var(--code-toolbar-background);\r\n              border-bottom: 1px solid var(--code-border-color);\r\n              border-radius: 6px 6px 0 0;\r\n              }\r\n\r\n              pre[class*=\"language-\"],\r\n              code[class*=\"language-\"] {\r\n              color: var(--code-text-color);\r\n              font-size: 14px;\r\n              text-shadow: none;\r\n              direction: ltr;\r\n              text-align: left;\r\n              white-space: pre;\r\n              word-spacing: normal;\r\n              word-break: normal;\r\n              line-height: 1.5;\r\n              -moz-tab-size: 4;\r\n              -o-tab-size: 4;\r\n              tab-size: 4;\r\n              -webkit-hyphens: none;\r\n              -moz-hyphens: none;\r\n              -ms-hyphens: none;\r\n              hyphens: none;\r\n              background: transparent;\r\n              }\r\n\r\n              pre[class*=\"language-\"] {\r\n              padding: 0.8rem;\r\n              margin: 0;\r\n              overflow-x: auto;\r\n              border-radius: 0 0 6px 6px;\r\n              }\r\n\r\n              :not(pre) > code[class*=\"language-\"] {\r\n              padding: 0.3em;\r\n              border-radius: 0.3em;\r\n              color: #e63946;\r\n              background: var(--code-background);\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) :not(pre) > code[class*=\"language-\"] {\r\n                color: #d73a49;\r\n              }\r\n              }\r\n\r\n              pre[class*=\"language-\"]::selection,\r\n              code[class*=\"language-\"]::selection,\r\n              pre[class*=\"language-\"] *::selection,\r\n              code[class*=\"language-\"] *::selection {\r\n              text-shadow: none;\r\n              background: var(--code-selection-background);\r\n              }\r\n\r\n              .line-numbers .line-numbers-rows {\r\n              border-right: none !important;\r\n              padding-right: 1rem !important;\r\n              top: -2.5px !important;\r\n              left: -39px !important;\r\n              position: absolute;\r\n              height: 100%;\r\n              -webkit-user-select: none;\r\n              -moz-user-select: none;\r\n              -ms-user-select: none;\r\n              user-select: none;\r\n              }\r\n\r\n              .line-numbers-rows > span {\r\n              padding: 0;\r\n              border: 0;\r\n              display: block;\r\n              counter-increment: linenumbers;\r\n              color: var(--code-line-numbers-color) !important;\r\n              font-size: 14px;\r\n              line-height: 1.5;\r\n              text-align: right;\r\n              transition: color 0.2s ease;\r\n              }\r\n\r\n              .line-numbers-rows > span:hover {\r\n              color: var(--code-line-numbers-hover) !important;\r\n              }\r\n\r\n              @media print {\r\n              pre[class*=\"language-\"],\r\n              code[class*=\"language-\"] {\r\n                text-shadow: none;\r\n              }\r\n              }\r\n\r\n              /* Sidebar/File Tree Styles */\r\n              .sidebar-container {\r\n              background-color: var(--sidebar-background);\r\n              color: var(--sidebar-text-color);\r\n              border-color: var(--sidebar-border-color);\r\n              }\r\n\r\n              .sidebar-header {\r\n              background-color: var(--sidebar-header-background);\r\n              border-color: var(--sidebar-border-color);\r\n              color: var(--sidebar-text-color);\r\n              }\r\n\r\n              .sidebar-text {\r\n              color: var(--sidebar-text-color);\r\n              }\r\n\r\n              .sidebar-text-muted {\r\n              color: var(--sidebar-text-muted);\r\n              }\r\n\r\n              .sidebar-item-hover:hover {\r\n              background-color: var(--sidebar-item-hover-bg);\r\n              color: var(--sidebar-text-hover);\r\n              }\r\n\r\n              .sidebar-item-active {\r\n              background-color: var(--sidebar-item-active-bg);\r\n              color: var(--sidebar-text-hover);\r\n              }\r\n\r\n              .sidebar-loading {\r\n              background-color: var(--sidebar-loading-bg);\r\n              }\r\n\r\n              .sidebar-resize-handle {\r\n              background-color: var(--sidebar-resize-handle);\r\n              }\r\n\r\n              .sidebar-open-button {\r\n              background-color: var(--sidebar-background);\r\n              color: var(--sidebar-text-color);\r\n              border-color: var(--sidebar-border-color);\r\n              }\r\n\r\n              .sidebar-open-button:hover {\r\n              background-color: var(--sidebar-item-hover-bg);\r\n              }\r\n\r\n              /* Token styling continues as before... */\r\n              .token.comment,\r\n              .token.prolog {\r\n              color: #7c9961;\r\n              font-style: italic;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.comment,\r\n              :root:not(.dark) .token.prolog {\r\n                color: #6a7f3a;\r\n              }\r\n              }\r\n\r\n              .token.doctype .token.doctype-tag {\r\n              color: #569cd6;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.doctype .token.doctype-tag {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.doctype .token.name {\r\n              color: #9cdcfe;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.doctype .token.name {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              .token.cdata {\r\n              color: #8a8a8a;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.cdata {\r\n                color: #6a737d;\r\n              }\r\n              }\r\n\r\n              .token.punctuation,\r\n              .language-html .language-css .token.punctuation,\r\n              .language-html .language-javascript .token.punctuation {\r\n              color: #e8e8e8;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.punctuation,\r\n              :root:not(.dark) .language-html .language-css .token.punctuation,\r\n              :root:not(.dark) .language-html .language-javascript .token.punctuation {\r\n                color: #24292f;\r\n              }\r\n              }\r\n\r\n              .token.operator,\r\n              .token.entity {\r\n              color: #e8e8e8;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.operator,\r\n              :root:not(.dark) .token.entity {\r\n                color: #24292f;\r\n              }\r\n              }\r\n\r\n              .token.operator.arrow {\r\n              color: #5fb3d4;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.operator.arrow {\r\n                color: #0969da;\r\n              }\r\n              }\r\n\r\n              .token.keyword {\r\n              color: #e879cb;\r\n              font-weight: 500;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.keyword {\r\n                color: #cf222e;\r\n              }\r\n              }\r\n\r\n              .token.keyword.module,\r\n              .token.keyword.control-flow {\r\n              color: #d286c5;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.keyword.module,\r\n              :root:not(.dark) .token.keyword.control-flow {\r\n                color: #8250df;\r\n              }\r\n              }\r\n\r\n              .token.property,\r\n              .token.tag,\r\n              .token.boolean,\r\n              .token.number,\r\n              .token.constant,\r\n              .token.symbol,\r\n              .token.inserted,\r\n              .token.unit {\r\n              color: #c4d9a5;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.property,\r\n              :root:not(.dark) .token.tag,\r\n              :root:not(.dark) .token.boolean,\r\n              :root:not(.dark) .token.number,\r\n              :root:not(.dark) .token.constant,\r\n              :root:not(.dark) .token.symbol,\r\n              :root:not(.dark) .token.inserted,\r\n              :root:not(.dark) .token.unit {\r\n                color: #1a7f37;\r\n              }\r\n              }\r\n\r\n              .token.boolean {\r\n              color: #569cd6;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.boolean {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.constant {\r\n              color: #56c9b0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.constant {\r\n                color: #0969da;\r\n              }\r\n              }\r\n\r\n              .token.selector,\r\n              .token.attr-name,\r\n              .token.string,\r\n              .token.char,\r\n              .token.builtin,\r\n              .token.deleted {\r\n              color: #d4967b;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.selector,\r\n              :root:not(.dark) .token.attr-name,\r\n              :root:not(.dark) .token.string,\r\n              :root:not(.dark) .token.char,\r\n              :root:not(.dark) .token.builtin,\r\n              :root:not(.dark) .token.deleted {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              .token.escape {\r\n              color: #ddc487;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.escape {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .token.function,\r\n              .token.function .token.maybe-class-name {\r\n              color: #ebe2aa;\r\n              font-weight: 500;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.function,\r\n              :root:not(.dark) .token.function .token.maybe-class-name {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .token.class-name,\r\n              .token.maybe-class-name {\r\n              color: #56c9b0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.class-name,\r\n              :root:not(.dark) .token.maybe-class-name {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .token.property,\r\n              .token.variable,\r\n              .token.imports .token.maybe-class-name,\r\n              .token.exports .token.maybe-class-name {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.property,\r\n              :root:not(.dark) .token.variable,\r\n              :root:not(.dark) .token.imports .token.maybe-class-name,\r\n              :root:not(.dark) .token.exports .token.maybe-class-name {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.parameter {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.parameter {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.console {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.console {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.interpolation {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.interpolation {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.punctuation.interpolation-punctuation {\r\n              color: #569cd6;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.punctuation.interpolation-punctuation {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .language-css .token.string.url {\r\n              text-decoration: underline;\r\n              }\r\n\r\n              .token.atrule {\r\n              color: #d4967b;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.atrule {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              .token.atrule .token.rule {\r\n              color: #d286c5;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.atrule .token.rule {\r\n                color: #8250df;\r\n              }\r\n              }\r\n\r\n              .token.atrule .token.url {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.atrule .token.url {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.atrule .token.url .token.function {\r\n              color: #f4e474;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.atrule .token.url .token.function {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .token.atrule .token.url .token.punctuation {\r\n              color: #e8e8e8;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.atrule .token.url .token.punctuation {\r\n                color: #24292f;\r\n              }\r\n              }\r\n\r\n              .token.selector {\r\n              color: #ddc487;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.selector {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .token.tag {\r\n              color: #569cd6;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.tag {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.tag .token.punctuation {\r\n              color: #c9c9c9;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.tag .token.punctuation {\r\n                color: #24292f;\r\n              }\r\n              }\r\n\r\n              .token.attr-name {\r\n              color: #a8dcf0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.attr-name {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.attr-value,\r\n              .token.attr-value .token.punctuation {\r\n              color: #d4967b;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.attr-value,\r\n              :root:not(.dark) .token.attr-value .token.punctuation {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              .token.attr-value .token.punctuation.attr-equals {\r\n              color: #e8e8e8;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.attr-value .token.punctuation.attr-equals {\r\n                color: #24292f;\r\n              }\r\n              }\r\n\r\n              .language-html .token.punctuation {\r\n              color: #9a9a9a;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .language-html .token.punctuation {\r\n                color: #6a7681;\r\n              }\r\n              }\r\n\r\n              pre[class*=\"language-javascript\"],\r\n              code[class*=\"language-javascript\"],\r\n              pre[class*=\"language-jsx\"],\r\n              code[class*=\"language-jsx\"],\r\n              code[class*=\"language-json\"],\r\n              pre[class*=\"language-typescript\"],\r\n              code[class*=\"language-typescript\"],\r\n              pre[class*=\"language-tsx\"],\r\n              code[class*=\"language-tsx\"] {\r\n              color: #569cd6;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) pre[class*=\"language-javascript\"],\r\n              :root:not(.dark) code[class*=\"language-javascript\"],\r\n              :root:not(.dark) pre[class*=\"language-jsx\"],\r\n              :root:not(.dark) code[class*=\"language-jsx\"],\r\n              :root:not(.dark) pre[class*=\"language-typescript\"],\r\n              :root:not(.dark) code[class*=\"language-typescript\"],\r\n              :root:not(.dark) pre[class*=\"language-tsx\"],\r\n              :root:not(.dark) code[class*=\"language-tsx\"] {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              pre[class*=\"language-css\"],\r\n              code[class*=\"language-css\"] {\r\n              color: #d4967b;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) pre[class*=\"language-css\"],\r\n              :root:not(.dark) code[class*=\"language-css\"] {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              pre[class*=\"language-html\"],\r\n              code[class*=\"language-html\"] {\r\n              color: var(--code-text-color) !important;\r\n              }\r\n\r\n              .token.regex {\r\n              color: #e67373;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.regex {\r\n                color: #032f62;\r\n              }\r\n              }\r\n\r\n              .language-regex .token.anchor {\r\n              color: #ebe2aa;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .language-regex .token.anchor {\r\n                color: #6f42c1;\r\n              }\r\n              }\r\n\r\n              .namespace {\r\n              opacity: 0.8;\r\n              }\r\n\r\n              .token.namespace {\r\n              color: #56c9b0;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.namespace {\r\n                color: #0969da;\r\n              }\r\n              }\r\n\r\n              .token.important {\r\n              color: #569cd6;\r\n              font-weight: bold;\r\n              }\r\n\r\n              @media (prefers-color-scheme: light) {\r\n              :root:not(.dark) .token.important {\r\n                color: #005cc5;\r\n              }\r\n              }\r\n\r\n              .token.italic {\r\n              font-style: italic;\r\n              }\r\n\r\n              .plain-text {\r\n              color: var(--code-text-color);\r\n              }\r\n\r\n              pre[class*=\"language-\"] > code[class*=\"language-\"] {\r\n              position: relative;\r\n              z-index: 1;\r\n              }\r\n\r\n              pre[class*=\"language-\"]:focus-visible {\r\n              outline: 2px solid #0969da;\r\n              outline-offset: 2px;\r\n              }\r\n\r\n              @media (prefers-color-scheme: dark) {\r\n              pre[class*=\"language-\"]:focus-visible {\r\n                outline-color: #58a6ff;\r\n              }\r\n              }\r\n\r\n              .token.keyword,\r\n              .token.function {\r\n              text-shadow: none;\r\n              }\r\n\r\n              .token.comment .token.keyword {\r\n              color: inherit;\r\n              font-weight: normal;\r\n              }\r\n\r\n                `}\n          </Pre>\n\n          <Note type=\"note\" className=\"!mb-5 !my-3\">\n            You can customize it to look like Visual Studio Code dark theme or any style you prefer.\n          </Note>\n        </StepItem>\n\n        <StepItem title=\"Adding a code language\">\n          This step is <MdxBadge>Optional</MdxBadge>.\\\n          It shows the language of your code block.\\\n          You can pass <MdxBadge>Images</MdxBadge> or <MdxBadge>Icons</MdxBadge>.\\\n          If you choose icons, make sure the library you use allows color customization.\\\n          Example: create a file <MdxBadge>language-icon.ts</MdxBadge> with mappings for `js`, `ts`, `html`, etc.\n\n          <Pre className=\"language-typescript\" folderPath=\"settings/LanguageIcon.tsx\">\n            {`\r\n                import { CustomImage } from \"@/components/custome-image\"\r\n              import { FileJson2, Terminal } from \"lucide-react\"\r\n              import type { JSX } from \"react\"\r\n\r\n              export const languageIcons: Record<string, JSX.Element> = {\r\n              javascript: (\r\n                <CustomImage\r\n                  src=\"/icons/javascript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"javascript\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              js: (\r\n                <CustomImage\r\n                  src=\"/icons/javascript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"javascript\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              jsx: (\r\n                <CustomImage\r\n                  src=\"/icons/javascript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"jsx\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              typescript: (\r\n                <CustomImage\r\n                  src=\"/icons/typescript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"typescript\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              ts: (\r\n                <CustomImage\r\n                  src=\"/icons/typescript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"typescript\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              tsx: (\r\n                <CustomImage\r\n                  src=\"/icons/typescript.svg\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  alt=\"typescript\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              html: (\r\n                <CustomImage\r\n                  src=\"/icons/html.svg\"\r\n                  alt=\"html\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              css: (\r\n                <CustomImage\r\n                  src=\"/icons/css.svg\"\r\n                  alt=\"css\"\r\n                  className=\"w-[18px] h-[18px]\"\r\n                  width={10}\r\n                  height={10}\r\n                  quality={100}\r\n                />\r\n              ),\r\n              bash: <Terminal className=\"w-[18px] h-[18px] dark:text-gray-100 text-gray-950 rounded-lg\" />,\r\n              json: <FileJson2 className=\"w-[18px] h-[18px] text-yellow-500 rounded-lg\" />\r\n              }\r\n                `}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Now, feel free to use it and customize it\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"`}\n  </Pre>\n\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"\r\n      import { cn } from \"@/lib/utils\"\r\n\r\n      const CodeBlockDemo = ({ className }: { className: string }) => {\r\n      const ExampleCode = \\`function MyComponent(props) {\r\n        return (\r\n          <div>\r\n            <h1>Hello, {props.name}!</h1>\r\n            <p>This is an example React component.</p>\r\n          </div>\r\n        )\r\n      };\\`\r\n\r\n      return (\r\n        <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}>\r\n          {ExampleCode}\r\n        </Pre>\r\n      )\r\n      }\r\n\r\n      export default CodeBlockDemo`}\n  </Pre>\n</div>\n\n## Examples\n\n### TypeScript/React Component\n\n<Pre className=\"language-tsx\" title=\"MyComponent.tsx\" description=\"A reusable React component with TypeScript\" highlightLines={[4, 8, 12]} showLineNumbers={true} enableSearch={true} maxHeight={400}>\n  {`// React Component Example\r\n    import React from 'react'\r\n    import { Button } from '@/components/ui/button'\r\n\r\n    interface Props {\r\n    title: string\r\n    description?: string\r\n    onAction?: () => void\r\n    }\r\n\r\n    export function MyComponent({ title, description, onAction }: Props) {\r\n    return (\r\n      <div className=\"p-6 bg-background border rounded-lg\">\r\n        <h2 className=\"text-2xl font-bold mb-2\">{title}</h2>\r\n        {description && (\r\n          <p className=\"text-muted-foreground mb-4\">{description}</p>\r\n        )}\r\n        <Button onClick={onAction} className=\"w-full\">\r\n          Click me\r\n        </Button>\r\n      </div>\r\n    )\r\n    }`}\n</Pre>\n\n### CSS Styles\n\n<Pre className=\"language-css\" title=\"styles.css\" description=\"Tailwind CSS custom styles\" highlightLines={[2, 6, 10]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\n  {`/* Custom Styles */\r\n    .my-component {\r\n    @apply p-6 bg-background border rounded-lg;\r\n    }\r\n\r\n    .my-component h2 {\r\n    @apply text-2xl font-bold mb-2;\r\n    }\r\n\r\n    .my-component p {\r\n    @apply text-muted-foreground mb-4;\r\n    }\r\n\r\n    .my-component button {\r\n    @apply w-full;\r\n    }\r\n\r\n    /* Responsive Design */\r\n    @media (max-width: 768px) {\r\n    .my-component {\r\n      @apply p-4;\r\n    }\r\n    }`}\n</Pre>\n\n### JSON Configuration\n\n<Pre className=\"language-json\" title=\"package.json\" description=\"Project dependencies and scripts\" highlightLines={[1, 5, 9]} showLineNumbers={true} enableSearch={true} maxHeight={250}>\n  {`{\r\n    \"name\": \"my-component\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"A reusable React component\",\r\n    \"main\": \"index.tsx\",\r\n    \"scripts\": {\r\n      \"build\": \"tsc\",\r\n      \"dev\": \"next dev\",\r\n      \"lint\": \"eslint . --ext .ts,.tsx\",\r\n      \"test\": \"jest\"\r\n    },\r\n    \"dependencies\": {\r\n      \"react\": \"^18.0.0\",\r\n      \"next\": \"^14.0.0\",\r\n      \"@types/react\": \"^18.0.0\"\r\n    },\r\n    \"devDependencies\": {\r\n      \"typescript\": \"^5.0.0\",\r\n      \"tailwindcss\": \"^3.0.0\"\r\n    }\r\n    }`}\n</Pre>\n\n### JavaScript/Node.js\n\n<Pre className=\"language-javascript\" title=\"server.js\" description=\"Express.js server example\" highlightLines={[3, 7, 15]} showLineNumbers={true} enableSearch={true} maxHeight={350}>\n  {`// Express.js Server Example\r\n    const express = require('express');\r\n    const cors = require('cors');\r\n    const helmet = require('helmet');\r\n\r\n    const app = express();\r\n    const PORT = process.env.PORT || 3000;\r\n\r\n    // Middleware\r\n    app.use(helmet());\r\n    app.use(cors());\r\n    app.use(express.json());\r\n\r\n    // Routes\r\n    app.get('/api/health', (req, res) => {\r\n    res.json({ status: 'OK', timestamp: new Date().toISOString() });\r\n    });\r\n\r\n    app.post('/api/users', async (req, res) => {\r\n    try {\r\n      const { name, email } = req.body;\r\n      // User creation logic here\r\n      res.status(201).json({ message: 'User created successfully' });\r\n    } catch (error) {\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n    });\r\n\r\n    app.listen(PORT, () => {\r\n    console.log(\\`Server running on port \\${PORT}\\`);\r\n    });`}\n</Pre>\n\n### Bash/Shell Commands\n\n<Pre className=\"language-bash\" title=\"install.sh\" description=\"Installation and setup commands\" showLineNumbers={false} enableSearch={false} maxHeight={200}>\n  {`#!/bin/bash\r\n    # Installation and setup script\r\n\r\n    # Install dependencies\r\n    npm install\r\n\r\n    # Run development server\r\n    npm run dev\r\n\r\n    # Build for production\r\n    npm run build\r\n\r\n    # Run tests\r\n    npm test\r\n\r\n    # Lint code\r\n    npm run lint`}\n</Pre>\n\n### Python Code\n\n<Pre className=\"language-python\" title=\"app.py\" description=\"Python Flask API example\" highlightLines={[1, 5, 9]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\n  {`# Python Flask API Example\r\n    from flask import Flask, request, jsonify\r\n    from flask_cors import CORS\r\n    import os\r\n\r\n    app = Flask(__name__)\r\n    CORS(app)\r\n\r\n    @app.route('/api/health', methods=['GET'])\r\n    def health_check():\r\n      return jsonify({\r\n          'status': 'OK',\r\n          'timestamp': datetime.now().isoformat()\r\n      })\r\n\r\n    @app.route('/api/users', methods=['POST'])\r\n    def create_user():\r\n      try:\r\n          data = request.get_json()\r\n          name = data.get('name')\r\n          email = data.get('email')\r\n          \r\n          # User creation logic here\r\n          return jsonify({\r\n              'message': 'User created successfully',\r\n              'user_id': 123\r\n          }), 201\r\n      except Exception as e:\r\n          return jsonify({'error': str(e)}), 500\r\n\r\n    if __name__ == '__main__':\r\n      app.run(debug=True, port=5000)`}\n</Pre>\n\n### SQL Queries\n\n<Pre className=\"language-sql\" title=\"database.sql\" description=\"Database schema and queries\" highlightLines={[1, 5, 9, 13]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\n  {`-- Database Schema and Queries\r\n    CREATE TABLE users (\r\n      id SERIAL PRIMARY KEY,\r\n      name VARCHAR(100) NOT NULL,\r\n      email VARCHAR(100) UNIQUE NOT NULL,\r\n      created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n    );\r\n\r\n    -- Insert user\r\n    INSERT INTO users (name, email) \r\n    VALUES ('John Doe', 'john@example.com');\r\n\r\n    -- Select users with pagination\r\n    SELECT id, name, email, created_at \r\n    FROM users \r\n    ORDER BY created_at DESC \r\n    LIMIT 10 OFFSET 0;\r\n\r\n    -- Update user\r\n    UPDATE users \r\n    SET name = 'Jane Doe', updated_at = CURRENT_TIMESTAMP \r\n    WHERE id = 1;`}\n</Pre>\n",
    "raw": "---\r\ntitle: Pre (Code Block)\r\ndescription: Showcase beautifully styled and customizable code snippets with advanced features like syntax highlighting, line numbering, and line highlighting.\r\n---\r\n\r\n<ComponentPreview name=\"code-block-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add pre`,\r\n      npm: `npx alphabyte-cli@latest add pre`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add pre`,\r\n      bun: `bunx alphabyte-cli@latest add pre`,\r\n      deno: `deno run -A npm:alphabyte-cli add pre`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n  <StepItem title=\"Install Dependencies\">\r\n    First, install Prism.js and other required dependencies:\r\n    <Pre className=\"language-bash\">\r\n      {`npm install prismjs clsx tailwind-merge`}\r\n    </Pre>\r\n  </StepItem>\r\n  <StepItem title=\"Create utils.ts\">\r\n    <ComponentUtilsText />\r\n    <ComponentUtils />\r\n  </StepItem>\r\n  <StepItem title=\"Create Pre Component\">\r\n    <ComponentSource name=\"pre\" />\r\n  </StepItem>\r\n  <StepItem title=\"Create prism-theme.css file\">\r\n    Create a file called <MdxBadge>prism-theme.css</MdxBadge> in your app directory, and apply your Prism.js styles there.\r\n    <Pre className=\"language-css\" folderPath=\"prism-theme.css\" >\r\n    {`\r\n    :root {\r\n  --code-background: #1e1e1e;\r\n  --code-text-color: #e8e8e8;\r\n  --code-toolbar-background: #252526;\r\n  --code-border-color: #404040;\r\n  --code-folder-path-color: #a0a0a0;\r\n  --code-selection-background: rgba(173, 214, 255, 0.15);\r\n  --code-line-numbers-color: #6e7681;\r\n  --code-line-numbers-hover: #8b949e;\r\n  --sidebar-background: #252526;\r\n  --sidebar-header-background: #333333;\r\n  --sidebar-text-color: #cccccc;\r\n  --sidebar-text-hover: #ffffff;\r\n  --sidebar-text-muted: #8a8a8a;\r\n  --sidebar-item-hover-bg: #2a2d2e;\r\n  --sidebar-item-active-bg: #37373d;\r\n  --sidebar-border-color: #474747;\r\n  --sidebar-resize-handle: #0e639c;\r\n  --sidebar-loading-bg: #37373d;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) {\r\n    --code-background: #fafafa;\r\n    --code-text-color: #24292f;\r\n    --code-toolbar-background: #f0f0f0;\r\n    --code-border-color: #d1d9e0;\r\n    --code-folder-path-color: #636c76;\r\n    --code-selection-background: rgba(0, 92, 197, 0.12);\r\n    --code-line-numbers-color: #8c959f;\r\n    --code-line-numbers-hover: #656d76;\r\n    --sidebar-background: #f6f8fa;\r\n    --sidebar-header-background: #f0f3f6;\r\n    --sidebar-text-color: #24292f;\r\n    --sidebar-text-hover: #0969da;\r\n    --sidebar-text-muted: #656d76;\r\n    --sidebar-item-hover-bg: #f3f4f6;\r\n    --sidebar-item-active-bg: #dbeafe;\r\n    --sidebar-border-color: #d0d7de;\r\n    --sidebar-resize-handle: #0969da;\r\n    --sidebar-loading-bg: #f3f4f6;\r\n  }\r\n}\r\n\r\n.code-block-container {\r\n  background-color: var(--code-background);\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  position: relative;\r\n  font-family:\r\n    \"Cascadia Code\", \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\",\r\n    \"Courier New\", monospace;\r\n  overflow: hidden;\r\n}\r\n\r\n.code-block-header {\r\n  background-color: var(--code-toolbar-background);\r\n  border-bottom: 1px solid var(--code-border-color);\r\n  border-radius: 6px 6px 0 0;\r\n}\r\n\r\npre[class*=\"language-\"],\r\ncode[class*=\"language-\"] {\r\n  color: var(--code-text-color);\r\n  font-size: 14px;\r\n  text-shadow: none;\r\n  direction: ltr;\r\n  text-align: left;\r\n  white-space: pre;\r\n  word-spacing: normal;\r\n  word-break: normal;\r\n  line-height: 1.5;\r\n  -moz-tab-size: 4;\r\n  -o-tab-size: 4;\r\n  tab-size: 4;\r\n  -webkit-hyphens: none;\r\n  -moz-hyphens: none;\r\n  -ms-hyphens: none;\r\n  hyphens: none;\r\n  background: transparent;\r\n}\r\n\r\npre[class*=\"language-\"] {\r\n  padding: 0.8rem;\r\n  margin: 0;\r\n  overflow-x: auto;\r\n  border-radius: 0 0 6px 6px;\r\n}\r\n\r\n:not(pre) > code[class*=\"language-\"] {\r\n  padding: 0.3em;\r\n  border-radius: 0.3em;\r\n  color: #e63946;\r\n  background: var(--code-background);\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) :not(pre) > code[class*=\"language-\"] {\r\n    color: #d73a49;\r\n  }\r\n}\r\n\r\npre[class*=\"language-\"]::selection,\r\ncode[class*=\"language-\"]::selection,\r\npre[class*=\"language-\"] *::selection,\r\ncode[class*=\"language-\"] *::selection {\r\n  text-shadow: none;\r\n  background: var(--code-selection-background);\r\n}\r\n\r\n.line-numbers .line-numbers-rows {\r\n  border-right: none !important;\r\n  padding-right: 1rem !important;\r\n  top: -2.5px !important;\r\n  left: -39px !important;\r\n  position: absolute;\r\n  height: 100%;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.line-numbers-rows > span {\r\n  padding: 0;\r\n  border: 0;\r\n  display: block;\r\n  counter-increment: linenumbers;\r\n  color: var(--code-line-numbers-color) !important;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  text-align: right;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.line-numbers-rows > span:hover {\r\n  color: var(--code-line-numbers-hover) !important;\r\n}\r\n\r\n@media print {\r\n  pre[class*=\"language-\"],\r\n  code[class*=\"language-\"] {\r\n    text-shadow: none;\r\n  }\r\n}\r\n\r\n/* Sidebar/File Tree Styles */\r\n.sidebar-container {\r\n  background-color: var(--sidebar-background);\r\n  color: var(--sidebar-text-color);\r\n  border-color: var(--sidebar-border-color);\r\n}\r\n\r\n.sidebar-header {\r\n  background-color: var(--sidebar-header-background);\r\n  border-color: var(--sidebar-border-color);\r\n  color: var(--sidebar-text-color);\r\n}\r\n\r\n.sidebar-text {\r\n  color: var(--sidebar-text-color);\r\n}\r\n\r\n.sidebar-text-muted {\r\n  color: var(--sidebar-text-muted);\r\n}\r\n\r\n.sidebar-item-hover:hover {\r\n  background-color: var(--sidebar-item-hover-bg);\r\n  color: var(--sidebar-text-hover);\r\n}\r\n\r\n.sidebar-item-active {\r\n  background-color: var(--sidebar-item-active-bg);\r\n  color: var(--sidebar-text-hover);\r\n}\r\n\r\n.sidebar-loading {\r\n  background-color: var(--sidebar-loading-bg);\r\n}\r\n\r\n.sidebar-resize-handle {\r\n  background-color: var(--sidebar-resize-handle);\r\n}\r\n\r\n.sidebar-open-button {\r\n  background-color: var(--sidebar-background);\r\n  color: var(--sidebar-text-color);\r\n  border-color: var(--sidebar-border-color);\r\n}\r\n\r\n.sidebar-open-button:hover {\r\n  background-color: var(--sidebar-item-hover-bg);\r\n}\r\n\r\n/* Token styling continues as before... */\r\n.token.comment,\r\n.token.prolog {\r\n  color: #7c9961;\r\n  font-style: italic;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.comment,\r\n  :root:not(.dark) .token.prolog {\r\n    color: #6a7f3a;\r\n  }\r\n}\r\n\r\n.token.doctype .token.doctype-tag {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.doctype .token.doctype-tag {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.doctype .token.name {\r\n  color: #9cdcfe;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.doctype .token.name {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.cdata {\r\n  color: #8a8a8a;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.cdata {\r\n    color: #6a737d;\r\n  }\r\n}\r\n\r\n.token.punctuation,\r\n.language-html .language-css .token.punctuation,\r\n.language-html .language-javascript .token.punctuation {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.punctuation,\r\n  :root:not(.dark) .language-html .language-css .token.punctuation,\r\n  :root:not(.dark) .language-html .language-javascript .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.operator,\r\n.token.entity {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.operator,\r\n  :root:not(.dark) .token.entity {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.operator.arrow {\r\n  color: #5fb3d4;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.operator.arrow {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.keyword {\r\n  color: #e879cb;\r\n  font-weight: 500;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.keyword {\r\n    color: #cf222e;\r\n  }\r\n}\r\n\r\n.token.keyword.module,\r\n.token.keyword.control-flow {\r\n  color: #d286c5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.keyword.module,\r\n  :root:not(.dark) .token.keyword.control-flow {\r\n    color: #8250df;\r\n  }\r\n}\r\n\r\n.token.property,\r\n.token.tag,\r\n.token.boolean,\r\n.token.number,\r\n.token.constant,\r\n.token.symbol,\r\n.token.inserted,\r\n.token.unit {\r\n  color: #c4d9a5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.property,\r\n  :root:not(.dark) .token.tag,\r\n  :root:not(.dark) .token.boolean,\r\n  :root:not(.dark) .token.number,\r\n  :root:not(.dark) .token.constant,\r\n  :root:not(.dark) .token.symbol,\r\n  :root:not(.dark) .token.inserted,\r\n  :root:not(.dark) .token.unit {\r\n    color: #1a7f37;\r\n  }\r\n}\r\n\r\n.token.boolean {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.boolean {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.constant {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.constant {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.selector,\r\n.token.attr-name,\r\n.token.string,\r\n.token.char,\r\n.token.builtin,\r\n.token.deleted {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.selector,\r\n  :root:not(.dark) .token.attr-name,\r\n  :root:not(.dark) .token.string,\r\n  :root:not(.dark) .token.char,\r\n  :root:not(.dark) .token.builtin,\r\n  :root:not(.dark) .token.deleted {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.escape {\r\n  color: #ddc487;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.escape {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.function,\r\n.token.function .token.maybe-class-name {\r\n  color: #ebe2aa;\r\n  font-weight: 500;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.function,\r\n  :root:not(.dark) .token.function .token.maybe-class-name {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.class-name,\r\n.token.maybe-class-name {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.class-name,\r\n  :root:not(.dark) .token.maybe-class-name {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.property,\r\n.token.variable,\r\n.token.imports .token.maybe-class-name,\r\n.token.exports .token.maybe-class-name {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.property,\r\n  :root:not(.dark) .token.variable,\r\n  :root:not(.dark) .token.imports .token.maybe-class-name,\r\n  :root:not(.dark) .token.exports .token.maybe-class-name {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.parameter {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.parameter {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.console {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.console {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.interpolation {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.interpolation {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.punctuation.interpolation-punctuation {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.punctuation.interpolation-punctuation {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.language-css .token.string.url {\r\n  text-decoration: underline;\r\n}\r\n\r\n.token.atrule {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.atrule .token.rule {\r\n  color: #d286c5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.rule {\r\n    color: #8250df;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url .token.function {\r\n  color: #f4e474;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url .token.function {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url .token.punctuation {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.selector {\r\n  color: #ddc487;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.selector {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.tag {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.tag {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.tag .token.punctuation {\r\n  color: #c9c9c9;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.tag .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.attr-name {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-name {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.attr-value,\r\n.token.attr-value .token.punctuation {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-value,\r\n  :root:not(.dark) .token.attr-value .token.punctuation {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.attr-value .token.punctuation.attr-equals {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-value .token.punctuation.attr-equals {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.language-html .token.punctuation {\r\n  color: #9a9a9a;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .language-html .token.punctuation {\r\n    color: #6a7681;\r\n  }\r\n}\r\n\r\npre[class*=\"language-javascript\"],\r\ncode[class*=\"language-javascript\"],\r\npre[class*=\"language-jsx\"],\r\ncode[class*=\"language-jsx\"],\r\ncode[class*=\"language-json\"],\r\npre[class*=\"language-typescript\"],\r\ncode[class*=\"language-typescript\"],\r\npre[class*=\"language-tsx\"],\r\ncode[class*=\"language-tsx\"] {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) pre[class*=\"language-javascript\"],\r\n  :root:not(.dark) code[class*=\"language-javascript\"],\r\n  :root:not(.dark) pre[class*=\"language-jsx\"],\r\n  :root:not(.dark) code[class*=\"language-jsx\"],\r\n  :root:not(.dark) pre[class*=\"language-typescript\"],\r\n  :root:not(.dark) code[class*=\"language-typescript\"],\r\n  :root:not(.dark) pre[class*=\"language-tsx\"],\r\n  :root:not(.dark) code[class*=\"language-tsx\"] {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\npre[class*=\"language-css\"],\r\ncode[class*=\"language-css\"] {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) pre[class*=\"language-css\"],\r\n  :root:not(.dark) code[class*=\"language-css\"] {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\npre[class*=\"language-html\"],\r\ncode[class*=\"language-html\"] {\r\n  color: var(--code-text-color) !important;\r\n}\r\n\r\n.token.regex {\r\n  color: #e67373;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.regex {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.language-regex .token.anchor {\r\n  color: #ebe2aa;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .language-regex .token.anchor {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.namespace {\r\n  opacity: 0.8;\r\n}\r\n\r\n.token.namespace {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.namespace {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.important {\r\n  color: #569cd6;\r\n  font-weight: bold;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.important {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.italic {\r\n  font-style: italic;\r\n}\r\n\r\n.plain-text {\r\n  color: var(--code-text-color);\r\n}\r\n\r\npre[class*=\"language-\"] > code[class*=\"language-\"] {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\npre[class*=\"language-\"]:focus-visible {\r\n  outline: 2px solid #0969da;\r\n  outline-offset: 2px;\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  pre[class*=\"language-\"]:focus-visible {\r\n    outline-color: #58a6ff;\r\n  }\r\n}\r\n\r\n.token.keyword,\r\n.token.function {\r\n  text-shadow: none;\r\n}\r\n\r\n.token.comment .token.keyword {\r\n  color: inherit;\r\n  font-weight: normal;\r\n}\r\n\r\n    `}\r\n    </Pre>\r\n    <Note type=\"note\" className=\"!mb-5 !my-3\">\r\n      You can customize it to look like Visual Studio Code dark theme or any style you prefer.\r\n    </Note>\r\n  </StepItem>\r\n  <StepItem title=\"Adding a code language\">\r\n    This step is <MdxBadge>Optional</MdxBadge>.  \r\n    It shows the language of your code block.  \r\n    You can pass <MdxBadge>Images</MdxBadge> or <MdxBadge>Icons</MdxBadge>.  \r\n    If you choose icons, make sure the library you use allows color customization.  \r\n    Example: create a file <MdxBadge>language-icon.ts</MdxBadge> with mappings for `js`, `ts`, `html`, etc.\r\n    <Pre className=\"language-typescript\" folderPath=\"settings/LanguageIcon.tsx\" >\r\n    {`\r\n    import { CustomImage } from \"@/components/custome-image\"\r\nimport { FileJson2, Terminal } from \"lucide-react\"\r\nimport type { JSX } from \"react\"\r\n\r\nexport const languageIcons: Record<string, JSX.Element> = {\r\n  javascript: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"javascript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  js: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"javascript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  jsx: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"jsx\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  typescript: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  ts: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  tsx: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  html: (\r\n    <CustomImage\r\n      src=\"/icons/html.svg\"\r\n      alt=\"html\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  css: (\r\n    <CustomImage\r\n      src=\"/icons/css.svg\"\r\n      alt=\"css\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  bash: <Terminal className=\"w-[18px] h-[18px] dark:text-gray-100 text-gray-950 rounded-lg\" />,\r\n  json: <FileJson2 className=\"w-[18px] h-[18px] text-yellow-500 rounded-lg\" />\r\n}\r\n    `}\r\n    </Pre>\r\n  </StepItem>\r\n  <StepItem title=\"Now, feel free to use it and customize it\" />\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-4\">\r\n<Pre>\r\n{`import Pre from \"@/components/ui/pre\"`}\r\n</Pre>\r\n<Pre>\r\n{`import Pre from \"@/components/ui/pre\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst CodeBlockDemo = ({ className }: { className: string }) => {\r\n  const ExampleCode = \\`function MyComponent(props) {\r\n    return (\r\n      <div>\r\n        <h1>Hello, {props.name}!</h1>\r\n        <p>This is an example React component.</p>\r\n      </div>\r\n    )\r\n  };\\`\r\n\r\n  return (\r\n    <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}>\r\n      {ExampleCode}\r\n    </Pre>\r\n  )\r\n}\r\n\r\nexport default CodeBlockDemo`}\r\n</Pre>\r\n</div>\r\n\r\n## Examples\r\n\r\n### TypeScript/React Component\r\n\r\n<Pre className=\"language-tsx\" title=\"MyComponent.tsx\" description=\"A reusable React component with TypeScript\" highlightLines={[4, 8, 12]} showLineNumbers={true} enableSearch={true} maxHeight={400}>\r\n{`// React Component Example\r\nimport React from 'react'\r\nimport { Button } from '@/components/ui/button'\r\n\r\ninterface Props {\r\n  title: string\r\n  description?: string\r\n  onAction?: () => void\r\n}\r\n\r\nexport function MyComponent({ title, description, onAction }: Props) {\r\n  return (\r\n    <div className=\"p-6 bg-background border rounded-lg\">\r\n      <h2 className=\"text-2xl font-bold mb-2\">{title}</h2>\r\n      {description && (\r\n        <p className=\"text-muted-foreground mb-4\">{description}</p>\r\n      )}\r\n      <Button onClick={onAction} className=\"w-full\">\r\n        Click me\r\n      </Button>\r\n    </div>\r\n  )\r\n}`}\r\n</Pre>\r\n\r\n### CSS Styles\r\n\r\n<Pre className=\"language-css\" title=\"styles.css\" description=\"Tailwind CSS custom styles\" highlightLines={[2, 6, 10]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\r\n{`/* Custom Styles */\r\n.my-component {\r\n  @apply p-6 bg-background border rounded-lg;\r\n}\r\n\r\n.my-component h2 {\r\n  @apply text-2xl font-bold mb-2;\r\n}\r\n\r\n.my-component p {\r\n  @apply text-muted-foreground mb-4;\r\n}\r\n\r\n.my-component button {\r\n  @apply w-full;\r\n}\r\n\r\n/* Responsive Design */\r\n@media (max-width: 768px) {\r\n  .my-component {\r\n    @apply p-4;\r\n  }\r\n}`}\r\n</Pre>\r\n\r\n### JSON Configuration\r\n\r\n<Pre className=\"language-json\" title=\"package.json\" description=\"Project dependencies and scripts\" highlightLines={[1, 5, 9]} showLineNumbers={true} enableSearch={true} maxHeight={250}>\r\n{`{\r\n  \"name\": \"my-component\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"A reusable React component\",\r\n  \"main\": \"index.tsx\",\r\n  \"scripts\": {\r\n    \"build\": \"tsc\",\r\n    \"dev\": \"next dev\",\r\n    \"lint\": \"eslint . --ext .ts,.tsx\",\r\n    \"test\": \"jest\"\r\n  },\r\n  \"dependencies\": {\r\n    \"react\": \"^18.0.0\",\r\n    \"next\": \"^14.0.0\",\r\n    \"@types/react\": \"^18.0.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"typescript\": \"^5.0.0\",\r\n    \"tailwindcss\": \"^3.0.0\"\r\n  }\r\n}`}\r\n</Pre>\r\n\r\n### JavaScript/Node.js\r\n\r\n<Pre className=\"language-javascript\" title=\"server.js\" description=\"Express.js server example\" highlightLines={[3, 7, 15]} showLineNumbers={true} enableSearch={true} maxHeight={350}>\r\n{`// Express.js Server Example\r\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst helmet = require('helmet');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3000;\r\n\r\n// Middleware\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.get('/api/health', (req, res) => {\r\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\r\n});\r\n\r\napp.post('/api/users', async (req, res) => {\r\n  try {\r\n    const { name, email } = req.body;\r\n    // User creation logic here\r\n    res.status(201).json({ message: 'User created successfully' });\r\n  } catch (error) {\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(\\`Server running on port \\${PORT}\\`);\r\n});`}\r\n</Pre>\r\n\r\n### Bash/Shell Commands\r\n\r\n<Pre className=\"language-bash\" title=\"install.sh\" description=\"Installation and setup commands\" showLineNumbers={false} enableSearch={false} maxHeight={200}>\r\n{`#!/bin/bash\r\n# Installation and setup script\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Run development server\r\nnpm run dev\r\n\r\n# Build for production\r\nnpm run build\r\n\r\n# Run tests\r\nnpm test\r\n\r\n# Lint code\r\nnpm run lint`}\r\n</Pre>\r\n\r\n### Python Code\r\n\r\n<Pre className=\"language-python\" title=\"app.py\" description=\"Python Flask API example\" highlightLines={[1, 5, 9]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\r\n{`# Python Flask API Example\r\nfrom flask import Flask, request, jsonify\r\nfrom flask_cors import CORS\r\nimport os\r\n\r\napp = Flask(__name__)\r\nCORS(app)\r\n\r\n@app.route('/api/health', methods=['GET'])\r\ndef health_check():\r\n    return jsonify({\r\n        'status': 'OK',\r\n        'timestamp': datetime.now().isoformat()\r\n    })\r\n\r\n@app.route('/api/users', methods=['POST'])\r\ndef create_user():\r\n    try:\r\n        data = request.get_json()\r\n        name = data.get('name')\r\n        email = data.get('email')\r\n        \r\n        # User creation logic here\r\n        return jsonify({\r\n            'message': 'User created successfully',\r\n            'user_id': 123\r\n        }), 201\r\n    except Exception as e:\r\n        return jsonify({'error': str(e)}), 500\r\n\r\nif __name__ == '__main__':\r\n    app.run(debug=True, port=5000)`}\r\n</Pre>\r\n\r\n### SQL Queries\r\n\r\n<Pre className=\"language-sql\" title=\"database.sql\" description=\"Database schema and queries\" highlightLines={[1, 5, 9, 13]} showLineNumbers={true} enableSearch={true} maxHeight={300}>\r\n{`-- Database Schema and Queries\r\nCREATE TABLE users (\r\n    id SERIAL PRIMARY KEY,\r\n    name VARCHAR(100) NOT NULL,\r\n    email VARCHAR(100) UNIQUE NOT NULL,\r\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\r\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\r\n);\r\n\r\n-- Insert user\r\nINSERT INTO users (name, email) \r\nVALUES ('John Doe', 'john@example.com');\r\n\r\n-- Select users with pagination\r\nSELECT id, name, email, created_at \r\nFROM users \r\nORDER BY created_at DESC \r\nLIMIT 10 OFFSET 0;\r\n\r\n-- Update user\r\nUPDATE users \r\nSET name = 'Jane Doe', updated_at = CURRENT_TIMESTAMP \r\nWHERE id = 1;`}\r\n</Pre>"
  },
  {
    "slug": "/components/product-card",
    "title": "Product Card",
    "description": "A customizable product card component for displaying product information such as image, title, description, price, and actions.",
    "content": "<ComponentPreview name=\"product-card-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add product-card`,\r\n            npm: `npx alphabyte-cli@latest add product-card`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add product-card`,\r\n            bun: `bunx alphabyte-cli@latest add product-card`,\r\n            deno: `deno run -A npm:alphabyte-cli add product-card`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, install the required dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Product Card Component\">\n          <ComponentSource name=\"product-card-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ProductCard } from \"@/components/ui/product-card\"\r\n\r\n      const ProductCardDemo = () => {\r\n      return (\r\n        <ProductCard\r\n          image=\"/images/sample-product.jpg\"\r\n          title=\"Wireless Headphones\"\r\n          description=\"High-quality wireless headphones with noise cancellation.\"\r\n          price=\"$199\"\r\n          ctaLabel=\"Add to Cart\"\r\n          onCtaClick={() => alert(\"Added to cart!\")}\r\n        />\r\n      )\r\n      }\r\n\r\n      export default ProductCardDemo`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Product Card\r\ndescription: A customizable product card component for displaying product information such as image, title, description, price, and actions.\r\n---\r\n\r\n<ComponentPreview name=\"product-card-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add product-card`,\r\n      npm: `npx alphabyte-cli@latest add product-card`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add product-card`,\r\n      bun: `bunx alphabyte-cli@latest add product-card`,\r\n      deno: `deno run -A npm:alphabyte-cli add product-card`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, install the required dependencies:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Product Card Component\">\r\n      <ComponentSource name=\"product-card-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import { ProductCard } from \"@/components/ui/product-card\"\r\n\r\nconst ProductCardDemo = () => {\r\n  return (\r\n    <ProductCard\r\n      image=\"/images/sample-product.jpg\"\r\n      title=\"Wireless Headphones\"\r\n      description=\"High-quality wireless headphones with noise cancellation.\"\r\n      price=\"$199\"\r\n      ctaLabel=\"Add to Cart\"\r\n      onCtaClick={() => alert(\"Added to cart!\")}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ProductCardDemo`}\r\n</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/scroll-area",
    "title": "Scroll Area",
    "description": "Scroll Area Component",
    "content": "<ComponentPreview name=\"scroll-area-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add scroll-area`,\r\n            npm: `npx alphabyte-cli@latest add scroll-area`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add scroll-area`,\r\n            bun: `bunx alphabyte-cli@latest add scroll-area`,\r\n            deno: `deno run -A npm:alphabyte-cli add scroll-area`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose md:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Scroll-Area Component\">\n          <ComponentSource name=\"scroll-area\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ScrollArea } from \"@/components/ui/scroll-area\"`}\n  </Pre>\n\n  <Pre>\n    {`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\r\n      Jokester began sneaking into the castle in the middle of the night and leaving\r\n      jokes all over the place: under the king's pillow, in his soup, even in the\r\n      royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\r\n      then, one day, the people of the kingdom discovered that the jokes left by\r\n      Jokester were so funny that they couldn't help but laugh. And once they\r\n      started laughing, they couldn't stop.\r\n      </ScrollArea>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Horizontal\n\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\n",
    "raw": "---\r\ntitle: Scroll Area\r\ndescription: Scroll Area Component\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/scroll-area\r\n  api: https://www.radix-ui.com/docs/primitives/components/scroll-area#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"scroll-area-demo\" />\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add scroll-area`,\r\n      npm: `npx alphabyte-cli@latest add scroll-area`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add scroll-area`,\r\n      bun: `bunx alphabyte-cli@latest add scroll-area`,\r\n      deno: `deno run -A npm:alphabyte-cli add scroll-area`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"Install Dependencies\">\r\nFirst, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\r\n\r\n<Pre className=\"language-bash\">\r\n  {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\r\n</Pre>\r\n\r\n</StepItem>\r\n  <StepItem title=\"Create utils.ts\"> \r\n  <ComponentUtilsText/>\r\n  <ComponentUtils/>\r\n  </StepItem>\r\n<StepItem title=\"Create Scroll-Area Component\">\r\n  <ComponentSource name=\"scroll-area\" />\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { ScrollArea } from \"@/components/ui/scroll-area\"`}</Pre>\r\n<Pre>{`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\r\n  Jokester began sneaking into the castle in the middle of the night and leaving\r\n  jokes all over the place: under the king's pillow, in his soup, even in the\r\n  royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\r\n  then, one day, the people of the kingdom discovered that the jokes left by\r\n  Jokester were so funny that they couldn't help but laugh. And once they\r\n  started laughing, they couldn't stop.\r\n</ScrollArea>`}</Pre>\r\n</div>\r\n## Examples\r\n### Horizontal\r\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\r\n"
  },
  {
    "slug": "/components/separator",
    "title": "Separator",
    "description": "Separator",
    "content": "<ComponentPreview name=\"separator-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add separator`,\r\n            npm: `npx alphabyte-cli@latest add separator`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add separator`,\r\n            bun: `bunx alphabyte-cli@latest add separator`,\r\n            deno: `deno run -A npm:alphabyte-cli add separator`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you need to install dependencies:\n\n          <Pre>\n            {`npm install clsx tailwind-merge @radix-ui/react-separator`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Separator Component\">\n          <ComponentSource name=\"separator-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Separator } from \"@/components/ui/separator\"`}\n  </Pre>\n\n  <Pre>\n    {`<Separator />`}\n  </Pre>\n</div>\n\n## Examples\n\n### Vertical\n\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\n\n### Weight\n\n#### Ultralight\n\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\n\n#### Light\n\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\n\n#### Regular\n\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\n",
    "raw": "---\r\ntitle: Separator\r\ndescription: Separator\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/separator\r\n  api: https://www.radix-ui.com/docs/primitives/components/separator#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"separator-demo\" />\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add separator`,\r\n      npm: `npx alphabyte-cli@latest add separator`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add separator`,\r\n      bun: `bunx alphabyte-cli@latest add separator`,\r\n      deno: `deno run -A npm:alphabyte-cli add separator`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, you need to install dependencies:\r\n      <Pre>{`npm install clsx tailwind-merge @radix-ui/react-separator`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Separator Component\">\r\n      <ComponentSource name=\"separator-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Separator } from \"@/components/ui/separator\"`}</Pre>\r\n  <Pre>{`<Separator />`}</Pre>\r\n</div>\r\n## Examples \r\n### Vertical\r\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\r\n### Weight\r\n#### Ultralight\r\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\r\n#### Light\r\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\r\n#### Regular\r\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\r\n"
  },
  {
    "slug": "/components/sheet",
    "title": "Sheet",
    "description": "A sheet is a component that slides in from the bottom of the screen, typically used for displaying additional content or options without navigating away from the current screen.",
    "content": "<ComponentPreview name=\"sheet-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add sheet`,\r\n            npm: `npx alphabyte-cli@latest add sheet`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add sheet`,\r\n            bun: `bunx alphabyte-cli@latest add sheet`,\r\n            deno: `deno run -A npm:alphabyte-cli add sheet`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose mdx:px-0 px-4\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you need to install dependencies:\n\n          <Pre>\n            {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Sheet Component\">\n          <ComponentSource name=\"sheet-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Sheet,\r\n        SheetClose,\r\n        SheetContent,\r\n        SheetDescription,\r\n        SheetFooter,\r\n        SheetHeader,\r\n        SheetTitle,\r\n        SheetTrigger\r\n      } from '@/components/ui/sheet';`}\n  </Pre>\n\n  <Pre>\n    {`<Sheet>\r\n        <SheetTrigger asChild>\r\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n                <Settings size={16} />\r\n                Open Settings\r\n            </Button>\r\n        </SheetTrigger>\r\n        <SheetContent side=\"right\">\r\n        <SheetHeader>\r\n            <SheetTitle>Settings</SheetTitle>\r\n            <SheetDescription>Configure your application preferences here</SheetDescription>\r\n        </SheetHeader>\r\n        <div className=\"py-6\">\r\n            <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Dark Mode</Label>\r\n                    <Checkbox id=\"dark-mood\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Notification</Label>\r\n                    <Checkbox id=\"notification\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Email Updates</Label>\r\n                    <Checkbox id=\"email-updates\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <SheetFooter>\r\n            <SheetClose asChild>\r\n                <Button>Save Changes</Button>\r\n            </SheetClose>\r\n        </SheetFooter>\r\n      </SheetContent>\r\n      </Sheet>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Control Side\n\n#### Top\n\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\n\n#### Right\n\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\n\n#### Bottom\n\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\n\n#### Left\n\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\n",
    "raw": "---\r\ntitle: Sheet\r\ndescription: A sheet is a component that slides in from the bottom of the screen, typically used for displaying additional content or options without navigating away from the current screen.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"sheet-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add sheet`,\r\n      npm: `npx alphabyte-cli@latest add sheet`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add sheet`,\r\n      bun: `bunx alphabyte-cli@latest add sheet`,\r\n      deno: `deno run -A npm:alphabyte-cli add sheet`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose mdx:px-0 px-4\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, you need to install dependencies:\r\n      <Pre>{`npm install clsx tailwind-merge @radix-ui/react-dialog`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Sheet Component\">\r\n      <ComponentSource name=\"sheet-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    Sheet,\r\n    SheetClose,\r\n    SheetContent,\r\n    SheetDescription,\r\n    SheetFooter,\r\n    SheetHeader,\r\n    SheetTitle,\r\n    SheetTrigger\r\n} from '@/components/ui/sheet';`}</Pre>\r\n  <Pre>{`<Sheet>\r\n    <SheetTrigger asChild>\r\n        <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n            <Settings size={16} />\r\n            Open Settings\r\n        </Button>\r\n    </SheetTrigger>\r\n    <SheetContent side=\"right\">\r\n    <SheetHeader>\r\n        <SheetTitle>Settings</SheetTitle>\r\n        <SheetDescription>Configure your application preferences here</SheetDescription>\r\n    </SheetHeader>\r\n    <div className=\"py-6\">\r\n        <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Dark Mode</Label>\r\n                <Checkbox id=\"dark-mood\" />\r\n            </div>\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Notification</Label>\r\n                <Checkbox id=\"notification\" />\r\n            </div>\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Email Updates</Label>\r\n                <Checkbox id=\"email-updates\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <SheetFooter>\r\n        <SheetClose asChild>\r\n            <Button>Save Changes</Button>\r\n        </SheetClose>\r\n    </SheetFooter>\r\n  </SheetContent>\r\n</Sheet>`}</Pre>\r\n</div>\r\n\r\n## Examples\r\n\r\n### Control Side\r\n\r\n#### Top\r\n\r\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\r\n#### Right\r\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\r\n#### Bottom\r\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\r\n#### Left\r\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\r\n"
  },
  {
    "slug": "/components/sonner",
    "title": "Sonner",
    "description": "An opinionated toast component for React.",
    "content": "<ComponentPreview name=\"sonner-demo\" />\n\n## About\n\n<MdxBadge>Sonner</MdxBadge> is built on top of\r\n[Sonner](https://sonner.emilkowal.ski/) by\r\n[emilkowalski\\_](https://x.com/emilkowalski_).\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add sonner`,\r\n            npm: `npx alphabyte-cli@latest add sonner`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add sonner`,\r\n            bun: `bunx alphabyte-cli@latest add sonner`,\r\n            deno: `deno run -A npm:alphabyte-cli add sonner`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First, you need to install dependencies:\n\n          <Pre>\n            {`npm install clsx tailwind-merge sonner`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Sonner Component\">\n          <ComponentSource name=\"sonner-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Edit layout.tsx for Toaster component\">\n          in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"} <MdxBadge> \\<Toaster /></MdxBadge>{\" \"} to show the toast :\n\n          <Pre highlightLines={[8]}>\n            {`import { Toaster } from \"@/components/ui/sonner\"\r\n\r\n              export default function RootLayout({ children }) {\r\n              return (\r\n                <html lang=\"en\">\r\n                  <body>\r\n                    <main>{children}</main>\r\n                    <Toaster />\r\n                  </body>\r\n                </html>\r\n               )\r\n              }`}\n          </Pre>\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { toast } from \"sonner\"`}\n  </Pre>\n\n  <Pre>\n    {`toast(\"Event has been created.\")`}\n  </Pre>\n</div>\n\n## Types\n\n### Success\n\n<ComponentPreview name=\"sonner-demo\" variant=\"success\" />\n\n### Info\n\n<ComponentPreview name=\"sonner-demo\" variant=\"info\" />\n\n### Warning\n\n<ComponentPreview name=\"sonner-demo\" variant=\"warning\" />\n\n### Error\n\n<ComponentPreview name=\"sonner-demo\" variant=\"error\" />\n\n### Loading\n\n<ComponentPreview name=\"sonner-demo\" variant=\"loading\" />\n\n### Custom\n\n<ComponentPreview name=\"sonner-demo\" variant=\"custom\" />\n",
    "raw": "---\r\ntitle: Sonner\r\ndescription: An opinionated toast component for React.\r\nlinks:\r\n  doc: https://sonner.emilkowal.ski\r\n---\r\n\r\n<ComponentPreview name=\"sonner-demo\" />\r\n## About\r\n<MdxBadge>Sonner</MdxBadge> is built on top of\r\n[Sonner](https://sonner.emilkowal.ski/) by\r\n[emilkowalski_](https://x.com/emilkowalski_). \r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add sonner`,\r\n      npm: `npx alphabyte-cli@latest add sonner`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add sonner`,\r\n      bun: `bunx alphabyte-cli@latest add sonner`,\r\n      deno: `deno run -A npm:alphabyte-cli add sonner`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First, you need to install dependencies:\r\n      <Pre>{`npm install clsx tailwind-merge sonner`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Sonner Component\">\r\n      <ComponentSource name=\"sonner-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"Edit layout.tsx for Toaster component\">\r\n    in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"} <MdxBadge> \\<Toaster /></MdxBadge>{\" \"} to show the toast :\r\n      <Pre\r\n        highlightLines={[8]}\r\n      >{`import { Toaster } from \"@/components/ui/sonner\"\r\n \r\nexport default function RootLayout({ children }) {\r\n  return (\r\n    <html lang=\"en\">\r\n      <body>\r\n        <main>{children}</main>\r\n        <Toaster />\r\n      </body>\r\n    </html>\r\n   )\r\n}`}</Pre>\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { toast } from \"sonner\"`}</Pre>\r\n  <Pre>{`toast(\"Event has been created.\")`}</Pre>\r\n</div>\r\n\r\n## Types\r\n\r\n### Success\r\n\r\n<ComponentPreview name=\"sonner-demo\" variant=\"success\" />\r\n### Info\r\n<ComponentPreview name=\"sonner-demo\" variant=\"info\" />\r\n### Warning\r\n<ComponentPreview name=\"sonner-demo\" variant=\"warning\" />\r\n### Error\r\n<ComponentPreview name=\"sonner-demo\" variant=\"error\" />\r\n### Loading\r\n<ComponentPreview name=\"sonner-demo\" variant=\"loading\" />\r\n### Custom\r\n<ComponentPreview name=\"sonner-demo\" variant=\"custom\" />\r\n"
  },
  {
    "slug": "/components/step",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "<ComponentPreview name=\"step-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add step`,\r\n            npm: `npx alphabyte-cli@latest add step`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add step`,\r\n            bun: `bunx alphabyte-cli@latest add step`,\r\n            deno: `deno run -A npm:alphabyte-cli add step`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm i clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Step component\">\n          <ComponentSource name=\"step-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Be comfortable to use it and make it yours\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Step, StepItem } from \"@/components/library/step\"`}\n  </Pre>\n\n  <Pre>\n    {`<Step>\r\n            <StepItem title=\"development\">localhost:3000</StepItem>\r\n            <StepItem title=\"production\">localhost:3000</StepItem>\r\n        </Step>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Steps\r\ndescription: This section provides an overview of Introduction.\r\n---\r\n\r\n<ComponentPreview name=\"step-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add step`,\r\n      npm: `npx alphabyte-cli@latest add step`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add step`,\r\n      bun: `bunx alphabyte-cli@latest add step`,\r\n      deno: `deno run -A npm:alphabyte-cli add step`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">{`npm i clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Step component\">\r\n      <ComponentSource name=\"step-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"not-prose space-y-4\">\r\n  <Pre>{`import { Step, StepItem } from \"@/components/library/step\"`}</Pre>\r\n  <Pre>\r\n    {`<Step>\r\n        <StepItem title=\"development\">localhost:3000</StepItem>\r\n        <StepItem title=\"production\">localhost:3000</StepItem>\r\n    </Step>`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/switch",
    "title": "Switch Component",
    "description": "A switch component that allows users to toggle between two states.",
    "content": "<ComponentPreview name=\"switch-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add switch`,\r\n            npm: `npx alphabyte-cli@latest add switch`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add switch`,\r\n            bun: `bunx alphabyte-cli@latest add switch`,\r\n            deno: `deno run -A npm:alphabyte-cli add switch`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm i clsx tailwind-merge`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create switch component\">\n          <ComponentSource name=\"switch-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Be comfortable to use it and make it yours\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Switch } from \"@/components/ui/switch\"`}\n  </Pre>\n\n  <Pre>\n    {`<Switch\r\n            size=\"md\"\r\n            color=\"default\"\r\n            label=\"Enable Notifications\"\r\n            tooltip=\"Toggle to enable or disable notifications\"\r\n            checked={switches.notifications}\r\n            onCheckedChange={updateSwitch(\"notifications\")}\r\n        />`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Switch Component\r\ndescription: A switch component that allows users to toggle between two states.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/switch\r\n  api: https://www.radix-ui.com/docs/primitives/components/switch#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"switch-demo\" />\r\n## Installation\r\n\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add switch`,\r\n      npm: `npx alphabyte-cli@latest add switch`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add switch`,\r\n      bun: `bunx alphabyte-cli@latest add switch`,\r\n      deno: `deno run -A npm:alphabyte-cli add switch`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">{`npm i clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create switch component\">\r\n      <ComponentSource name=\"switch-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n<div className=\"not-prose space-y-4\">\r\n  <Pre>{`import { Switch } from \"@/components/ui/switch\"`}</Pre>\r\n  <Pre>\r\n    {`<Switch\r\n        size=\"md\"\r\n        color=\"default\"\r\n        label=\"Enable Notifications\"\r\n        tooltip=\"Toggle to enable or disable notifications\"\r\n        checked={switches.notifications}\r\n        onCheckedChange={updateSwitch(\"notifications\")}\r\n    />`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/tabs",
    "title": "Tabs",
    "description": "A tabs component",
    "content": "<ComponentPreview name=\"tabs-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add tabs`,\r\n            npm: `npx alphabyte-cli@latest add tabs`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add tabs`,\r\n            bun: `bunx alphabyte-cli@latest add tabs`,\r\n            deno: `deno run -A npm:alphabyte-cli add tabs`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Tabs component\">\n          <ComponentSource name=\"tabs-demo\" />\n        </StepItem>\n\n        <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <p className=\"text-base\">\n    First import the tabs component in your file like this:\n  </p>\n\n  <Pre>\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\n  </Pre>\n\n  <p className=\"text-base\">Then you can use the tabs component like this:</p>\n\n  <Pre>\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\r\n             <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\r\n                <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\r\n                   tab 1\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\r\n                   tab 2\r\n                </TabsTrigger>\r\n             </TabsList>\r\n             <div>\r\n                <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\r\n                <div>\r\n                   Content One\r\n                </div>\r\n                </TabsContent>\r\n                <TabsContent value=\"code\" className=\"rounded-xl\">\r\n                <div>Content two</div>\r\n                </TabsContent>\r\n             </div>\r\n          </Tabs>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Vertical Tabs\n\n<ComponentPreview name=\"tabs-vertical-demo\" />\n",
    "raw": "---\r\ntitle: Tabs\r\ndescription: A tabs component\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/tabs\r\n  api: https://www.radix-ui.com/docs/primitives/components/tabs#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"tabs-demo\" />\r\n\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add tabs`,\r\n      npm: `npx alphabyte-cli@latest add tabs`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add tabs`,\r\n      bun: `bunx alphabyte-cli@latest add tabs`,\r\n      deno: `deno run -A npm:alphabyte-cli add tabs`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Tabs component\">\r\n      <ComponentSource name=\"tabs-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n\r\n## Usage\r\n\r\n<div className=\"not-prose space-y-4\">\r\n  <p className=\"text-base\">\r\n    First import the tabs component in your file like this:\r\n  </p>\r\n  <Pre>\r\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\r\n  </Pre>\r\n  <p className=\"text-base\">Then you can use the tabs component like this:</p>\r\n  <Pre>\r\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\r\n         <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\r\n            <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\r\n               tab 1\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\r\n               tab 2\r\n            </TabsTrigger>\r\n         </TabsList>\r\n         <div>\r\n            <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\r\n            <div>\r\n               Content One\r\n            </div>\r\n            </TabsContent>\r\n            <TabsContent value=\"code\" className=\"rounded-xl\">\r\n            <div>Content two</div>\r\n            </TabsContent>\r\n         </div>\r\n      </Tabs>`}\r\n  </Pre>\r\n</div>\r\n\r\n## Examples\r\n### Vertical Tabs\r\n<ComponentPreview name=\"tabs-vertical-demo\" /> "
  },
  {
    "slug": "/components/tooltip",
    "title": "Tooltip",
    "description": "A tooltip is a small pop-up box that appears when a user hovers over an element, providing additional information about that element.",
    "content": "<ComponentPreview name=\"tooltip-demo\" />\n\n## Installation\n\n<CliCodeTabs>\n  <TabsContent value=\"cli\">\n    <CliCodeTabs>\n      {(() => {\r\n          const cmd = {\r\n            pnpm: `pnpm dlx alphabyte-cli@latest add tooltip`,\r\n            npm: `npx alphabyte-cli@latest add tooltip`,\r\n            yarn: `yarn dlx alphabyte-cli@latest add tooltip`,\r\n            bun: `bunx alphabyte-cli@latest add tooltip`,\r\n            deno: `deno run -A npm:alphabyte-cli add tooltip`,\r\n          }\r\n          return (\r\n            <CodeCommands\r\n              __pnpm__={cmd.pnpm}\r\n              __npm__={cmd.npm}\r\n              __yarn__={cmd.yarn}\r\n              __bun__={cmd.bun}\r\n              __deno__={cmd.deno}\r\n            />\r\n          )\r\n        })()}\n    </CliCodeTabs>\n  </TabsContent>\n\n  <TabsContent value=\"manual\">\n    <div className=\"not-prose px-4 md:px-0\">\n      <Step>\n        <StepItem title=\"Install Dependencies\">\n          First , you need to install dependencies:\n\n          <Pre className=\"language-bash\">\n            {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\n          </Pre>\n        </StepItem>\n\n        <StepItem title=\"Create utils.ts\">\n          <ComponentUtilsText />\n\n          <ComponentUtils />\n        </StepItem>\n\n        <StepItem title=\"Create Tooltip Component\">\n          <ComponentSource name=\"tooltip-demo\" />\n        </StepItem>\n      </Step>\n    </div>\n  </TabsContent>\n</CliCodeTabs>\n\n## Usage\n\n<div className=\"space-y-6\">\n  <Pre>\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\n  </Pre>\n\n  <Pre>\n    {`<TooltipProvider>\r\n        <Tooltip>\r\n            <TooltipTrigger asChild>Hover</TooltipTrigger>\r\n                <TooltipContent >\r\n                    <p>Default Tooltip</p>\r\n                </TooltipContent>\r\n            </Tooltip>\r\n        </TooltipProvider>\r\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Top Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\n\n### Right Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\n\n### Bottom Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\n\n### Left Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\n\n### Tooltip with delay\n\nyou can set a delay for the tooltip to appear after\r\nhovering over the trigger element. This can be useful to prevent the tooltip\r\nfrom appearing too quickly when the user hovers over the trigger element.\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />\n",
    "raw": "---\r\ntitle: Tooltip\r\ndescription: A tooltip is a small pop-up box that appears when a user hovers over an element, providing additional information about that element.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/tooltip\r\n  api: https://www.radix-ui.com/docs/primitives/components/tooltip#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"tooltip-demo\" />\r\n## Installation\r\n<CliCodeTabs>\r\n\r\n<TabsList>\r\n  <TabsTrigger value=\"cli\">CLI</TabsTrigger>\r\n  <TabsTrigger value=\"manual\">Manual</TabsTrigger>\r\n</TabsList>\r\n\r\n<TabsContent value=\"cli\">\r\n<CliCodeTabs>\r\n  {(() => {\r\n    const cmd = {\r\n      pnpm: `pnpm dlx alphabyte-cli@latest add tooltip`,\r\n      npm: `npx alphabyte-cli@latest add tooltip`,\r\n      yarn: `yarn dlx alphabyte-cli@latest add tooltip`,\r\n      bun: `bunx alphabyte-cli@latest add tooltip`,\r\n      deno: `deno run -A npm:alphabyte-cli add tooltip`,\r\n    }\r\n    return (\r\n      <CodeCommands\r\n        __pnpm__={cmd.pnpm}\r\n        __npm__={cmd.npm}\r\n        __yarn__={cmd.yarn}\r\n        __bun__={cmd.bun}\r\n        __deno__={cmd.deno}\r\n      />\r\n    )\r\n  })()}\r\n</CliCodeTabs>\r\n</TabsContent>\r\n\r\n<TabsContent value=\"manual\">\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"Install Dependencies\">\r\n      First , you need to install dependencies:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"Create utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"Create Tooltip Component\">\r\n      <ComponentSource name=\"tooltip-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n</TabsContent>\r\n</CliCodeTabs>\r\n## Usage\r\n<div className=\"space-y-6\">\r\n  <Pre>\r\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\r\n  </Pre>\r\n  <Pre>\r\n    {`<TooltipProvider>\r\n    <Tooltip>\r\n        <TooltipTrigger asChild>Hover</TooltipTrigger>\r\n            <TooltipContent >\r\n                <p>Default Tooltip</p>\r\n            </TooltipContent>\r\n        </Tooltip>\r\n    </TooltipProvider>\r\n`}\r\n  </Pre>\r\n</div>\r\n## Examples \r\n### Top Tooltip\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\r\n### Right Tooltip\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\r\n### Bottom Tooltip\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\r\n### Left Tooltip\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\r\n### Tooltip with delay \r\nyou can set a delay for the tooltip to appear after\r\nhovering over the trigger element. This can be useful to prevent the tooltip\r\nfrom appearing too quickly when the user hovers over the trigger element.\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />\r\n"
  },
  {
    "slug": "/installation",
    "title": "Installation",
    "description": "Your gateway to mastering modern software development.",
    "content": "to use our component you should using [next.js](https://nextjs.org/)\n\n## System Requirements\n\n* [Node.js 18.18](https://nodejs.org/) or later.\n* macOS, Windows (including WSL), and Linux are supported.\n\n<div className=\"not-prose px-4\">\n  <Note>If Your using windows recommended to use WSL with windows to have all the features in linux <br /> but if you don't have don't worry windows s also great choice</Note>\n\n  <Step className=\"mt-6\">\n    <StepItem title=\"Step 1: Create Your Next.js Project\">\n      Start by running the following command in your terminal to set up a new Next.js project:\\\n      To verify installation, run:\n\n      <Pre>\n        {`npx create-next-app@latest`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Step 2: Configure Your Project\">\n      During the setup, you'll be prompted to configure your project. Below is an example of the default prompts and options you'll encounter:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes `}\n      </Pre>\n\n      <Note type=\"note\" title=\"Important Note\">\n        The above configurations are entirely customizable. If you choose to enable **TypeScript**, **ESLint**, **Tailwind CSS**, the **src** directory, or the **App Router**, the necessary setup files and configurations will be automatically added to your project.\n      </Note>\n    </StepItem>\n\n    <StepItem title=\"Step 3: React 19 & Next.js 15 Configurations (Optional)\">\n      If you're using **React 19** and **Next.js 15**, you may encounter an additional configuration option for Turbopack:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes  \r\n          Would you like to use Turbopack for \\`next dev\\`? » No / Yes`}\n      </Pre>\n\n      <Note variant=\"info\">\n        **Turbopack** is a high-performance bundler and dev server for Next.js. Enabling this option ensures faster builds and an improved development experience.\n      </Note>\n    </StepItem>\n  </Step>\n</div>\n\n## Next Steps\n\nOnce your project is created, you’re ready to explore and integrate Alpha’s modern components and utilities to bring your vision to life. Start building your next-generation application today with Alpha! 🚀\n",
    "raw": "---\r\ntitle: Installation\r\ndescription: Your gateway to mastering modern software development.\r\nkeywords: [\"installation\", \"github\", \"node\", \"guide\", \"nextjs\", \"documents\"]\r\n---\r\n\r\nto use our component you should using [next.js](https://nextjs.org/)\r\n\r\n## System Requirements\r\n\r\n- [Node.js 18.18](https://nodejs.org/) or later.\r\n- macOS, Windows (including WSL), and Linux are supported.\r\n\r\n<div className=\"not-prose px-4\">\r\n<Note>If Your using windows recommended to use WSL with windows to have all the features in linux <br/> but if you don't have don't worry windows s also great choice</Note>\r\n\r\n<Step className='mt-6'>\r\n<StepItem title=\"Step 1: Create Your Next.js Project\">\r\nStart by running the following command in your terminal to set up a new Next.js project:  \r\nTo verify installation, run:\r\n\r\n<Pre>{`npx create-next-app@latest`}</Pre>\r\n\r\n</StepItem>\r\n<StepItem title=\"Step 2: Configure Your Project\">\r\n  During the setup, you'll be prompted to configure your project. Below is an example of the default prompts and options you'll encounter:\r\n\r\n<Pre>\r\n  {`What is your project named? \\`put your project name here\\`  \r\nWould you like to use TypeScript? No / Yes  \r\nWould you like to use ESLint? No / Yes  \r\nWould you like to use Tailwind CSS? No / Yes  \r\nWould you like your code inside a \\`src/\\` directory? No / Yes  \r\nWould you like to use App Router? (recommended) No / Yes `}\r\n</Pre>\r\n\r\n      <Note type=\"note\" title=\"Important Note\">\r\n         The above configurations are entirely customizable. If you choose to enable **TypeScript**, **ESLint**, **Tailwind CSS**, the **src** directory, or the **App Router**, the necessary setup files and configurations will be automatically added to your project.\r\n      </Note>\r\n\r\n</StepItem>\r\n<StepItem title=\"Step 3: React 19 & Next.js 15 Configurations (Optional)\">\r\n      If you're using **React 19** and **Next.js 15**, you may encounter an additional configuration option for Turbopack:\r\n\r\n<Pre>\r\n  {`What is your project named? \\`put your project name here\\`  \r\nWould you like to use TypeScript? No / Yes  \r\nWould you like to use ESLint? No / Yes  \r\nWould you like to use Tailwind CSS? No / Yes  \r\nWould you like your code inside a \\`src/\\` directory? No / Yes  \r\nWould you like to use App Router? (recommended) No / Yes  \r\nWould you like to use Turbopack for \\`next dev\\`? » No / Yes`}\r\n</Pre>\r\n\r\n      <Note variant=\"info\">\r\n         **Turbopack** is a high-performance bundler and dev server for Next.js. Enabling this option ensures faster builds and an improved development experience.\r\n      </Note>\r\n\r\n</StepItem>\r\n</Step>\r\n</div>\r\n## Next Steps\r\n\r\nOnce your project is created, you’re ready to explore and integrate Alpha’s modern components and utilities to bring your vision to life. Start building your next-generation application today with Alpha! 🚀\r\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "A set of beautifully-designed, accessible, and customizable components to help you build your component library. Open Source.",
    "content": "**This is not a component library. It is how you build your component library.**\n\nYou know how most traditional component libraries work: you install a package from NPM, import the components, and use them in your app.\n\nRoach works well until you need to customize a component to fit your design system or require one that isn’t included in the library. Often, you end up wrapping library components, writing workarounds to override styles, or mixing components from different libraries with incompatible APIs.\n\nThis is what **alphabyte-labs** aims to solve. It is built around the following principles:\n\n* **Open code** – The leading React framework for production-grade applications.\n* **Composition** – Combine Markdown and JSX for dynamic, interactive content.\n* **Distribution** – The go-to library for building seamless user interfaces.\n* **Beautiful Defaults** – Ensure reliability and scalability with this powerful JavaScript superset.\n\n## Welcome to Alphabyte-labs\n\nAt alphabyte, we believe that knowledge is the foundation of innovation. Our documentation hub is your ultimate resource for mastering software development, offering guides, tutorials, and insights designed to equip you with the tools to build impactful solutions.\n\n### What You’ll Discover\n\nWe Will Discover A Collection of components that real world components you can use it in you next.js application or any react.js application\n",
    "raw": "---\r\ntitle: Introduction\r\ndescription: A set of beautifully-designed, accessible, and customizable components to help you build your component library. Open Source.\r\nkeywords:\r\n  [\"setup\", \"configuration\", \"layout\", \"Google\", \"SEO\", \"nextjs\", \"documents\"]\r\n---\r\n\r\n**This is not a component library. It is how you build your component library.**\r\n\r\nYou know how most traditional component libraries work: you install a package from NPM, import the components, and use them in your app.\r\n\r\nRoach works well until you need to customize a component to fit your design system or require one that isn’t included in the library. Often, you end up wrapping library components, writing workarounds to override styles, or mixing components from different libraries with incompatible APIs.\r\n\r\nThis is what **alphabyte-labs** aims to solve. It is built around the following principles:\r\n\r\n- **Open code** – The leading React framework for production-grade applications.\r\n- **Composition** – Combine Markdown and JSX for dynamic, interactive content.\r\n- **Distribution** – The go-to library for building seamless user interfaces.\r\n- **Beautiful Defaults** – Ensure reliability and scalability with this powerful JavaScript superset.\r\n\r\n## Welcome to Alphabyte-labs\r\n\r\nAt alphabyte, we believe that knowledge is the foundation of innovation. Our documentation hub is your ultimate resource for mastering software development, offering guides, tutorials, and insights designed to equip you with the tools to build impactful solutions.\r\n\r\n### What You’ll Discover\r\n\r\nWe Will Discover A Collection of components that real world components you can use it in you next.js application or any react.js application\r\n"
  },
  {
    "slug": "/rtl",
    "title": "Rtl",
    "description": "Rtl",
    "content": "",
    "raw": "---\r\ntitle: Rtl\r\ndescription: Rtl\r\nkeywords: rtl, right to left, arabic, hebrew, persian, urdu, farsi\r\n---\r\n"
  },
  {
    "slug": "/themes",
    "title": "Themes",
    "description": "Choose one primary color and get your color pallet customized for you",
    "content": "",
    "raw": "---\r\ntitle: Themes\r\ndescription: Choose one primary color and get your color pallet customized for you\r\n---"
  },
  {
    "slug": "/components/accordion",
    "title": "الأكورديون (Accordion)",
    "description": "مكوّن الأكورديون هو حاوية يمكن أن تحتوي على عناصر متعددة، كل واحد منها يمكن توسيعه أو طيه لإظهار أو إخفاء المحتوى الخاص به.",
    "content": "<ComponentPreview name=\"accordion-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Accordion\">\n      <ComponentSource name=\"accordion-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import {\r\n      Accordion,\r\n      AccordionContent,\r\n      AccordionItem,\r\n      AccordionTrigger,\r\n      } from \"@/components/ui/accordion\"`}\n  </Pre>\n\n  <Pre className=\"language-typescript\">\n    {`<Accordion type=\"single\" collapsible>\r\n      <AccordionItem value=\"item-1\">\r\n        <AccordionTrigger>Section Title</AccordionTrigger>\r\n        <AccordionContent>\r\n          Content goes here\r\n        </AccordionContent>\r\n      </AccordionItem>\r\n      </Accordion>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: الأكورديون (Accordion)\r\ndescription: مكوّن الأكورديون هو حاوية يمكن أن تحتوي على عناصر متعددة، كل واحد منها يمكن توسيعه أو طيه لإظهار أو إخفاء المحتوى الخاص به.\r\nkeywords: [أكورديون, مكون, قابل للطي, قابل للتوسيع]\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/accordion\r\n  api: https://www.radix-ui.com/docs/primitives/components/accordion#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"accordion-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Accordion\">\r\n      <ComponentSource name=\"accordion-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre className=\"language-typescript\">\r\n    {`import {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\"`}\r\n  </Pre>\r\n  <Pre className=\"language-typescript\">\r\n    {`<Accordion type=\"single\" collapsible>\r\n  <AccordionItem value=\"item-1\">\r\n    <AccordionTrigger>Section Title</AccordionTrigger>\r\n    <AccordionContent>\r\n      Content goes here\r\n    </AccordionContent>\r\n  </AccordionItem>\r\n</Accordion>`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/alert-dialog",
    "title": "نافذة تنبيه (Alert Dialog)",
    "description": "مكوّن مربع حوار تنبيه متعدد الاستخدامات للتفاعلات الحرجة مع المستخدم.",
    "content": "<ComponentPreview name=\"alert-dialog-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Alert dialog\">\n      <ComponentSource name=\"alert-dialog-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      AlertDialog,\r\n      AlertDialogAction,\r\n      AlertDialogCancel,\r\n      AlertDialogContent,\r\n      AlertDialogDescription,\r\n      AlertDialogFooter,\r\n      AlertDialogHeader,\r\n      AlertDialogTitle,\r\n      AlertDialogTrigger,\r\n      } from \"@/components/ui/alert-dialog\"\r\n      import { Button } from \"@/components/ui/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function AlertDialogDemo() {\r\n      return (\r\n        <AlertDialog>\r\n          <AlertDialogTrigger asChild>\r\n            <Button variant=\"outline\">Open Dialog</Button>\r\n          </AlertDialogTrigger>\r\n          <AlertDialogContent>\r\n            <AlertDialogHeader>\r\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n              <AlertDialogDescription>\r\n                This action cannot be undone. The data will be permanently deleted\r\n                from the servers.\r\n              </AlertDialogDescription>\r\n            </AlertDialogHeader>\r\n            <AlertDialogFooter>\r\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n              <AlertDialogAction>Continue</AlertDialogAction>\r\n            </AlertDialogFooter>\r\n          </AlertDialogContent>\r\n        </AlertDialog>\r\n      )\r\n      }`}\n  </Pre>\n</div>\n\n## الأمثلة\n\n### الإجراء المدمر\n\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\n",
    "raw": "---\r\ntitle: \"نافذة تنبيه (Alert Dialog)\"\r\ndescription: \"مكوّن مربع حوار تنبيه متعدد الاستخدامات للتفاعلات الحرجة مع المستخدم.\"\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/alert-dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/alert-dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"alert-dialog-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Alert dialog\">\r\n      <ComponentSource name=\"alert-dialog-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>\r\n    {`import {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\"\r\nimport { Button } from \"@/components/ui/button\"`}\r\n  </Pre>\r\n  <Pre>\r\n    {`export default function AlertDialogDemo() {\r\n  return (\r\n    <AlertDialog>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant=\"outline\">Open Dialog</Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>Are you sure?</AlertDialogTitle>\r\n          <AlertDialogDescription>\r\n            This action cannot be undone. The data will be permanently deleted\r\n            from the servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction>Continue</AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  )\r\n}`}\r\n  </Pre>\r\n</div>\r\n\r\n## الأمثلة\r\n\r\n### الإجراء المدمر\r\n\r\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\r\n"
  },
  {
    "slug": "/components/badge",
    "title": "الشارة (Badge)",
    "description": "الشارة هي عنصر بصري صغير، غالبًا دائري، يوفّر معلومات أو سياق حول عنصر ما. يمكن استخدامها للإشارة إلى الحالة، الإشعارات، أو تفاصيل أخرى ذات صلة.",
    "content": "<ComponentPreview name=\"badge-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Badge\">\n      <ComponentSource name=\"badge-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/ui/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Badge variant=\"outline\">Badge</Badge>`}\n  </Pre>\n</div>\n\n## نصائح\n\n💡 يمكنك استخدام <MdxBadge>badgeVariants</MdxBadge> لإنشاء مكوّن شارة خاص بك بأنماط مختلفة.\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/ui/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### افتراضي\n\n<ComponentPreview name=\"badge-demo\" />\n\n### مخطط (Outline)\n\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\n\n### مدمر (Destructive)\n\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\n\n### نجاح (Success)\n\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\n\n### تحذير (Warning)\n\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\n\n### معلومة (Info)\n\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\n\n### قابل للإزالة (Removable)\n\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\n\n### مع أيقونة (With icon)\n\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\n",
    "raw": "---\r\ntitle: الشارة (Badge)\r\ndescription: الشارة هي عنصر بصري صغير، غالبًا دائري، يوفّر معلومات أو سياق حول عنصر ما. يمكن استخدامها للإشارة إلى الحالة، الإشعارات، أو تفاصيل أخرى ذات صلة.\r\n---\r\n\r\n<ComponentPreview name=\"badge-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge `}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Badge\">\r\n      <ComponentSource name=\"badge-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Badge } from '@/components/ui/badge'`}</Pre>\r\n  <Pre>{`<Badge variant=\"outline\">Badge</Badge>`}</Pre>\r\n</div>\r\n\r\n## نصائح  \r\n\r\n💡 يمكنك استخدام <MdxBadge>badgeVariants</MdxBadge> لإنشاء مكوّن شارة خاص بك بأنماط مختلفة.  \r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Badge } from '@/components/ui/badge'`}</Pre>\r\n  <Pre>{`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}</Pre>\r\n</div>\r\n\r\n## أمثلة  \r\n\r\n### افتراضي\r\n<ComponentPreview name=\"badge-demo\" />\r\n\r\n### مخطط (Outline)\r\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\r\n\r\n### مدمر (Destructive)\r\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\r\n\r\n### نجاح (Success)\r\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\r\n\r\n### تحذير (Warning)\r\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\r\n\r\n### معلومة (Info)\r\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\r\n\r\n### قابل للإزالة (Removable)\r\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\r\n\r\n### مع أيقونة (With icon)\r\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\r\n"
  },
  {
    "slug": "/components/breadcrumb",
    "title": "مسار التنقل (Breadcrumb)",
    "description": "مسار التنقل",
    "content": "<ComponentPreview name=\"breadcrumb-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Breadcrumb\">\n      <ComponentSource name=\"breadcrumb-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Breadcrumb,\r\n        BreadcrumbItem,\r\n        BreadcrumbLink,\r\n        BreadcrumbList,\r\n        BreadcrumbPage,\r\n        BreadcrumbSeparator,\r\n      } from \"@/components/ui/breadcrumb\"`}\n  </Pre>\n\n  <Pre>\n    {`<Breadcrumb>\r\n        <BreadcrumbList>\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">\r\n                    <HiHome className=\"h-4 w-4\" />\r\n                </BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\r\n            </BreadcrumbItem>\r\n            <BreadcrumbSeparator />\r\n            <BreadcrumbItem>\r\n                <BreadcrumbPage>Current Page</BreadcrumbPage>\r\n            </BreadcrumbItem>\r\n        </BreadcrumbList>\r\n      </Breadcrumb>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### فاصل مخصص (Custom Separator)\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\n\n### الحذف بالعلامة (…) (Ellipsis)\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\n\n### قائمة منسدلة (Dropdown)\n\nيمكنك تركيب <MdxBadge>\\<breadcrumb-item /></MdxBadge> مع مكوّن\\\n<MdxBadge>\\<dropdown-menu /></MdxBadge> لإنشاء قائمة منسدلة داخل مسار التنقل.\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\n\n### أيقونات (Icons)\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\n\n### متجاوب (Responsive)\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\n",
    "raw": "---\r\ntitle: مسار التنقل (Breadcrumb)\r\ndescription: مسار التنقل\r\n---\r\n\r\n<ComponentPreview name=\"breadcrumb-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge `}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Breadcrumb\">\r\n      <ComponentSource name=\"breadcrumb-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    Breadcrumb,\r\n    BreadcrumbItem,\r\n    BreadcrumbLink,\r\n    BreadcrumbList,\r\n    BreadcrumbPage,\r\n    BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\"`}</Pre>\r\n  <Pre>{`<Breadcrumb>\r\n    <BreadcrumbList>\r\n        <BreadcrumbItem>\r\n            <BreadcrumbLink href=\"#\">\r\n                <HiHome className=\"h-4 w-4\" />\r\n            </BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n            <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\r\n        </BreadcrumbItem>\r\n        <BreadcrumbSeparator />\r\n        <BreadcrumbItem>\r\n            <BreadcrumbPage>Current Page</BreadcrumbPage>\r\n        </BreadcrumbItem>\r\n    </BreadcrumbList>\r\n</Breadcrumb>`}</Pre>\r\n</div>\r\n\r\n## أمثلة  \r\n\r\n### فاصل مخصص (Custom Separator)\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\r\n\r\n### الحذف بالعلامة (…) (Ellipsis)\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\r\n\r\n### قائمة منسدلة (Dropdown)  \r\nيمكنك تركيب <MdxBadge>\\<breadcrumb-item /\\></MdxBadge> مع مكوّن  \r\n<MdxBadge>\\<dropdown-menu /\\></MdxBadge> لإنشاء قائمة منسدلة داخل مسار التنقل.\r\n\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\r\n\r\n### أيقونات (Icons)\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\r\n\r\n### متجاوب (Responsive)\r\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\r\n"
  },
  {
    "slug": "/components/button",
    "title": "الزر (Button)",
    "description": "زر يقوم بعرض قائمة من الخيارات عند النقر عليه.",
    "content": "<ComponentPreview name=\"button\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن الزر (Button Component)\">\n      <ComponentSource name=\"button\" />\n    </StepItem>\n\n    <StepItem title=\"الآن أصبح المكوّن جاهزًا، ويمكنك تعديله وتخصيصه ليتناسب مع احتياجاتك.\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import { Button } from \"@/components/ui/button\"`}\n  </Pre>\n\n  <Pre className=\"language-typescript\">\n    {`export default function ButtonDemo() {\r\n      return <Button variant={\"default\"}>البدء</Button>\r\n      }`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### أساسي (Primary)\n\n<ComponentPreview name=\"button\" variant=\"primary\" />\n\n### ثانوي (Secondary)\n\n<ComponentPreview name=\"button\" variant=\"secondary\" />\n\n### مدمر (Destructive)\n\n<ComponentPreview name=\"button\" variant=\"destructive\" />\n\n### شفاف (Ghost)\n\n<ComponentPreview name=\"button\" variant=\"ghost\" />\n\n### رابط (Link)\n\n<ComponentPreview name=\"button\" variant=\"link\" />\n\n### محدد الإطار (Outline)\n\n<ComponentPreview name=\"button\" variant=\"outline\" />\n\n### محايد (Neural)\n\n<ComponentPreview name=\"button\" variant=\"neural\" />\n\n### تحميل (Loading)\n\n<ComponentPreview name=\"button\" variant=\"loading\" />\n\n### أيقونة (Icon)\n\n<ComponentPreview name=\"button\" variant=\"icon\" />\n\n### حركة Bounce\n\n<ComponentPreview name=\"button\" variant=\"bounce\" />\n\n### حركة Pulse\n\n<ComponentPreview name=\"button\" variant=\"pulse\" />\n",
    "raw": "---\r\ntitle: الزر (Button)\r\ndescription: زر يقوم بعرض قائمة من الخيارات عند النقر عليه.\r\n---\r\n\r\n<ComponentPreview name=\"button\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن الزر (Button Component)\">\r\n      <ComponentSource name=\"button\" />\r\n    </StepItem>\r\n    <StepItem title=\"الآن أصبح المكوّن جاهزًا، ويمكنك تعديله وتخصيصه ليتناسب مع احتياجاتك.\" />\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre className=\"language-typescript\">{`import { Button } from \"@/components/ui/button\"`}</Pre>\r\n  <Pre className=\"language-typescript\">{`export default function ButtonDemo() {\r\n  return <Button variant={\"default\"}>البدء</Button>\r\n}`}</Pre>\r\n</div>\r\n\r\n## أمثلة \r\n\r\n### أساسي (Primary)\r\n<ComponentPreview name=\"button\" variant=\"primary\" />\r\n\r\n### ثانوي (Secondary)\r\n<ComponentPreview name=\"button\" variant=\"secondary\" />\r\n\r\n### مدمر (Destructive)\r\n<ComponentPreview name=\"button\" variant=\"destructive\" />\r\n\r\n### شفاف (Ghost)\r\n<ComponentPreview name=\"button\" variant=\"ghost\" />\r\n\r\n### رابط (Link)\r\n<ComponentPreview name=\"button\" variant=\"link\" />\r\n\r\n### محدد الإطار (Outline)\r\n<ComponentPreview name=\"button\" variant=\"outline\" />\r\n\r\n### محايد (Neural)\r\n<ComponentPreview name=\"button\" variant=\"neural\" />\r\n\r\n### تحميل (Loading)\r\n<ComponentPreview name=\"button\" variant=\"loading\" />\r\n\r\n### أيقونة (Icon)\r\n<ComponentPreview name=\"button\" variant=\"icon\" />\r\n\r\n### حركة Bounce\r\n<ComponentPreview name=\"button\" variant=\"bounce\" />\r\n\r\n### حركة Pulse\r\n<ComponentPreview name=\"button\" variant=\"pulse\" />\r\n"
  },
  {
    "slug": "/components/calendar",
    "title": "التقويم (Calendar)",
    "description": "مكوّن التقويم",
    "content": "<ComponentPreview name=\"calendar-demo\" />\n\n## حول المكوّن\n\nمكوّن <MdxBadge>Calendar</MdxBadge> مبني بالاعتماد على\\\n[ReactDayPicker](https://daypicker.dev/).\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن التقويم (Calendar Component)\">\n      <ComponentSource name=\"calendar-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Calendar } from \"@/components/ui/calendar\"`}\n  </Pre>\n\n  <Pre>\n    {`const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n\r\n      return (\r\n      <Calendar\r\n        mode=\"single\"\r\n        selected={date}\r\n        onSelect={setDate}\r\n        className=\"rounded-md border\"\r\n      />\r\n      )`}\n  </Pre>\n</div>\n\n## أمثلة\n\n<ComponentPreview name=\"date-picker-demo\" />\n",
    "raw": "---\r\ntitle: التقويم (Calendar)\r\ndescription: مكوّن التقويم\r\nlinks:\r\n  doc: https://react-day-picker.js.org\r\n---\r\n\r\n<ComponentPreview name=\"calendar-demo\" />\r\n\r\n## حول المكوّن\r\n\r\nمكوّن <MdxBadge>Calendar</MdxBadge> مبني بالاعتماد على  \r\n[ReactDayPicker](https://daypicker.dev/).\r\n\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن التقويم (Calendar Component)\">\r\n      <ComponentSource name=\"calendar-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Calendar } from \"@/components/ui/calendar\"`}</Pre>\r\n  <Pre>{`const [date, setDate] = React.useState<Date | undefined>(new Date())\r\n \r\nreturn (\r\n  <Calendar\r\n    mode=\"single\"\r\n    selected={date}\r\n    onSelect={setDate}\r\n    className=\"rounded-md border\"\r\n  />\r\n)`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n<ComponentPreview name=\"date-picker-demo\" />\r\n"
  },
  {
    "slug": "/components/collapsible",
    "title": "القابل للطي (Collapsible)",
    "description": "مكوّن لإخفاء وإظهار المحتوى.",
    "content": "<ComponentPreview name=\"collapsible-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن القابل للطي (Collapsible)\">\n      <ComponentSource name=\"collapsible-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Collapsible,\r\n        CollapsibleContent,\r\n        CollapsibleTrigger,\r\n      } from \"@/components/ui/collapsible\"`}\n  </Pre>\n\n  <Pre>\n    {`<Collapsible>\r\n      <CollapsibleTrigger>هل يمكنني استخدام هذا في مشروعي؟</CollapsibleTrigger>\r\n      <CollapsibleContent>\r\n        نعم. مجاني للاستخدام في المشاريع الشخصية والتجارية. لا حاجة للإشارة إلى المصدر.\r\n      </CollapsibleContent>\r\n      </Collapsible>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: القابل للطي (Collapsible)\r\ndescription: مكوّن لإخفاء وإظهار المحتوى.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/collapsible\r\n  api: https://www.radix-ui.com/docs/primitives/components/collapsible#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"collapsible-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\r\n      أولاً، تحتاج إلى تثبيت الاعتمادات:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن القابل للطي (Collapsible)\">\r\n      <ComponentSource name=\"collapsible-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import {\r\n    Collapsible,\r\n    CollapsibleContent,\r\n    CollapsibleTrigger,\r\n} from \"@/components/ui/collapsible\"`}\r\n</Pre>\r\n\r\n<Pre>{`<Collapsible>\r\n  <CollapsibleTrigger>هل يمكنني استخدام هذا في مشروعي؟</CollapsibleTrigger>\r\n  <CollapsibleContent>\r\n    نعم. مجاني للاستخدام في المشاريع الشخصية والتجارية. لا حاجة للإشارة إلى المصدر.\r\n  </CollapsibleContent>\r\n</Collapsible>`}</Pre>\r\n\r\n</div>\r\n"
  },
  {
    "slug": "/components",
    "title": "المكونات",
    "description": "المكونات هي أجزاء قابلة لإعادة الاستخدام من واجهة المستخدم يمكن استعمالها عبر مختلف أجزاء التطبيق.",
    "content": "<ComponentsList />\n",
    "raw": "---\r\ntitle: \"المكونات\"\r\ndescription: \"المكونات هي أجزاء قابلة لإعادة الاستخدام من واجهة المستخدم يمكن استعمالها عبر مختلف أجزاء التطبيق.\"\r\n---\r\n\r\n<ComponentsList/>\r\n"
  },
  {
    "slug": "/components/data-picker",
    "title": "مُحدد التاريخ (Date Picker)",
    "description": "توثيق مكوّن مُحدد التاريخ.",
    "content": "<ComponentPreview name=\"date-picker-demo\" />\n\n## التثبيت\n\nمكوّن <MdxBadge>Date Picker</MdxBadge> مبني باستخدام دمج بين\\\n<MdxBadge>\\<Popover /></MdxBadge> و\\\n<MdxBadge>\\<Calendar /></MdxBadge>.\n\nراجع تعليمات التثبيت الخاصة بـ [Popover](https://alphabyte-labs.vercel.app/docs/components/popover)\\\nو [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) لعملية التثبيت السريعة.\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose\">\n  <Pre>\n    {`\"use client\"\r\n\r\n      import * as React from \"react\"\r\n      import { format } from \"date-fns\"\r\n      import { CalendarIcon } from \"lucide-react\"\r\n\r\n      import { cn } from \"@/lib/utils\"\r\n      import { Button } from \"@/components/ui/button\"\r\n      import { Calendar } from \"@/components/ui/calendar\"\r\n      import {\r\n      Popover,\r\n      PopoverContent,\r\n      PopoverTrigger,\r\n      } from \"@/components/ui/popover\"\r\n\r\n      export default function DatePickerDemo() {\r\n      const [date, setDate] = React.useState<Date>()\r\n\r\n      return (\r\n\r\n        <Popover>\r\n          <PopoverTrigger asChild >\r\n            <Button\r\n              variant={\"outline\"}\r\n              className={\r\n                cn(\r\n                  \"w-[240px] justify-start text-left font-normal\",\r\n                  !date && \"text-muted-foreground\"\r\n                )\r\n              } >\r\n              <CalendarIcon />\r\n              {date ? format(date, \"PPP\") : <span>اختر تاريخًا</span>}\r\n            </Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent className=\"w-auto p-0\" align=\"start\" >\r\n            <Calendar\r\n              mode=\"single\"\r\n              selected={date}\r\n              onSelect={setDate}\r\n              initialFocus\r\n            />\r\n          </PopoverContent>\r\n        </Popover>\r\n      )\r\n      }`}\n  </Pre>\n</div>\n\n## الأمثلة\n\n### نطاق التواريخ (Date Picker Range)\n\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\n",
    "raw": "---\r\ntitle: مُحدد التاريخ (Date Picker)\r\ndescription: توثيق مكوّن مُحدد التاريخ.\r\n---\r\n\r\n<ComponentPreview name=\"date-picker-demo\" />\r\n\r\n## التثبيت\r\n\r\nمكوّن <MdxBadge>Date Picker</MdxBadge> مبني باستخدام دمج بين  \r\n<MdxBadge>\\<Popover /\\></MdxBadge> و  \r\n<MdxBadge>\\<Calendar /\\></MdxBadge>.\r\n\r\nراجع تعليمات التثبيت الخاصة بـ [Popover](https://alphabyte-labs.vercel.app/docs/components/popover)  \r\nو [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) لعملية التثبيت السريعة.\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose\">\r\n<Pre>{`\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { format } from \"date-fns\"\r\nimport { CalendarIcon } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Calendar } from \"@/components/ui/calendar\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\n\r\nexport default function DatePickerDemo() {\r\n  const [date, setDate] = React.useState<Date>()\r\n\r\n  return (\r\n\r\n    <Popover>\r\n      <PopoverTrigger asChild >\r\n        <Button\r\n          variant={\"outline\"}\r\n          className={\r\n            cn(\r\n              \"w-[240px] justify-start text-left font-normal\",\r\n              !date && \"text-muted-foreground\"\r\n            )\r\n          } >\r\n          <CalendarIcon />\r\n          {date ? format(date, \"PPP\") : <span>اختر تاريخًا</span>}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-auto p-0\" align=\"start\" >\r\n        <Calendar\r\n          mode=\"single\"\r\n          selected={date}\r\n          onSelect={setDate}\r\n          initialFocus\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}`}</Pre>\r\n\r\n</div>\r\n\r\n## الأمثلة\r\n\r\n### نطاق التواريخ (Date Picker Range)\r\n\r\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\r\n"
  },
  {
    "slug": "/components/diagrams",
    "title": "رسوم بيانية (Diagrams)",
    "description": "أضف أنواعًا مختلفة من المخططات، بما في ذلك مخططات التدفق، أشجار القرارات، ومخططات الكيانات والعلاقات.",
    "content": "<ComponentPreview name=\"diagram-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\n      أولًا، لبدء إنشاء المخططات في تطبيقك المبني بـ Next.js تحتاج إلى تثبيت مكتبة تُسمى <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span>:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge mermaid`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"ها أنت جاهز الآن! يمكنك البدء في إنشاء المخططات بسهولة كما يفعل المصمّم.\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import Mermaid from \"@/components/ui/mermaid\"`}\n  </Pre>\n\n  <Pre>\n    {`const DiagramsDemo = () => {\r\n      return (\r\n        <Mermaid\r\n          chart={\\`graph TD;\r\n        Start --> Task1;\r\n        Task1 --> Task2;\r\n        Task2 --> End;\\`}\r\n        />\r\n      )\r\n      }\r\n\r\n      export default DiagramsDemo`}\n  </Pre>\n</div>\n\n## الأمثلة\n\n### مخطط التدفق (Flowchart)\n\n<ComponentPreview name=\"diagram-demo\" />\n\n### شجرة القرارات (Decision Tree)\n\nأشجار القرارات توضّح الاختيارات والنتائج المحتملة، مما يجعلها مثالية لسير العمل في اتخاذ القرارات أو العمليات التي تتضمن مسارات متعددة.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\n\n### مخطط الكيانات والعلاقات (Entity-Relationship Diagram)\n\nمخططات الكيانات والعلاقات (ERDs) تُستخدم لنمذجة العلاقات بين الكيانات داخل النظام. وهي تُستخدم على نطاق واسع في تصميم قواعد البيانات والتخطيط المعماري للأنظمة.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\n\n***\n\nكل نوع من هذه المخططات يخدم غرضًا محددًا، وتسهّل مكتبة Mermaid إنشاءها ديناميكيًا. لا تتردّد في تجربة أمثلة الأكواد المرفقة وتكييفها لتلبية احتياجاتك.\n",
    "raw": "---\r\ntitle: رسوم بيانية (Diagrams)\r\ndescription: أضف أنواعًا مختلفة من المخططات، بما في ذلك مخططات التدفق، أشجار القرارات، ومخططات الكيانات والعلاقات.\r\n---\r\n\r\n<ComponentPreview name=\"diagram-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"تثبيت الاعتمادات (Dependencies)\">\r\nأولًا، لبدء إنشاء المخططات في تطبيقك المبني بـ Next.js تحتاج إلى تثبيت مكتبة تُسمى <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span>:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge mermaid`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"إنشاء ملف utils.ts\"> \r\n  <ComponentUtilsText/>\r\n  <ComponentUtils/>\r\n  </StepItem>\r\n<StepItem title=\"ها أنت جاهز الآن! يمكنك البدء في إنشاء المخططات بسهولة كما يفعل المصمّم.\"/>\r\n</Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import Mermaid from \"@/components/ui/mermaid\"`}</Pre>\r\n<Pre>{`const DiagramsDemo = () => {\r\n  return (\r\n    <Mermaid\r\n      chart={\\`graph TD;\r\n    Start --> Task1;\r\n    Task1 --> Task2;\r\n    Task2 --> End;\\`}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DiagramsDemo`}</Pre>\r\n</div>\r\n\r\n## الأمثلة\r\n\r\n### مخطط التدفق (Flowchart)\r\n\r\n<ComponentPreview name=\"diagram-demo\" />\r\n\r\n### شجرة القرارات (Decision Tree)\r\n\r\nأشجار القرارات توضّح الاختيارات والنتائج المحتملة، مما يجعلها مثالية لسير العمل في اتخاذ القرارات أو العمليات التي تتضمن مسارات متعددة.  \r\n\r\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\r\n\r\n### مخطط الكيانات والعلاقات (Entity-Relationship Diagram)\r\n\r\nمخططات الكيانات والعلاقات (ERDs) تُستخدم لنمذجة العلاقات بين الكيانات داخل النظام. وهي تُستخدم على نطاق واسع في تصميم قواعد البيانات والتخطيط المعماري للأنظمة.  \r\n\r\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\r\n\r\n---\r\n\r\nكل نوع من هذه المخططات يخدم غرضًا محددًا، وتسهّل مكتبة Mermaid إنشاءها ديناميكيًا. لا تتردّد في تجربة أمثلة الأكواد المرفقة وتكييفها لتلبية احتياجاتك.\r\n"
  },
  {
    "slug": "/components/dialog",
    "title": "نافذة حوار (Dialog)",
    "description": "مكون لعرض نوافذ الحوار (Dialog)",
    "content": "<ComponentPreview name=\"dialog-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\n      أولاً، تحتاج إلى تثبيت الحزم التالية:\n\n      <Pre className=\"language-bash\">\n        {`npm install @radix-ui/react-dialog clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n\n      <p className=\"text-gray-600 mt-2\">\n        إذا كان لديك ملف <code>utils.ts</code> بالفعل في مشروعك، يمكنك تجاوز هذه الخطوة.\n      </p>\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون الحوار\">\n      <ComponentSource name=\"dialog-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<Pre className=\"language-tsx\">\n  {`import {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogDescription,\r\n    DialogHeader,\r\n    DialogTitle,\r\n    DialogTrigger,\r\n    } from \"@/components/ui/dialog\"\r\n\r\n    export default function Example() {\r\n    return (\r\n      <Dialog>\r\n        <DialogTrigger>فتح</DialogTrigger>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>هل أنت متأكد تمامًا؟</DialogTitle>\r\n            <DialogDescription>\r\n              لا يمكن التراجع عن هذا الإجراء. سيؤدي هذا إلى حذف حسابك نهائيًا\r\n              وإزالة جميع بياناتك من خوادمنا.\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n        </DialogContent>\r\n      </Dialog>\r\n    )\r\n    }`}\n</Pre>\n\n## أمثلة\n\n### حوار مدمر (Destructive)\n\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\n\n### تحديد موقع مخصص\n\n#### أعلى الصفحة\n\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\n\n#### أسفل الصفحة\n\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\n\n### مثال مع نموذج (Form)\n\n<ComponentPreview name=\"dialog-demo\" variant=\"form\" />\n",
    "raw": "---\r\ntitle: نافذة حوار (Dialog)\r\ndescription: \"مكون لعرض نوافذ الحوار (Dialog)\"\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"dialog-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\r\n      أولاً، تحتاج إلى تثبيت الحزم التالية:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install @radix-ui/react-dialog clsx tailwind-merge`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n      <p className=\"text-gray-600 mt-2\">\r\n        إذا كان لديك ملف <code>utils.ts</code> بالفعل في مشروعك، يمكنك تجاوز هذه الخطوة.\r\n      </p>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكون الحوار\">\r\n      <ComponentSource name=\"dialog-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<Pre className=\"language-tsx\">\r\n{`import {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\n\r\nexport default function Example() {\r\n  return (\r\n    <Dialog>\r\n      <DialogTrigger>فتح</DialogTrigger>\r\n      <DialogContent>\r\n        <DialogHeader>\r\n          <DialogTitle>هل أنت متأكد تمامًا؟</DialogTitle>\r\n          <DialogDescription>\r\n            لا يمكن التراجع عن هذا الإجراء. سيؤدي هذا إلى حذف حسابك نهائيًا\r\n            وإزالة جميع بياناتك من خوادمنا.\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}`}\r\n</Pre>\r\n\r\n## أمثلة\r\n\r\n### حوار مدمر (Destructive)\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\r\n\r\n### تحديد موقع مخصص\r\n\r\n#### أعلى الصفحة\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\r\n\r\n#### أسفل الصفحة\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\r\n\r\n### مثال مع نموذج (Form)\r\n\r\n<ComponentPreview name=\"dialog-demo\" variant=\"form\" />\r\n"
  },
  {
    "slug": "/components/drawer",
    "title": "درج جانبي (Drawer)\"",
    "description": "مكون الدرج لعرض محتوى جانبي",
    "content": "<ComponentPreview name=\"drawer-demo\" />\n\n## حول المكون\n\n<MdxBadge>الدرج (Drawer)</MdxBadge> مبني على مكتبة\\\n[Vaul](https://github.com/emilkowalski/vaul) من تطوير\\\n[emilkowalski\\_](https://x.com/emilkowalski_).\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\n      أولاً، تحتاج إلى تثبيت الحزم التالية:\n\n      <Pre>\n        {`npm install clsx tailwind-merge vaul`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون الدرج\">\n      <ComponentSource name=\"drawer-demo\" />\n    </StepItem>\n\n    <StepItem title=\"تعديل ملف layout.tsx لدعم خاصية الخلفية المتحركة\">\n      في ملف <MdxBadge>layout.tsx</MdxBadge> الرئيسي، أضف\\\n      <MdxBadge>vaul-drawer-wrapper</MdxBadge> لدعم خاصية تحريك/تكبير الخلفية:\n\n      <Pre highlightLines={[4]}>\n        {`<html lang=\"ar\" suppressHydrationWarning>\r\n          <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\r\n              {/* أنشئ div وأضف له خاصية vaul-drawer-wrapper بهذه الطريقة */}\r\n              <div vaul-drawer-wrapper=\"\">\r\n                 <div className=\"relative flex min-h-svh flex-col bg-background\">\r\n                    {children}\r\n                 </div>\r\n              </div>\r\n           </body>\r\n          </html>`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n      Drawer,\r\n      DrawerClose,\r\n      DrawerContent,\r\n      DrawerDescription,\r\n      DrawerFooter,\r\n      DrawerHeader,\r\n      DrawerTitle,\r\n      DrawerTrigger,\r\n      } from \"@/components/ui/drawer\"\r\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Drawer>\r\n      <DrawerTrigger>فتح</DrawerTrigger>\r\n      <DrawerContent>\r\n        <DrawerHeader>\r\n          <DrawerTitle>هل أنت متأكد تمامًا؟</DrawerTitle>\r\n          <DrawerDescription>هذا الإجراء لا يمكن التراجع عنه.</DrawerDescription>\r\n        </DrawerHeader>\r\n        <DrawerFooter>\r\n          <Button>تأكيد</Button>\r\n          <DrawerClose>\r\n            <Button variant=\"outline\">إلغاء</Button>\r\n          </DrawerClose>\r\n        </DrawerFooter>\r\n      </DrawerContent>\r\n      </Drawer>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### درج متداخل (Nested Drawer)\n\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\n",
    "raw": "---\r\ntitle: درج جانبي (Drawer)\"\r\ndescription: \"مكون الدرج لعرض محتوى جانبي\"\r\nlinks:\r\n  doc: https://vaul.emilkowal.ski/getting-started\r\n---\r\n\r\n<ComponentPreview name=\"drawer-demo\" />\r\n\r\n## حول المكون\r\n\r\n<MdxBadge>الدرج (Drawer)</MdxBadge> مبني على مكتبة  \r\n[Vaul](https://github.com/emilkowalski/vaul) من تطوير  \r\n[emilkowalski_](https://x.com/emilkowalski_).\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\r\n      أولاً، تحتاج إلى تثبيت الحزم التالية:\r\n      <Pre>{`npm install clsx tailwind-merge vaul`}</Pre>\r\n    </StepItem>\r\n\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n\r\n    <StepItem title=\"إنشاء مكون الدرج\">\r\n      <ComponentSource name=\"drawer-demo\" />\r\n    </StepItem>\r\n\r\n    <StepItem title=\"تعديل ملف layout.tsx لدعم خاصية الخلفية المتحركة\">\r\n      في ملف <MdxBadge>layout.tsx</MdxBadge> الرئيسي، أضف  \r\n      <MdxBadge>vaul-drawer-wrapper</MdxBadge> لدعم خاصية تحريك/تكبير الخلفية:\r\n      <Pre highlightLines={[4]}>{`<html lang=\"ar\" suppressHydrationWarning>\r\n  <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\r\n      {/* أنشئ div وأضف له خاصية vaul-drawer-wrapper بهذه الطريقة */}\r\n      <div vaul-drawer-wrapper=\"\">\r\n         <div className=\"relative flex min-h-svh flex-col bg-background\">\r\n            {children}\r\n         </div>\r\n      </div>\r\n   </body>\r\n</html>`}</Pre>\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>\r\n    {`import {\r\n  Drawer,\r\n  DrawerClose,\r\n  DrawerContent,\r\n  DrawerDescription,\r\n  DrawerFooter,\r\n  DrawerHeader,\r\n  DrawerTitle,\r\n  DrawerTrigger,\r\n} from \"@/components/ui/drawer\"\r\n`}\r\n  </Pre>\r\n\r\n  <Pre>\r\n    {`<Drawer>\r\n  <DrawerTrigger>فتح</DrawerTrigger>\r\n  <DrawerContent>\r\n    <DrawerHeader>\r\n      <DrawerTitle>هل أنت متأكد تمامًا؟</DrawerTitle>\r\n      <DrawerDescription>هذا الإجراء لا يمكن التراجع عنه.</DrawerDescription>\r\n    </DrawerHeader>\r\n    <DrawerFooter>\r\n      <Button>تأكيد</Button>\r\n      <DrawerClose>\r\n        <Button variant=\"outline\">إلغاء</Button>\r\n      </DrawerClose>\r\n    </DrawerFooter>\r\n  </DrawerContent>\r\n</Drawer>`}\r\n  </Pre>\r\n</div>\r\n\r\n## أمثلة \r\n\r\n### درج متداخل (Nested Drawer)\r\n\r\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\r\n"
  },
  {
    "slug": "/components/dropdown-menu",
    "title": "قائمة منسدلة (Dropdown Menu)",
    "description": "مكون القائمة المنسدلة لعرض قائمة من العناصر.",
    "content": "<ComponentPreview name=\"dropdown-menu-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون القائمة المنسدلة\">\n      <ComponentSource name=\"dropdown-menu-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        DropdownMenu,\r\n        DropdownMenuContent,\r\n        DropdownMenuItem,\r\n        DropdownMenuLabel,\r\n        DropdownMenuSeparator,\r\n        DropdownMenuTrigger\r\n      } from '@/components/ui/dropdown-menu'`}\n  </Pre>\n\n  <Pre>\n    {`<DropdownMenu>\r\n        <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\">فتح القائمة</Button>\r\n        </DropdownMenuTrigger>\r\n        <DropdownMenuContent className=\"w-56\">\r\n            <DropdownMenuLabel>حسابي</DropdownMenuLabel>\r\n            <DropdownMenuSeparator />\r\n            <DropdownMenuItem>\r\n                <Edit className=\"mr-2 h-4 w-4\" />\r\n                <span>تعديل الملف الشخصي</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem>\r\n                <Download className=\"mr-2 h-4 w-4\" />\r\n                <span>تنزيل</span>\r\n            </DropdownMenuItem>\r\n            <DropdownMenuItem disabled>\r\n                <Share className=\"mr-2 h-4 w-4\" />\r\n                <span>مشاركة (معطل)</span>\r\n            </DropdownMenuItem>\r\n        </DropdownMenuContent>\r\n      </DropdownMenu>\r\n      `}\n  </Pre>\n</div>\n\n## أمثلة\n\n### صندوق اختيار (Checkbox)\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\n\n### أزرار اختيار (Radio)\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\n\n### قائمة متداخلة (Nested)\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\n",
    "raw": "---\r\ntitle: \"قائمة منسدلة (Dropdown Menu)\"\r\ndescription: \"مكون القائمة المنسدلة لعرض قائمة من العناصر.\"\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dropdown-menu\r\n  api: https://www.radix-ui.com/docs/primitives/components/dropdown-menu#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"dropdown-menu-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الحزم المطلوبة\">\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\r\n      </Pre>\r\n    </StepItem>\r\n\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n\r\n    <StepItem title=\"إنشاء مكون القائمة المنسدلة\">\r\n      <ComponentSource name=\"dropdown-menu-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    DropdownMenu,\r\n    DropdownMenuContent,\r\n    DropdownMenuItem,\r\n    DropdownMenuLabel,\r\n    DropdownMenuSeparator,\r\n    DropdownMenuTrigger\r\n} from '@/components/ui/dropdown-menu'`}</Pre>\r\n\r\n  <Pre>{`<DropdownMenu>\r\n    <DropdownMenuTrigger asChild>\r\n        <Button variant=\"outline\">فتح القائمة</Button>\r\n    </DropdownMenuTrigger>\r\n    <DropdownMenuContent className=\"w-56\">\r\n        <DropdownMenuLabel>حسابي</DropdownMenuLabel>\r\n        <DropdownMenuSeparator />\r\n        <DropdownMenuItem>\r\n            <Edit className=\"mr-2 h-4 w-4\" />\r\n            <span>تعديل الملف الشخصي</span>\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem>\r\n            <Download className=\"mr-2 h-4 w-4\" />\r\n            <span>تنزيل</span>\r\n        </DropdownMenuItem>\r\n        <DropdownMenuItem disabled>\r\n            <Share className=\"mr-2 h-4 w-4\" />\r\n            <span>مشاركة (معطل)</span>\r\n        </DropdownMenuItem>\r\n    </DropdownMenuContent>\r\n</DropdownMenu>\r\n`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n\r\n### صندوق اختيار (Checkbox)\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\r\n\r\n### أزرار اختيار (Radio)\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\r\n\r\n### قائمة متداخلة (Nested)\r\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\r\n"
  },
  {
    "slug": "/components/folder-structure",
    "title": "هيكلية المجلدات (Folder Structure)",
    "description": "هذا القسم يوضح هيكل الملفات وكيفية تنفيذه باستخدام مكون FileTree.",
    "content": "<ComponentPreview name=\"folder-tree-demo\" />\n\n## حول المكون\n\nهيكل المجلدات مبني باستخدام مكون <MdxBadge>Sidebar</MdxBadge> من [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم\">\n      أولاً، تحتاج إلى تثبيت الحزم التالية:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n\n      <Pre className=\"language-bash\">\n        {`npx shadcn@latest add sidebar`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء Hook\">\n      قم بإنشاء مجلد جديد باسم <MdxBadge>hooks</MdxBadge> داخل مشروعك، ثم أنشئ ملف باسم <MdxBadge>use-submenu-state.ts</MdxBadge> وأضف الكود التالي:\n\n      <Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\n        {`import { useState, useCallback } from \"react\"\r\n\r\n          export function useSubmenuState(initialState: Record<string, boolean> = {}) {\r\n           const [openStates, setOpenStates] = useState(initialState)\r\n\r\n           const toggleSubmenu = useCallback((id: string) => {\r\n              setOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\r\n           }, [])\r\n\r\n           return { openStates, toggleSubmenu }\r\n          }\r\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون Folder-Tree\">\n      <ComponentSource name=\"folder-tree-demo\" />\n    </StepItem>\n\n    <StepItem title=\"إنشاء قائمة المجلدات\">\n      أنشئ ملف جديد داخل مجلد <MdxBadge>components</MdxBadge> باسم <MdxBadge>FolderTreeMenu.tsx</MdxBadge> وأضف الكود التالي:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\n          {`\"use client\"\r\n\r\n            import { ChevronDown, ChevronRight } from \"lucide-react\"\r\n            import { cn } from \"@/lib/utils\"\r\n            import { useSubmenuState } from \"@/hooks/use-submenu-state\"\r\n            import {\r\n            Sidebar,\r\n            SidebarContent,\r\n            SidebarHeader,\r\n            SidebarMenu,\r\n            SidebarMenuButton,\r\n            SidebarMenuItem,\r\n            SidebarMenuSub,\r\n            SidebarMenuSubButton,\r\n            SidebarMenuSubItem,\r\n            } from \"@/components/ui/sidebar\"\r\n\r\n            interface MenuItem {\r\n            id: string\r\n            title: string\r\n            items?: MenuItem[]\r\n            }\r\n\r\n            interface FolderTreeMenuProps {\r\n            items: MenuItem[]\r\n            }\r\n\r\n            export function FolderTreeMenu({ items }: FolderTreeMenuProps) {\r\n            const { openStates, toggleSubmenu } = useSubmenuState()\r\n\r\n            const renderMenuItem = (item: MenuItem) => {\r\n              const hasSubItems = item.items && item.items.length > 0\r\n              const isOpen = openStates[item.id]\r\n\r\n              return (\r\n                <SidebarMenuItem key={item.id}>\r\n                  <SidebarMenuButton\r\n                    onClick={() => hasSubItems && toggleSubmenu(item.id)}\r\n                    className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\r\n                  >\r\n                    {item.title}\r\n                    {hasSubItems && (\r\n                      <span className=\"ml-auto\">\r\n                        {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n                      </span>\r\n                    )}\r\n                  </SidebarMenuButton>\r\n                  {hasSubItems && (\r\n                    <SidebarMenuSub>\r\n                      {isOpen &&\r\n                        item.items!.map((subItem) => (\r\n                          <SidebarMenuSubItem key={subItem.id}>\r\n                            <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\r\n                          </SidebarMenuSubItem>\r\n                        ))}\r\n                    </SidebarMenuSub>\r\n                  )}\r\n                </SidebarMenuItem>\r\n              )\r\n            }\r\n\r\n            return (\r\n              <Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\r\n                <SidebarHeader className=\"px-4 py-2\">\r\n                  <h2 className=\"text-lg font-semibold\">القائمة</h2>\r\n                </SidebarHeader>\r\n                <SidebarContent>\r\n                  <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\r\n                </SidebarContent>\r\n              </Sidebar>\r\n            )\r\n            }`}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"إنشاء مثال\">\n      أنشئ ملف جديد باسم <MdxBadge>FolderExample.tsx</MdxBadge> داخل مجلد <MdxBadge>components</MdxBadge> وأضف الكود التالي:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\n          {`\"use client\"\r\n\r\n            import { FolderTree } from \"./FolderTree\"\r\n\r\n            type FileItem = {\r\n            id: string\r\n            name: string\r\n            type: \"file\" | \"folder\"\r\n            path?: string\r\n            items?: FileItem[]\r\n            }\r\n\r\n            const fileStructure: FileItem[] = [\r\n            {\r\n              id: \"app\",\r\n              name: \"app\",\r\n              type: \"folder\",\r\n              items: [\r\n                {\r\n                  id: \"layout\",\r\n                  name: \"layout.js\",\r\n                  type: \"file\",\r\n                },\r\n                {\r\n                  id: \"marketing\",\r\n                  name: \"(marketing)\",\r\n                  type: \"folder\",\r\n                  items: [\r\n                    {\r\n                      id: \"about\",\r\n                      name: \"about\",\r\n                      type: \"folder\",\r\n                      path: \"/about\",\r\n                      items: [\r\n                        {\r\n                          id: \"about-page\",\r\n                          name: \"page.js\",\r\n                          type: \"file\",\r\n                        },\r\n                      ],\r\n                    },\r\n                  ],\r\n                },\r\n              ],\r\n            },\r\n            ]\r\n\r\n            export default function FolderTreeExample() {\r\n            return (\r\n              <div className=\"flex items-center justify-center\">\r\n                <FolderTree items={fileStructure} />\r\n              </div>\r\n            )\r\n            }\r\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"استخدمه وخصصه كما تشاء\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space space-y-4\">\n  <p className=\"text-base\">\n    يمكنك البدء بإنشاء كائن يحتوي على الخصائص التالية:\n  </p>\n\n  <Pre className=\"language-typescript\">\n    {`type FileItem = {\r\n      id: string\r\n      name: string\r\n      type: \"file\" | \"folder\"\r\n      path?: string\r\n      items?: FileItem[]\r\n      }\r\n\r\n      const fileStructure: FileItem[] = [\r\n      {\r\n        id: \"app\",\r\n        name: \"app\",\r\n        type: \"folder\",\r\n        items: [\r\n          {\r\n            id: \"layout\",\r\n            name: \"layout.js\",\r\n            type: \"file\",\r\n          },\r\n          {\r\n            id: \"marketing\",\r\n            name: \"(marketing)\",\r\n            type: \"folder\",\r\n            items: [\r\n              {\r\n                id: \"about\",\r\n                name: \"about\",\r\n                type: \"folder\",\r\n                path: \"/about\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n      ]\r\n      `}\n  </Pre>\n\n  <p className=\"text-base\">\n    ثم قم بإنشاء وسم <MdxBadge>div</MdxBadge> واستورد الكائن فيه:\n  </p>\n\n  <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\n    {`\"use client\"\r\n\r\n      import { FolderTree } from \"./FolderTree\"\r\n\r\n      export default function FolderTreeExample() {\r\n      return (\r\n        <div className=\"flex items-center justify-center\">\r\n          <FolderTree items={fileStructure} />\r\n        </div>\r\n      )\r\n      }\r\n      `}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: \"هيكلية المجلدات (Folder Structure)\"\r\ndescription: \"هذا القسم يوضح هيكل الملفات وكيفية تنفيذه باستخدام مكون FileTree.\"\r\nlinks:\r\n  doc: https://shadcn-ui/docs/components/sidebar\r\n---\r\n\r\n<ComponentPreview name=\"folder-tree-demo\" />\r\n\r\n## حول المكون\r\nهيكل المجلدات مبني باستخدام مكون <MdxBadge>Sidebar</MdxBadge> من [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"تثبيت الحزم\">\r\nأولاً، تحتاج إلى تثبيت الحزم التالية:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge`}\r\n</Pre>\r\n<Pre className=\"language-bash\">\r\n{`npx shadcn@latest add sidebar`}\r\n</Pre>\r\n</StepItem>\r\n\r\n<StepItem title=\"إنشاء utils.ts\">\r\n<ComponentUtilsText/>\r\n<ComponentUtils/>\r\n</StepItem>\r\n\r\n<StepItem title=\"إنشاء Hook\">\r\nقم بإنشاء مجلد جديد باسم <MdxBadge>hooks</MdxBadge> داخل مشروعك، ثم أنشئ ملف باسم <MdxBadge>use-submenu-state.ts</MdxBadge> وأضف الكود التالي:\r\n<Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\r\n{`import { useState, useCallback } from \"react\"\r\n\r\nexport function useSubmenuState(initialState: Record<string, boolean> = {}) {\r\n   const [openStates, setOpenStates] = useState(initialState)\r\n\r\n   const toggleSubmenu = useCallback((id: string) => {\r\n      setOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\r\n   }, [])\r\n\r\n   return { openStates, toggleSubmenu }\r\n}\r\n`}\r\n</Pre>\r\n</StepItem>\r\n\r\n<StepItem title=\"إنشاء مكون Folder-Tree\">\r\n<ComponentSource name=\"folder-tree-demo\" />\r\n</StepItem>\r\n\r\n<StepItem title=\"إنشاء قائمة المجلدات\">\r\nأنشئ ملف جديد داخل مجلد <MdxBadge>components</MdxBadge> باسم <MdxBadge>FolderTreeMenu.tsx</MdxBadge> وأضف الكود التالي:\r\n<CodeBlockWrapper>\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\r\n{`\"use client\"\r\n\r\nimport { ChevronDown, ChevronRight } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useSubmenuState } from \"@/hooks/use-submenu-state\"\r\nimport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarHeader,\r\n  SidebarMenu,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n} from \"@/components/ui/sidebar\"\r\n\r\ninterface MenuItem {\r\n  id: string\r\n  title: string\r\n  items?: MenuItem[]\r\n}\r\n\r\ninterface FolderTreeMenuProps {\r\n  items: MenuItem[]\r\n}\r\n\r\nexport function FolderTreeMenu({ items }: FolderTreeMenuProps) {\r\n  const { openStates, toggleSubmenu } = useSubmenuState()\r\n\r\n  const renderMenuItem = (item: MenuItem) => {\r\n    const hasSubItems = item.items && item.items.length > 0\r\n    const isOpen = openStates[item.id]\r\n\r\n    return (\r\n      <SidebarMenuItem key={item.id}>\r\n        <SidebarMenuButton\r\n          onClick={() => hasSubItems && toggleSubmenu(item.id)}\r\n          className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\r\n        >\r\n          {item.title}\r\n          {hasSubItems && (\r\n            <span className=\"ml-auto\">\r\n              {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\r\n            </span>\r\n          )}\r\n        </SidebarMenuButton>\r\n        {hasSubItems && (\r\n          <SidebarMenuSub>\r\n            {isOpen &&\r\n              item.items!.map((subItem) => (\r\n                <SidebarMenuSubItem key={subItem.id}>\r\n                  <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\r\n                </SidebarMenuSubItem>\r\n              ))}\r\n          </SidebarMenuSub>\r\n        )}\r\n      </SidebarMenuItem>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\r\n      <SidebarHeader className=\"px-4 py-2\">\r\n        <h2 className=\"text-lg font-semibold\">القائمة</h2>\r\n      </SidebarHeader>\r\n      <SidebarContent>\r\n        <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\r\n      </SidebarContent>\r\n    </Sidebar>\r\n  )\r\n}`}\r\n</Pre>\r\n</CodeBlockWrapper>\r\n</StepItem>\r\n\r\n<StepItem title=\"إنشاء مثال\">\r\nأنشئ ملف جديد باسم <MdxBadge>FolderExample.tsx</MdxBadge> داخل مجلد <MdxBadge>components</MdxBadge> وأضف الكود التالي:\r\n<CodeBlockWrapper>\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\r\n{`\"use client\"\r\n\r\nimport { FolderTree } from \"./FolderTree\"\r\n\r\ntype FileItem = {\r\n  id: string\r\n  name: string\r\n  type: \"file\" | \"folder\"\r\n  path?: string\r\n  items?: FileItem[]\r\n}\r\n\r\nconst fileStructure: FileItem[] = [\r\n  {\r\n    id: \"app\",\r\n    name: \"app\",\r\n    type: \"folder\",\r\n    items: [\r\n      {\r\n        id: \"layout\",\r\n        name: \"layout.js\",\r\n        type: \"file\",\r\n      },\r\n      {\r\n        id: \"marketing\",\r\n        name: \"(marketing)\",\r\n        type: \"folder\",\r\n        items: [\r\n          {\r\n            id: \"about\",\r\n            name: \"about\",\r\n            type: \"folder\",\r\n            path: \"/about\",\r\n            items: [\r\n              {\r\n                id: \"about-page\",\r\n                name: \"page.js\",\r\n                type: \"file\",\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default function FolderTreeExample() {\r\n  return (\r\n    <div className=\"flex items-center justify-center\">\r\n      <FolderTree items={fileStructure} />\r\n    </div>\r\n  )\r\n}\r\n`}\r\n</Pre>\r\n</CodeBlockWrapper>\r\n</StepItem>\r\n\r\n<StepItem title=\"استخدمه وخصصه كما تشاء\" />\r\n</Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space space-y-4\">\r\n<p className=\"text-base\">\r\nيمكنك البدء بإنشاء كائن يحتوي على الخصائص التالية:\r\n</p>\r\n\r\n<Pre className=\"language-typescript\">\r\n{`type FileItem = {\r\n  id: string\r\n  name: string\r\n  type: \"file\" | \"folder\"\r\n  path?: string\r\n  items?: FileItem[]\r\n}\r\n\r\nconst fileStructure: FileItem[] = [\r\n  {\r\n    id: \"app\",\r\n    name: \"app\",\r\n    type: \"folder\",\r\n    items: [\r\n      {\r\n        id: \"layout\",\r\n        name: \"layout.js\",\r\n        type: \"file\",\r\n      },\r\n      {\r\n        id: \"marketing\",\r\n        name: \"(marketing)\",\r\n        type: \"folder\",\r\n        items: [\r\n          {\r\n            id: \"about\",\r\n            name: \"about\",\r\n            type: \"folder\",\r\n            path: \"/about\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n]\r\n`}\r\n</Pre>\r\n\r\n<p className=\"text-base\">\r\nثم قم بإنشاء وسم <MdxBadge>div</MdxBadge> واستورد الكائن فيه:\r\n</p>\r\n\r\n<Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\r\n{`\"use client\"\r\n\r\nimport { FolderTree } from \"./FolderTree\"\r\n\r\nexport default function FolderTreeExample() {\r\n  return (\r\n    <div className=\"flex items-center justify-center\">\r\n      <FolderTree items={fileStructure} />\r\n    </div>\r\n  )\r\n}\r\n`}\r\n</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/input",
    "title": "حقل إدخال (Input)",
    "description": "مكوّن  حقل إدخال  للنصوص، البريد الإلكتروني، رفع الملفات، والمزيد.",
    "content": "<ComponentPreview name=\"input-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت المتطلبات\">\n      أولاً، قم بتثبيت الحزم اللازمة:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن الإدخال\">\n      <ComponentSource name=\"input\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Input } from \"@/components/ui/input\"`}\n  </Pre>\n\n  <Pre>\n    {`const InputDemo = () => {\r\n      return <Input className=\"w-56\" type=\"email\" placeholder=\"البريد الإلكتروني\" />\r\n      }\r\n\r\n      export default InputDemo`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### افتراضي\n\n<ComponentPreview name=\"input-demo\" />\n\n### رفع ملف\n\n<ComponentPreview name=\"input\" variant=\"file\" />\n\n### معطّل\n\n<ComponentPreview name=\"input\" variant=\"disabled\" />\n\n### مع تسمية\n\n<ComponentPreview name=\"input\" variant=\"label\" />\n\n### مع زر\n\n<ComponentPreview name=\"input\" variant=\"button\" />\n",
    "raw": "---\r\ntitle:  حقل إدخال (Input)\r\ndescription: مكوّن  حقل إدخال  للنصوص، البريد الإلكتروني، رفع الملفات، والمزيد.\r\n---\r\n\r\n<ComponentPreview name=\"input-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت المتطلبات\">\r\n      أولاً، قم بتثبيت الحزم اللازمة:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن الإدخال\">\r\n      <ComponentSource name=\"input\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { Input } from \"@/components/ui/input\"`}</Pre>\r\n<Pre>{`const InputDemo = () => {\r\n  return <Input className=\"w-56\" type=\"email\" placeholder=\"البريد الإلكتروني\" />\r\n}\r\n\r\nexport default InputDemo`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n\r\n### افتراضي\r\n<ComponentPreview name=\"input-demo\" />\r\n\r\n### رفع ملف\r\n<ComponentPreview name=\"input\" variant=\"file\" />\r\n\r\n### معطّل\r\n<ComponentPreview name=\"input\" variant=\"disabled\" />\r\n\r\n### مع تسمية\r\n<ComponentPreview name=\"input\" variant=\"label\" />\r\n\r\n### مع زر\r\n<ComponentPreview name=\"input\" variant=\"button\" />\r\n"
  },
  {
    "slug": "/components/label",
    "title": "التسمية (Label)",
    "description": "مكوّن التسمية لاستخدامه مع الحقول وتحسين الوصولية (Accessibility).",
    "content": "<ComponentPreview name=\"label-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت المتطلبات\">\n      قم أولاً بتثبيت الحزم المطلوبة:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن التسمية\">\n      <ComponentSource name=\"label-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Checkbox } from \"@/components/ui/checkbox\"\r\n      import { Label } from \"@/components/ui/label\"`}\n  </Pre>\n\n  <Pre>\n    {`\r\n      const LabelDemo = () => {\r\n      return (\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Checkbox id=\"terms\" />\r\n          <Label\r\n            htmlFor=\"terms\"\r\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n          >\r\n            أوافق على الشروط والأحكام\r\n          </Label>\r\n        </div>\r\n      )\r\n      }\r\n\r\n      export default LabelDemo\r\n      `}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: التسمية (Label)\r\ndescription: مكوّن التسمية لاستخدامه مع الحقول وتحسين الوصولية (Accessibility).\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/label\r\n  api: https://www.radix-ui.com/docs/primitives/components/label#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"label-demo\" />\r\n\r\n## التثبيت\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"تثبيت المتطلبات\">\r\nقم أولاً بتثبيت الحزم المطلوبة:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"إنشاء ملف utils.ts\"> \r\n    <ComponentUtilsText/>\r\n    <ComponentUtils/>\r\n  </StepItem>\r\n  <StepItem title=\"إنشاء مكوّن التسمية\">\r\n    <ComponentSource name=\"label-demo\"/>\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Label } from \"@/components/ui/label\"`}\r\n</Pre>\r\n\r\n<Pre>{`\r\nconst LabelDemo = () => {\r\n  return (\r\n    <div className=\"flex items-center space-x-2\">\r\n      <Checkbox id=\"terms\" />\r\n      <Label\r\n        htmlFor=\"terms\"\r\n        className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n      >\r\n        أوافق على الشروط والأحكام\r\n      </Label>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LabelDemo\r\n`}</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/note",
    "title": "ملاحظات (Notes)",
    "description": "مكوّن مرن لإبراز المعلومات المهمة داخل واجهة المستخدم.",
    "content": "**استخدم مكوّن الملاحظة للتواصل الفعّال وعرض المعلومات المهمة بشكل واضح داخل واجهتك.**\n\n<ComponentPreview name=\"note-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت المتطلبات\">\n      قم بتثبيت الحزم المطلوبة:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن الملاحظة\">\n      <ComponentSource name=\"note-demo\" />\n    </StepItem>\n\n    <StepItem title=\"التخصيص\">\n      يمكنك الآن تعديله وتخصيص تصميمه حسب احتياجاتك.\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import { Note } from \"@/components/ui/note\"`}\n  </Pre>\n\n  <Pre className=\"language-tsx\">\n    {`const NoteDemo = () => {\r\n      return <Note variant=\"info\">هذه ملاحظة معلوماتية.</Note>\r\n      }\r\n\r\n      export default NoteDemo`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### ملاحظة قياسية\n\n<ComponentPreview name=\"note-demo\" />\n\n### ملاحظة نجاح\n\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\n\n### ملاحظة تحذير\n\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\n\n### ملاحظة خطأ\n\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\n\n## ملاحظات قابلة للإغلاق\n\nلجعل الملاحظة قابلة للإغلاق من قِبل المستخدم، أضف الخاصية <MdxBadge>closable</MdxBadge> بالقيمة <MdxBadge>true</MdxBadge>.\n\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\n",
    "raw": "---\r\ntitle:  ملاحظات (Notes)\r\ndescription: مكوّن مرن لإبراز المعلومات المهمة داخل واجهة المستخدم.\r\n---\r\n\r\n**استخدم مكوّن الملاحظة للتواصل الفعّال وعرض المعلومات المهمة بشكل واضح داخل واجهتك.**\r\n\r\n<ComponentPreview name=\"note-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose md:px-0 px-4\"> \r\n<Step>\r\n<StepItem title=\"تثبيت المتطلبات\">\r\nقم بتثبيت الحزم المطلوبة:\r\n<Pre className=\"language-bash\">\r\n{`npm install clsx tailwind-merge`}\r\n</Pre>\r\n</StepItem>\r\n  <StepItem title=\"إنشاء ملف utils.ts\"> \r\n    <ComponentUtilsText/>\r\n    <ComponentUtils/>\r\n  </StepItem>\r\n  <StepItem title=\"إنشاء مكوّن الملاحظة\">\r\n    <ComponentSource name=\"note-demo\"/>\r\n  </StepItem>\r\n  <StepItem title=\"التخصيص\">\r\n    يمكنك الآن تعديله وتخصيص تصميمه حسب احتياجاتك.\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre className=\"language-typescript\">\r\n{`import { Note } from \"@/components/ui/note\"`}\r\n</Pre>\r\n<Pre className=\"language-tsx\">\r\n{`const NoteDemo = () => {\r\n  return <Note variant=\"info\">هذه ملاحظة معلوماتية.</Note>\r\n}\r\n\r\nexport default NoteDemo`}\r\n</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n\r\n### ملاحظة قياسية\r\n<ComponentPreview name=\"note-demo\" />\r\n\r\n### ملاحظة نجاح\r\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\r\n\r\n### ملاحظة تحذير\r\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\r\n\r\n### ملاحظة خطأ\r\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\r\n\r\n## ملاحظات قابلة للإغلاق\r\n\r\nلجعل الملاحظة قابلة للإغلاق من قِبل المستخدم، أضف الخاصية <MdxBadge>closable</MdxBadge> بالقيمة <MdxBadge>true</MdxBadge>.\r\n\r\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\r\n"
  },
  {
    "slug": "/components/popover",
    "title": "نافذة منبثقة (Popover)",
    "description": "لوحة عائمة تظهر عند تفاعل المستخدم مع عنصر معين.",
    "content": "<ComponentPreview name=\"popover-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم\">\n      أولاً، قم بتثبيت الحزم المطلوبة:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون Popover\">\n      <ComponentSource name=\"popover-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## طريقة الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Button } from \"@/components/ui/button\"\r\n      import {\r\n      Popover,\r\n      PopoverContent,\r\n      PopoverTrigger,\r\n      } from \"@/components/ui/popover\"\r\n\r\n      const PopoverDemo = () => {\r\n      return (\r\n        <Popover>\r\n          <PopoverTrigger asChild>\r\n            <Button>اضغط هنا</Button>\r\n          </PopoverTrigger>\r\n          <PopoverContent>\r\n            <p>ضع المحتوى هنا</p>\r\n          </PopoverContent>\r\n        </Popover>\r\n      )\r\n      }\r\n\r\n      export default PopoverDemo`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: نافذة منبثقة (Popover)\r\ndescription: لوحة عائمة تظهر عند تفاعل المستخدم مع عنصر معين.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/popover\r\n  api: https://www.radix-ui.com/docs/primitives/components/popover#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"popover-demo\" />\r\n\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الحزم\">\r\n      أولاً، قم بتثبيت الحزم المطلوبة:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-popover`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكون Popover\">\r\n      <ComponentSource name=\"popover-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## طريقة الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { Button } from \"@/components/ui/button\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\"\r\n\r\nconst PopoverDemo = () => {\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button>اضغط هنا</Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent>\r\n        <p>ضع المحتوى هنا</p>\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nexport default PopoverDemo`}</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/pre",
    "title": "Pre (كتلة كود)",
    "description": "اعرض مقتطفات كود جميلة وقابلة للتخصيص مع ميزات متقدمة مثل تمييز الصياغة، ترقيم الأسطر، وتظليل الأسطر.",
    "content": "<ComponentPreview name=\"code-block-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم\">\n      أولاً، قم بتثبيت Prism.js والحزم المطلوبة:\n\n      <Pre className=\"language-bash\">\n        {`npm install prismjs clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون Pre\">\n      <ComponentSource name=\"pre\" />\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف prism-theme.css\">\n      أنشئ ملف باسم <MdxBadge>prism-theme.css</MdxBadge> في مجلد التطبيق لديك، وضع به تنسيقات Prism.js الخاصة بك.\n\n      <Pre className=\"language-css\" folderPath=\"prism-theme.css\">\n        {`\r\n            :root {\r\n          --code-background: #1e1e1e;\r\n          --code-text-color: #e8e8e8;\r\n          --code-toolbar-background: #252526;\r\n          --code-border-color: #404040;\r\n          --code-folder-path-color: #a0a0a0;\r\n          --code-selection-background: rgba(173, 214, 255, 0.15);\r\n          --code-line-numbers-color: #6e7681;\r\n          --code-line-numbers-hover: #8b949e;\r\n          --sidebar-background: #252526;\r\n          --sidebar-header-background: #333333;\r\n          --sidebar-text-color: #cccccc;\r\n          --sidebar-text-hover: #ffffff;\r\n          --sidebar-text-muted: #8a8a8a;\r\n          --sidebar-item-hover-bg: #2a2d2e;\r\n          --sidebar-item-active-bg: #37373d;\r\n          --sidebar-border-color: #474747;\r\n          --sidebar-resize-handle: #0e639c;\r\n          --sidebar-loading-bg: #37373d;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) {\r\n            --code-background: #fafafa;\r\n            --code-text-color: #24292f;\r\n            --code-toolbar-background: #f0f0f0;\r\n            --code-border-color: #d1d9e0;\r\n            --code-folder-path-color: #636c76;\r\n            --code-selection-background: rgba(0, 92, 197, 0.12);\r\n            --code-line-numbers-color: #8c959f;\r\n            --code-line-numbers-hover: #656d76;\r\n            --sidebar-background: #f6f8fa;\r\n            --sidebar-header-background: #f0f3f6;\r\n            --sidebar-text-color: #24292f;\r\n            --sidebar-text-hover: #0969da;\r\n            --sidebar-text-muted: #656d76;\r\n            --sidebar-item-hover-bg: #f3f4f6;\r\n            --sidebar-item-active-bg: #dbeafe;\r\n            --sidebar-border-color: #d0d7de;\r\n            --sidebar-resize-handle: #0969da;\r\n            --sidebar-loading-bg: #f3f4f6;\r\n          }\r\n          }\r\n\r\n          .code-block-container {\r\n          background-color: var(--code-background);\r\n          border-radius: 12px;\r\n          width: 100%;\r\n          position: relative;\r\n          font-family:\r\n            \"Cascadia Code\", \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\",\r\n            \"Courier New\", monospace;\r\n          overflow: hidden;\r\n          }\r\n\r\n          .code-block-header {\r\n          background-color: var(--code-toolbar-background);\r\n          border-bottom: 1px solid var(--code-border-color);\r\n          border-radius: 6px 6px 0 0;\r\n          }\r\n\r\n          pre[class*=\"language-\"],\r\n          code[class*=\"language-\"] {\r\n          color: var(--code-text-color);\r\n          font-size: 14px;\r\n          text-shadow: none;\r\n          direction: ltr;\r\n          text-align: left;\r\n          white-space: pre;\r\n          word-spacing: normal;\r\n          word-break: normal;\r\n          line-height: 1.5;\r\n          -moz-tab-size: 4;\r\n          -o-tab-size: 4;\r\n          tab-size: 4;\r\n          -webkit-hyphens: none;\r\n          -moz-hyphens: none;\r\n          -ms-hyphens: none;\r\n          hyphens: none;\r\n          background: transparent;\r\n          }\r\n\r\n          pre[class*=\"language-\"] {\r\n          padding: 0.8rem;\r\n          margin: 0;\r\n          overflow-x: auto;\r\n          border-radius: 0 0 6px 6px;\r\n          }\r\n\r\n          :not(pre) > code[class*=\"language-\"] {\r\n          padding: 0.3em;\r\n          border-radius: 0.3em;\r\n          color: #e63946;\r\n          background: var(--code-background);\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) :not(pre) > code[class*=\"language-\"] {\r\n            color: #d73a49;\r\n          }\r\n          }\r\n\r\n          pre[class*=\"language-\"]::selection,\r\n          code[class*=\"language-\"]::selection,\r\n          pre[class*=\"language-\"] *::selection,\r\n          code[class*=\"language-\"] *::selection {\r\n          text-shadow: none;\r\n          background: var(--code-selection-background);\r\n          }\r\n\r\n          .line-numbers .line-numbers-rows {\r\n          border-right: none !important;\r\n          padding-right: 1rem !important;\r\n          top: -2.5px !important;\r\n          left: -39px !important;\r\n          position: absolute;\r\n          height: 100%;\r\n          -webkit-user-select: none;\r\n          -moz-user-select: none;\r\n          -ms-user-select: none;\r\n          user-select: none;\r\n          }\r\n\r\n          .line-numbers-rows > span {\r\n          padding: 0;\r\n          border: 0;\r\n          display: block;\r\n          counter-increment: linenumbers;\r\n          color: var(--code-line-numbers-color) !important;\r\n          font-size: 14px;\r\n          line-height: 1.5;\r\n          text-align: right;\r\n          transition: color 0.2s ease;\r\n          }\r\n\r\n          .line-numbers-rows > span:hover {\r\n          color: var(--code-line-numbers-hover) !important;\r\n          }\r\n\r\n          @media print {\r\n          pre[class*=\"language-\"],\r\n          code[class*=\"language-\"] {\r\n            text-shadow: none;\r\n          }\r\n          }\r\n\r\n          /* Sidebar/File Tree Styles */\r\n          .sidebar-container {\r\n          background-color: var(--sidebar-background);\r\n          color: var(--sidebar-text-color);\r\n          border-color: var(--sidebar-border-color);\r\n          }\r\n\r\n          .sidebar-header {\r\n          background-color: var(--sidebar-header-background);\r\n          border-color: var(--sidebar-border-color);\r\n          color: var(--sidebar-text-color);\r\n          }\r\n\r\n          .sidebar-text {\r\n          color: var(--sidebar-text-color);\r\n          }\r\n\r\n          .sidebar-text-muted {\r\n          color: var(--sidebar-text-muted);\r\n          }\r\n\r\n          .sidebar-item-hover:hover {\r\n          background-color: var(--sidebar-item-hover-bg);\r\n          color: var(--sidebar-text-hover);\r\n          }\r\n\r\n          .sidebar-item-active {\r\n          background-color: var(--sidebar-item-active-bg);\r\n          color: var(--sidebar-text-hover);\r\n          }\r\n\r\n          .sidebar-loading {\r\n          background-color: var(--sidebar-loading-bg);\r\n          }\r\n\r\n          .sidebar-resize-handle {\r\n          background-color: var(--sidebar-resize-handle);\r\n          }\r\n\r\n          .sidebar-open-button {\r\n          background-color: var(--sidebar-background);\r\n          color: var(--sidebar-text-color);\r\n          border-color: var(--sidebar-border-color);\r\n          }\r\n\r\n          .sidebar-open-button:hover {\r\n          background-color: var(--sidebar-item-hover-bg);\r\n          }\r\n\r\n          /* Token styling continues as before... */\r\n          .token.comment,\r\n          .token.prolog {\r\n          color: #7c9961;\r\n          font-style: italic;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.comment,\r\n          :root:not(.dark) .token.prolog {\r\n            color: #6a7f3a;\r\n          }\r\n          }\r\n\r\n          .token.doctype .token.doctype-tag {\r\n          color: #569cd6;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.doctype .token.doctype-tag {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.doctype .token.name {\r\n          color: #9cdcfe;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.doctype .token.name {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          .token.cdata {\r\n          color: #8a8a8a;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.cdata {\r\n            color: #6a737d;\r\n          }\r\n          }\r\n\r\n          .token.punctuation,\r\n          .language-html .language-css .token.punctuation,\r\n          .language-html .language-javascript .token.punctuation {\r\n          color: #e8e8e8;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.punctuation,\r\n          :root:not(.dark) .language-html .language-css .token.punctuation,\r\n          :root:not(.dark) .language-html .language-javascript .token.punctuation {\r\n            color: #24292f;\r\n          }\r\n          }\r\n\r\n          .token.operator,\r\n          .token.entity {\r\n          color: #e8e8e8;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.operator,\r\n          :root:not(.dark) .token.entity {\r\n            color: #24292f;\r\n          }\r\n          }\r\n\r\n          .token.operator.arrow {\r\n          color: #5fb3d4;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.operator.arrow {\r\n            color: #0969da;\r\n          }\r\n          }\r\n\r\n          .token.keyword {\r\n          color: #e879cb;\r\n          font-weight: 500;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.keyword {\r\n            color: #cf222e;\r\n          }\r\n          }\r\n\r\n          .token.keyword.module,\r\n          .token.keyword.control-flow {\r\n          color: #d286c5;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.keyword.module,\r\n          :root:not(.dark) .token.keyword.control-flow {\r\n            color: #8250df;\r\n          }\r\n          }\r\n\r\n          .token.property,\r\n          .token.tag,\r\n          .token.boolean,\r\n          .token.number,\r\n          .token.constant,\r\n          .token.symbol,\r\n          .token.inserted,\r\n          .token.unit {\r\n          color: #c4d9a5;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.property,\r\n          :root:not(.dark) .token.tag,\r\n          :root:not(.dark) .token.boolean,\r\n          :root:not(.dark) .token.number,\r\n          :root:not(.dark) .token.constant,\r\n          :root:not(.dark) .token.symbol,\r\n          :root:not(.dark) .token.inserted,\r\n          :root:not(.dark) .token.unit {\r\n            color: #1a7f37;\r\n          }\r\n          }\r\n\r\n          .token.boolean {\r\n          color: #569cd6;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.boolean {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.constant {\r\n          color: #56c9b0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.constant {\r\n            color: #0969da;\r\n          }\r\n          }\r\n\r\n          .token.selector,\r\n          .token.attr-name,\r\n          .token.string,\r\n          .token.char,\r\n          .token.builtin,\r\n          .token.deleted {\r\n          color: #d4967b;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.selector,\r\n          :root:not(.dark) .token.attr-name,\r\n          :root:not(.dark) .token.string,\r\n          :root:not(.dark) .token.char,\r\n          :root:not(.dark) .token.builtin,\r\n          :root:not(.dark) .token.deleted {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          .token.escape {\r\n          color: #ddc487;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.escape {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .token.function,\r\n          .token.function .token.maybe-class-name {\r\n          color: #ebe2aa;\r\n          font-weight: 500;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.function,\r\n          :root:not(.dark) .token.function .token.maybe-class-name {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .token.class-name,\r\n          .token.maybe-class-name {\r\n          color: #56c9b0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.class-name,\r\n          :root:not(.dark) .token.maybe-class-name {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .token.property,\r\n          .token.variable,\r\n          .token.imports .token.maybe-class-name,\r\n          .token.exports .token.maybe-class-name {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.property,\r\n          :root:not(.dark) .token.variable,\r\n          :root:not(.dark) .token.imports .token.maybe-class-name,\r\n          :root:not(.dark) .token.exports .token.maybe-class-name {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.parameter {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.parameter {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.console {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.console {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.interpolation {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.interpolation {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.punctuation.interpolation-punctuation {\r\n          color: #569cd6;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.punctuation.interpolation-punctuation {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .language-css .token.string.url {\r\n          text-decoration: underline;\r\n          }\r\n\r\n          .token.atrule {\r\n          color: #d4967b;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.atrule {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          .token.atrule .token.rule {\r\n          color: #d286c5;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.atrule .token.rule {\r\n            color: #8250df;\r\n          }\r\n          }\r\n\r\n          .token.atrule .token.url {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.atrule .token.url {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.atrule .token.url .token.function {\r\n          color: #f4e474;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.atrule .token.url .token.function {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .token.atrule .token.url .token.punctuation {\r\n          color: #e8e8e8;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.atrule .token.url .token.punctuation {\r\n            color: #24292f;\r\n          }\r\n          }\r\n\r\n          .token.selector {\r\n          color: #ddc487;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.selector {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .token.tag {\r\n          color: #569cd6;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.tag {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.tag .token.punctuation {\r\n          color: #c9c9c9;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.tag .token.punctuation {\r\n            color: #24292f;\r\n          }\r\n          }\r\n\r\n          .token.attr-name {\r\n          color: #a8dcf0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.attr-name {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.attr-value,\r\n          .token.attr-value .token.punctuation {\r\n          color: #d4967b;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.attr-value,\r\n          :root:not(.dark) .token.attr-value .token.punctuation {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          .token.attr-value .token.punctuation.attr-equals {\r\n          color: #e8e8e8;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.attr-value .token.punctuation.attr-equals {\r\n            color: #24292f;\r\n          }\r\n          }\r\n\r\n          .language-html .token.punctuation {\r\n          color: #9a9a9a;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .language-html .token.punctuation {\r\n            color: #6a7681;\r\n          }\r\n          }\r\n\r\n          pre[class*=\"language-javascript\"],\r\n          code[class*=\"language-javascript\"],\r\n          pre[class*=\"language-jsx\"],\r\n          code[class*=\"language-jsx\"],\r\n          code[class*=\"language-json\"],\r\n          pre[class*=\"language-typescript\"],\r\n          code[class*=\"language-typescript\"],\r\n          pre[class*=\"language-tsx\"],\r\n          code[class*=\"language-tsx\"] {\r\n          color: #569cd6;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) pre[class*=\"language-javascript\"],\r\n          :root:not(.dark) code[class*=\"language-javascript\"],\r\n          :root:not(.dark) pre[class*=\"language-jsx\"],\r\n          :root:not(.dark) code[class*=\"language-jsx\"],\r\n          :root:not(.dark) pre[class*=\"language-typescript\"],\r\n          :root:not(.dark) code[class*=\"language-typescript\"],\r\n          :root:not(.dark) pre[class*=\"language-tsx\"],\r\n          :root:not(.dark) code[class*=\"language-tsx\"] {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          pre[class*=\"language-css\"],\r\n          code[class*=\"language-css\"] {\r\n          color: #d4967b;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) pre[class*=\"language-css\"],\r\n          :root:not(.dark) code[class*=\"language-css\"] {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          pre[class*=\"language-html\"],\r\n          code[class*=\"language-html\"] {\r\n          color: var(--code-text-color) !important;\r\n          }\r\n\r\n          .token.regex {\r\n          color: #e67373;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.regex {\r\n            color: #032f62;\r\n          }\r\n          }\r\n\r\n          .language-regex .token.anchor {\r\n          color: #ebe2aa;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .language-regex .token.anchor {\r\n            color: #6f42c1;\r\n          }\r\n          }\r\n\r\n          .namespace {\r\n          opacity: 0.8;\r\n          }\r\n\r\n          .token.namespace {\r\n          color: #56c9b0;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.namespace {\r\n            color: #0969da;\r\n          }\r\n          }\r\n\r\n          .token.important {\r\n          color: #569cd6;\r\n          font-weight: bold;\r\n          }\r\n\r\n          @media (prefers-color-scheme: light) {\r\n          :root:not(.dark) .token.important {\r\n            color: #005cc5;\r\n          }\r\n          }\r\n\r\n          .token.italic {\r\n          font-style: italic;\r\n          }\r\n\r\n          .plain-text {\r\n          color: var(--code-text-color);\r\n          }\r\n\r\n          pre[class*=\"language-\"] > code[class*=\"language-\"] {\r\n          position: relative;\r\n          z-index: 1;\r\n          }\r\n\r\n          pre[class*=\"language-\"]:focus-visible {\r\n          outline: 2px solid #0969da;\r\n          outline-offset: 2px;\r\n          }\r\n\r\n          @media (prefers-color-scheme: dark) {\r\n          pre[class*=\"language-\"]:focus-visible {\r\n            outline-color: #58a6ff;\r\n          }\r\n          }\r\n\r\n          .token.keyword,\r\n          .token.function {\r\n          text-shadow: none;\r\n          }\r\n\r\n          .token.comment .token.keyword {\r\n          color: inherit;\r\n          font-weight: normal;\r\n          }\r\n\r\n            `}\n      </Pre>\n\n      <Note type=\"note\" className=\"!mb-5 !my-3\">\n        يمكنك تخصيص التنسيق ليشبه مظهر Visual Studio Code (الوضع الداكن) أو أي مظهر آخر.\n      </Note>\n    </StepItem>\n\n    <StepItem title=\"إضافة لغة للكود\">\n      هذه الخطوة <MdxBadge>اختيارية</MdxBadge>.\\\n      يمكنك عرض لغة الكود (JS, TS, HTML …إلخ).\\\n      يمكن تمرير <MdxBadge>صور</MdxBadge> أو <MdxBadge>أيقونات</MdxBadge>.\\\n      إذا اخترت أيقونات فتأكد أن المكتبة تدعم تغيير ألوانها.\\\n      مثال: أنشئ ملف <MdxBadge>language-icon.ts</MdxBadge> يحتوي على أيقونات `js`, `ts`, `html`، إلخ.\n\n      <Pre className=\"language-typescript\" folderPath=\"settings/LanguageIcon.tsx\">\n        {`\r\n            import { CustomImage } from \"@/components/custome-image\"\r\n          import { FileJson2, Terminal } from \"lucide-react\"\r\n          import type { JSX } from \"react\"\r\n\r\n          export const languageIcons: Record<string, JSX.Element> = {\r\n          javascript: (\r\n            <CustomImage\r\n              src=\"/icons/javascript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"javascript\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          js: (\r\n            <CustomImage\r\n              src=\"/icons/javascript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"javascript\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          jsx: (\r\n            <CustomImage\r\n              src=\"/icons/javascript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"jsx\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          typescript: (\r\n            <CustomImage\r\n              src=\"/icons/typescript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"typescript\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          ts: (\r\n            <CustomImage\r\n              src=\"/icons/typescript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"typescript\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          tsx: (\r\n            <CustomImage\r\n              src=\"/icons/typescript.svg\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              alt=\"typescript\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          html: (\r\n            <CustomImage\r\n              src=\"/icons/html.svg\"\r\n              alt=\"html\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          css: (\r\n            <CustomImage\r\n              src=\"/icons/css.svg\"\r\n              alt=\"css\"\r\n              className=\"w-[18px] h-[18px]\"\r\n              width={10}\r\n              height={10}\r\n              quality={100}\r\n            />\r\n          ),\r\n          bash: <Terminal className=\"w-[18px] h-[18px] dark:text-gray-100 text-gray-950 rounded-lg\" />,\r\n          json: <FileJson2 className=\"w-[18px] h-[18px] text-yellow-500 rounded-lg\" />\r\n          }\r\n            `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"الآن يمكنك استخدامه وتخصيصه بحرية\" />\n  </Step>\n</div>\n\n## طريقة الاستخدام\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"`}\n  </Pre>\n\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"\r\n      import { cn } from \"@/lib/utils\"\r\n\r\n      const CodeBlockDemo = ({ className }: { className: string }) => {\r\n      const ExampleCode = \\`function MyComponent(props) {\r\n        return (\r\n          <div>\r\n            <h1>مرحباً، {props.name}!</h1>\r\n            <p>هذا مثال على مكون React.</p>\r\n          </div>\r\n        )\r\n      };\\`\r\n\r\n      return (\r\n        <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}>\r\n          {ExampleCode}\r\n        </Pre>\r\n      )\r\n      }\r\n\r\n      export default CodeBlockDemo`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: Pre (كتلة كود)\r\ndescription: اعرض مقتطفات كود جميلة وقابلة للتخصيص مع ميزات متقدمة مثل تمييز الصياغة، ترقيم الأسطر، وتظليل الأسطر.\r\n---\r\n\r\n<ComponentPreview name=\"code-block-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n  <StepItem title=\"تثبيت الحزم\">\r\n    أولاً، قم بتثبيت Prism.js والحزم المطلوبة:\r\n    <Pre className=\"language-bash\">\r\n      {`npm install prismjs clsx tailwind-merge`}\r\n    </Pre>\r\n  </StepItem>\r\n  <StepItem title=\"إنشاء ملف utils.ts\">\r\n    <ComponentUtilsText />\r\n    <ComponentUtils />\r\n  </StepItem>\r\n  <StepItem title=\"إنشاء مكون Pre\">\r\n    <ComponentSource name=\"pre\" />\r\n  </StepItem>\r\n  <StepItem title=\"إنشاء ملف prism-theme.css\">\r\n    أنشئ ملف باسم <MdxBadge>prism-theme.css</MdxBadge> في مجلد التطبيق لديك، وضع به تنسيقات Prism.js الخاصة بك.\r\n    <Pre className=\"language-css\" folderPath=\"prism-theme.css\" >\r\n    {`\r\n    :root {\r\n  --code-background: #1e1e1e;\r\n  --code-text-color: #e8e8e8;\r\n  --code-toolbar-background: #252526;\r\n  --code-border-color: #404040;\r\n  --code-folder-path-color: #a0a0a0;\r\n  --code-selection-background: rgba(173, 214, 255, 0.15);\r\n  --code-line-numbers-color: #6e7681;\r\n  --code-line-numbers-hover: #8b949e;\r\n  --sidebar-background: #252526;\r\n  --sidebar-header-background: #333333;\r\n  --sidebar-text-color: #cccccc;\r\n  --sidebar-text-hover: #ffffff;\r\n  --sidebar-text-muted: #8a8a8a;\r\n  --sidebar-item-hover-bg: #2a2d2e;\r\n  --sidebar-item-active-bg: #37373d;\r\n  --sidebar-border-color: #474747;\r\n  --sidebar-resize-handle: #0e639c;\r\n  --sidebar-loading-bg: #37373d;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) {\r\n    --code-background: #fafafa;\r\n    --code-text-color: #24292f;\r\n    --code-toolbar-background: #f0f0f0;\r\n    --code-border-color: #d1d9e0;\r\n    --code-folder-path-color: #636c76;\r\n    --code-selection-background: rgba(0, 92, 197, 0.12);\r\n    --code-line-numbers-color: #8c959f;\r\n    --code-line-numbers-hover: #656d76;\r\n    --sidebar-background: #f6f8fa;\r\n    --sidebar-header-background: #f0f3f6;\r\n    --sidebar-text-color: #24292f;\r\n    --sidebar-text-hover: #0969da;\r\n    --sidebar-text-muted: #656d76;\r\n    --sidebar-item-hover-bg: #f3f4f6;\r\n    --sidebar-item-active-bg: #dbeafe;\r\n    --sidebar-border-color: #d0d7de;\r\n    --sidebar-resize-handle: #0969da;\r\n    --sidebar-loading-bg: #f3f4f6;\r\n  }\r\n}\r\n\r\n.code-block-container {\r\n  background-color: var(--code-background);\r\n  border-radius: 12px;\r\n  width: 100%;\r\n  position: relative;\r\n  font-family:\r\n    \"Cascadia Code\", \"Fira Code\", \"JetBrains Mono\", \"Consolas\", \"Monaco\",\r\n    \"Courier New\", monospace;\r\n  overflow: hidden;\r\n}\r\n\r\n.code-block-header {\r\n  background-color: var(--code-toolbar-background);\r\n  border-bottom: 1px solid var(--code-border-color);\r\n  border-radius: 6px 6px 0 0;\r\n}\r\n\r\npre[class*=\"language-\"],\r\ncode[class*=\"language-\"] {\r\n  color: var(--code-text-color);\r\n  font-size: 14px;\r\n  text-shadow: none;\r\n  direction: ltr;\r\n  text-align: left;\r\n  white-space: pre;\r\n  word-spacing: normal;\r\n  word-break: normal;\r\n  line-height: 1.5;\r\n  -moz-tab-size: 4;\r\n  -o-tab-size: 4;\r\n  tab-size: 4;\r\n  -webkit-hyphens: none;\r\n  -moz-hyphens: none;\r\n  -ms-hyphens: none;\r\n  hyphens: none;\r\n  background: transparent;\r\n}\r\n\r\npre[class*=\"language-\"] {\r\n  padding: 0.8rem;\r\n  margin: 0;\r\n  overflow-x: auto;\r\n  border-radius: 0 0 6px 6px;\r\n}\r\n\r\n:not(pre) > code[class*=\"language-\"] {\r\n  padding: 0.3em;\r\n  border-radius: 0.3em;\r\n  color: #e63946;\r\n  background: var(--code-background);\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) :not(pre) > code[class*=\"language-\"] {\r\n    color: #d73a49;\r\n  }\r\n}\r\n\r\npre[class*=\"language-\"]::selection,\r\ncode[class*=\"language-\"]::selection,\r\npre[class*=\"language-\"] *::selection,\r\ncode[class*=\"language-\"] *::selection {\r\n  text-shadow: none;\r\n  background: var(--code-selection-background);\r\n}\r\n\r\n.line-numbers .line-numbers-rows {\r\n  border-right: none !important;\r\n  padding-right: 1rem !important;\r\n  top: -2.5px !important;\r\n  left: -39px !important;\r\n  position: absolute;\r\n  height: 100%;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n\r\n.line-numbers-rows > span {\r\n  padding: 0;\r\n  border: 0;\r\n  display: block;\r\n  counter-increment: linenumbers;\r\n  color: var(--code-line-numbers-color) !important;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  text-align: right;\r\n  transition: color 0.2s ease;\r\n}\r\n\r\n.line-numbers-rows > span:hover {\r\n  color: var(--code-line-numbers-hover) !important;\r\n}\r\n\r\n@media print {\r\n  pre[class*=\"language-\"],\r\n  code[class*=\"language-\"] {\r\n    text-shadow: none;\r\n  }\r\n}\r\n\r\n/* Sidebar/File Tree Styles */\r\n.sidebar-container {\r\n  background-color: var(--sidebar-background);\r\n  color: var(--sidebar-text-color);\r\n  border-color: var(--sidebar-border-color);\r\n}\r\n\r\n.sidebar-header {\r\n  background-color: var(--sidebar-header-background);\r\n  border-color: var(--sidebar-border-color);\r\n  color: var(--sidebar-text-color);\r\n}\r\n\r\n.sidebar-text {\r\n  color: var(--sidebar-text-color);\r\n}\r\n\r\n.sidebar-text-muted {\r\n  color: var(--sidebar-text-muted);\r\n}\r\n\r\n.sidebar-item-hover:hover {\r\n  background-color: var(--sidebar-item-hover-bg);\r\n  color: var(--sidebar-text-hover);\r\n}\r\n\r\n.sidebar-item-active {\r\n  background-color: var(--sidebar-item-active-bg);\r\n  color: var(--sidebar-text-hover);\r\n}\r\n\r\n.sidebar-loading {\r\n  background-color: var(--sidebar-loading-bg);\r\n}\r\n\r\n.sidebar-resize-handle {\r\n  background-color: var(--sidebar-resize-handle);\r\n}\r\n\r\n.sidebar-open-button {\r\n  background-color: var(--sidebar-background);\r\n  color: var(--sidebar-text-color);\r\n  border-color: var(--sidebar-border-color);\r\n}\r\n\r\n.sidebar-open-button:hover {\r\n  background-color: var(--sidebar-item-hover-bg);\r\n}\r\n\r\n/* Token styling continues as before... */\r\n.token.comment,\r\n.token.prolog {\r\n  color: #7c9961;\r\n  font-style: italic;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.comment,\r\n  :root:not(.dark) .token.prolog {\r\n    color: #6a7f3a;\r\n  }\r\n}\r\n\r\n.token.doctype .token.doctype-tag {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.doctype .token.doctype-tag {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.doctype .token.name {\r\n  color: #9cdcfe;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.doctype .token.name {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.cdata {\r\n  color: #8a8a8a;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.cdata {\r\n    color: #6a737d;\r\n  }\r\n}\r\n\r\n.token.punctuation,\r\n.language-html .language-css .token.punctuation,\r\n.language-html .language-javascript .token.punctuation {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.punctuation,\r\n  :root:not(.dark) .language-html .language-css .token.punctuation,\r\n  :root:not(.dark) .language-html .language-javascript .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.operator,\r\n.token.entity {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.operator,\r\n  :root:not(.dark) .token.entity {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.operator.arrow {\r\n  color: #5fb3d4;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.operator.arrow {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.keyword {\r\n  color: #e879cb;\r\n  font-weight: 500;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.keyword {\r\n    color: #cf222e;\r\n  }\r\n}\r\n\r\n.token.keyword.module,\r\n.token.keyword.control-flow {\r\n  color: #d286c5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.keyword.module,\r\n  :root:not(.dark) .token.keyword.control-flow {\r\n    color: #8250df;\r\n  }\r\n}\r\n\r\n.token.property,\r\n.token.tag,\r\n.token.boolean,\r\n.token.number,\r\n.token.constant,\r\n.token.symbol,\r\n.token.inserted,\r\n.token.unit {\r\n  color: #c4d9a5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.property,\r\n  :root:not(.dark) .token.tag,\r\n  :root:not(.dark) .token.boolean,\r\n  :root:not(.dark) .token.number,\r\n  :root:not(.dark) .token.constant,\r\n  :root:not(.dark) .token.symbol,\r\n  :root:not(.dark) .token.inserted,\r\n  :root:not(.dark) .token.unit {\r\n    color: #1a7f37;\r\n  }\r\n}\r\n\r\n.token.boolean {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.boolean {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.constant {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.constant {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.selector,\r\n.token.attr-name,\r\n.token.string,\r\n.token.char,\r\n.token.builtin,\r\n.token.deleted {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.selector,\r\n  :root:not(.dark) .token.attr-name,\r\n  :root:not(.dark) .token.string,\r\n  :root:not(.dark) .token.char,\r\n  :root:not(.dark) .token.builtin,\r\n  :root:not(.dark) .token.deleted {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.escape {\r\n  color: #ddc487;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.escape {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.function,\r\n.token.function .token.maybe-class-name {\r\n  color: #ebe2aa;\r\n  font-weight: 500;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.function,\r\n  :root:not(.dark) .token.function .token.maybe-class-name {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.class-name,\r\n.token.maybe-class-name {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.class-name,\r\n  :root:not(.dark) .token.maybe-class-name {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.property,\r\n.token.variable,\r\n.token.imports .token.maybe-class-name,\r\n.token.exports .token.maybe-class-name {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.property,\r\n  :root:not(.dark) .token.variable,\r\n  :root:not(.dark) .token.imports .token.maybe-class-name,\r\n  :root:not(.dark) .token.exports .token.maybe-class-name {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.parameter {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.parameter {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.console {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.console {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.interpolation {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.interpolation {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.punctuation.interpolation-punctuation {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.punctuation.interpolation-punctuation {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.language-css .token.string.url {\r\n  text-decoration: underline;\r\n}\r\n\r\n.token.atrule {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.atrule .token.rule {\r\n  color: #d286c5;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.rule {\r\n    color: #8250df;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url .token.function {\r\n  color: #f4e474;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url .token.function {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.atrule .token.url .token.punctuation {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.atrule .token.url .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.selector {\r\n  color: #ddc487;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.selector {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.token.tag {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.tag {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.tag .token.punctuation {\r\n  color: #c9c9c9;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.tag .token.punctuation {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.token.attr-name {\r\n  color: #a8dcf0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-name {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.attr-value,\r\n.token.attr-value .token.punctuation {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-value,\r\n  :root:not(.dark) .token.attr-value .token.punctuation {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.token.attr-value .token.punctuation.attr-equals {\r\n  color: #e8e8e8;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.attr-value .token.punctuation.attr-equals {\r\n    color: #24292f;\r\n  }\r\n}\r\n\r\n.language-html .token.punctuation {\r\n  color: #9a9a9a;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .language-html .token.punctuation {\r\n    color: #6a7681;\r\n  }\r\n}\r\n\r\npre[class*=\"language-javascript\"],\r\ncode[class*=\"language-javascript\"],\r\npre[class*=\"language-jsx\"],\r\ncode[class*=\"language-jsx\"],\r\ncode[class*=\"language-json\"],\r\npre[class*=\"language-typescript\"],\r\ncode[class*=\"language-typescript\"],\r\npre[class*=\"language-tsx\"],\r\ncode[class*=\"language-tsx\"] {\r\n  color: #569cd6;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) pre[class*=\"language-javascript\"],\r\n  :root:not(.dark) code[class*=\"language-javascript\"],\r\n  :root:not(.dark) pre[class*=\"language-jsx\"],\r\n  :root:not(.dark) code[class*=\"language-jsx\"],\r\n  :root:not(.dark) pre[class*=\"language-typescript\"],\r\n  :root:not(.dark) code[class*=\"language-typescript\"],\r\n  :root:not(.dark) pre[class*=\"language-tsx\"],\r\n  :root:not(.dark) code[class*=\"language-tsx\"] {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\npre[class*=\"language-css\"],\r\ncode[class*=\"language-css\"] {\r\n  color: #d4967b;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) pre[class*=\"language-css\"],\r\n  :root:not(.dark) code[class*=\"language-css\"] {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\npre[class*=\"language-html\"],\r\ncode[class*=\"language-html\"] {\r\n  color: var(--code-text-color) !important;\r\n}\r\n\r\n.token.regex {\r\n  color: #e67373;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.regex {\r\n    color: #032f62;\r\n  }\r\n}\r\n\r\n.language-regex .token.anchor {\r\n  color: #ebe2aa;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .language-regex .token.anchor {\r\n    color: #6f42c1;\r\n  }\r\n}\r\n\r\n.namespace {\r\n  opacity: 0.8;\r\n}\r\n\r\n.token.namespace {\r\n  color: #56c9b0;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.namespace {\r\n    color: #0969da;\r\n  }\r\n}\r\n\r\n.token.important {\r\n  color: #569cd6;\r\n  font-weight: bold;\r\n}\r\n\r\n@media (prefers-color-scheme: light) {\r\n  :root:not(.dark) .token.important {\r\n    color: #005cc5;\r\n  }\r\n}\r\n\r\n.token.italic {\r\n  font-style: italic;\r\n}\r\n\r\n.plain-text {\r\n  color: var(--code-text-color);\r\n}\r\n\r\npre[class*=\"language-\"] > code[class*=\"language-\"] {\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n\r\npre[class*=\"language-\"]:focus-visible {\r\n  outline: 2px solid #0969da;\r\n  outline-offset: 2px;\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  pre[class*=\"language-\"]:focus-visible {\r\n    outline-color: #58a6ff;\r\n  }\r\n}\r\n\r\n.token.keyword,\r\n.token.function {\r\n  text-shadow: none;\r\n}\r\n\r\n.token.comment .token.keyword {\r\n  color: inherit;\r\n  font-weight: normal;\r\n}\r\n\r\n    `}\r\n    </Pre>\r\n    <Note type=\"note\" className=\"!mb-5 !my-3\">\r\n      يمكنك تخصيص التنسيق ليشبه مظهر Visual Studio Code (الوضع الداكن) أو أي مظهر آخر.\r\n    </Note>\r\n  </StepItem>\r\n  <StepItem title=\"إضافة لغة للكود\">\r\n    هذه الخطوة <MdxBadge>اختيارية</MdxBadge>.  \r\n    يمكنك عرض لغة الكود (JS, TS, HTML …إلخ).  \r\n    يمكن تمرير <MdxBadge>صور</MdxBadge> أو <MdxBadge>أيقونات</MdxBadge>.  \r\n    إذا اخترت أيقونات فتأكد أن المكتبة تدعم تغيير ألوانها.  \r\n    مثال: أنشئ ملف <MdxBadge>language-icon.ts</MdxBadge> يحتوي على أيقونات `js`, `ts`, `html`، إلخ.\r\n        <Pre className=\"language-typescript\" folderPath=\"settings/LanguageIcon.tsx\" >\r\n    {`\r\n    import { CustomImage } from \"@/components/custome-image\"\r\nimport { FileJson2, Terminal } from \"lucide-react\"\r\nimport type { JSX } from \"react\"\r\n\r\nexport const languageIcons: Record<string, JSX.Element> = {\r\n  javascript: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"javascript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  js: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"javascript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  jsx: (\r\n    <CustomImage\r\n      src=\"/icons/javascript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"jsx\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  typescript: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  ts: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  tsx: (\r\n    <CustomImage\r\n      src=\"/icons/typescript.svg\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      alt=\"typescript\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  html: (\r\n    <CustomImage\r\n      src=\"/icons/html.svg\"\r\n      alt=\"html\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  css: (\r\n    <CustomImage\r\n      src=\"/icons/css.svg\"\r\n      alt=\"css\"\r\n      className=\"w-[18px] h-[18px]\"\r\n      width={10}\r\n      height={10}\r\n      quality={100}\r\n    />\r\n  ),\r\n  bash: <Terminal className=\"w-[18px] h-[18px] dark:text-gray-100 text-gray-950 rounded-lg\" />,\r\n  json: <FileJson2 className=\"w-[18px] h-[18px] text-yellow-500 rounded-lg\" />\r\n}\r\n    `}\r\n    </Pre>\r\n  </StepItem>\r\n  <StepItem title=\"الآن يمكنك استخدامه وتخصيصه بحرية\" />\r\n</Step>\r\n</div>\r\n\r\n## طريقة الاستخدام\r\n\r\n<div className=\"not-prose space-y-4\">\r\n<Pre>\r\n{`import Pre from \"@/components/ui/pre\"`}\r\n</Pre>\r\n<Pre>\r\n{`import Pre from \"@/components/ui/pre\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst CodeBlockDemo = ({ className }: { className: string }) => {\r\n  const ExampleCode = \\`function MyComponent(props) {\r\n    return (\r\n      <div>\r\n        <h1>مرحباً، {props.name}!</h1>\r\n        <p>هذا مثال على مكون React.</p>\r\n      </div>\r\n    )\r\n  };\\`\r\n\r\n  return (\r\n    <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}>\r\n      {ExampleCode}\r\n    </Pre>\r\n  )\r\n}\r\n\r\nexport default CodeBlockDemo`}\r\n</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/product-card",
    "title": "بطاقة منتج (Product Card)",
    "description": "مكوّن بطاقة منتج قابل للتخصيص لعرض معلومات المنتج مثل الصورة، العنوان، الوصف، السعر، وأزرار الإجراءات.",
    "content": "<ComponentPreview name=\"product-card-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الحزم\">\n      أولاً، قم بتثبيت الحزم المطلوبة:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن بطاقة المنتج\">\n      <ComponentSource name=\"product-card-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ProductCard } from \"@/components/ui/product-card\"\r\n\r\n      const ProductCardDemo = () => {\r\n      return (\r\n        <ProductCard\r\n          image=\"/images/sample-product.jpg\"\r\n          title=\"سماعات لاسلكية\"\r\n          description=\"سماعات عالية الجودة مع خاصية إلغاء الضوضاء.\"\r\n          price=\"199$\"\r\n          ctaLabel=\"أضف إلى السلة\"\r\n          onCtaClick={() => alert(\"تمت الإضافة إلى السلة!\")}\r\n        />\r\n      )\r\n      }\r\n\r\n      export default ProductCardDemo`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: بطاقة منتج (Product Card)\r\ndescription: مكوّن بطاقة منتج قابل للتخصيص لعرض معلومات المنتج مثل الصورة، العنوان، الوصف، السعر، وأزرار الإجراءات.\r\n---\r\n\r\n<ComponentPreview name=\"product-card-demo\" />\r\n\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الحزم\">\r\n      أولاً، قم بتثبيت الحزم المطلوبة:\r\n      <Pre className=\"language-bash\">{`npm install clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن بطاقة المنتج\">\r\n      <ComponentSource name=\"product-card-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>\r\n{`import { ProductCard } from \"@/components/ui/product-card\"\r\n\r\nconst ProductCardDemo = () => {\r\n  return (\r\n    <ProductCard\r\n      image=\"/images/sample-product.jpg\"\r\n      title=\"سماعات لاسلكية\"\r\n      description=\"سماعات عالية الجودة مع خاصية إلغاء الضوضاء.\"\r\n      price=\"199$\"\r\n      ctaLabel=\"أضف إلى السلة\"\r\n      onCtaClick={() => alert(\"تمت الإضافة إلى السلة!\")}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ProductCardDemo`}\r\n</Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/scroll-area",
    "title": "منطقة التمرير (Scroll Area)",
    "description": "مكوّن مساحة التمرير",
    "content": "<ComponentPreview name=\"scroll-area-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت التبعيات\">\n      أولاً، ستحتاج إلى تثبيت التبعيات اللازمة للتنسيق ووظائف الأدوات. تتضمن هذه الحزم <MdxBadge>clsx</MdxBadge> لإدارة أسماء الأصناف الشرطية و<MdxBadge>tailwind-merge</MdxBadge> لمعالجة تعارضات أصناف Tailwind CSS بكفاءة.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Scroll-Area\">\n      <ComponentSource name=\"scroll-area\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ScrollArea } from \"@/components/ui/scroll-area\"`}\n  </Pre>\n\n  <Pre>\n    {`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\r\n      بدأ المهرّج بالتسلل إلى القلعة في منتصف الليل وترك النكات في كل مكان: تحت\r\n      وسادة الملك، في حسائه، وحتى في مرحاضه الملكي. كان الملك غاضبًا، لكنه لم\r\n      يتمكّن من إيقاف المهرّج. وفي يوم من الأيام، اكتشف شعب المملكة أن النكات\r\n      التي يتركها المهرّج كانت مضحكة لدرجة أنهم لم يستطيعوا التوقف عن الضحك.\r\n      وبمجرد أن بدأوا بالضحك، لم يتمكّنوا من التوقف.\r\n      </ScrollArea>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### أفقي\n\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\n",
    "raw": "---\r\ntitle: منطقة التمرير (Scroll Area)\r\ndescription: مكوّن مساحة التمرير\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/scroll-area\r\n  api: https://www.radix-ui.com/docs/primitives/components/scroll-area#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"scroll-area-demo\" />\r\n## التثبيت\r\n<div className=\"not-prose md:px-0 px-4\">\r\n<Step>\r\n<StepItem title=\"تثبيت التبعيات\">\r\nأولاً، ستحتاج إلى تثبيت التبعيات اللازمة للتنسيق ووظائف الأدوات. تتضمن هذه الحزم <MdxBadge>clsx</MdxBadge> لإدارة أسماء الأصناف الشرطية و<MdxBadge>tailwind-merge</MdxBadge> لمعالجة تعارضات أصناف Tailwind CSS بكفاءة.\r\n\r\n<Pre className=\"language-bash\">\r\n  {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\r\n</Pre>\r\n\r\n</StepItem>\r\n  <StepItem title=\"إنشاء ملف utils.ts\"> \r\n  <ComponentUtilsText/>\r\n  <ComponentUtils/>\r\n  </StepItem>\r\n<StepItem title=\"إنشاء مكوّن Scroll-Area\">\r\n  <ComponentSource name=\"scroll-area\" />\r\n  </StepItem>\r\n</Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n<Pre>{`import { ScrollArea } from \"@/components/ui/scroll-area\"`}</Pre>\r\n<Pre>{`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\r\n  بدأ المهرّج بالتسلل إلى القلعة في منتصف الليل وترك النكات في كل مكان: تحت\r\n  وسادة الملك، في حسائه، وحتى في مرحاضه الملكي. كان الملك غاضبًا، لكنه لم\r\n  يتمكّن من إيقاف المهرّج. وفي يوم من الأيام، اكتشف شعب المملكة أن النكات\r\n  التي يتركها المهرّج كانت مضحكة لدرجة أنهم لم يستطيعوا التوقف عن الضحك.\r\n  وبمجرد أن بدأوا بالضحك، لم يتمكّنوا من التوقف.\r\n</ScrollArea>`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n### أفقي\r\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\r\n"
  },
  {
    "slug": "/components/separator",
    "title": "الفاصل (Separator)",
    "description": "مكوّن الفاصل",
    "content": "<ComponentPreview name=\"separator-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت التبعيات\">\n      أولاً، تحتاج إلى تثبيت التبعيات التالية:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-separator`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Separator\">\n      <ComponentSource name=\"separator-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Separator } from \"@/components/ui/separator\"`}\n  </Pre>\n\n  <Pre>\n    {`<Separator />`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### عمودي\n\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\n\n### الوزن\n\n#### فائق الخفة\n\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\n\n#### خفيف\n\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\n\n#### عادي\n\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\n",
    "raw": "---\r\ntitle: الفاصل (Separator)\r\ndescription: مكوّن الفاصل\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/separator\r\n  api: https://www.radix-ui.com/docs/primitives/components/separator#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"separator-demo\" />\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت التبعيات\">\r\n      أولاً، تحتاج إلى تثبيت التبعيات التالية:\r\n      <Pre>{`npm install clsx tailwind-merge @radix-ui/react-separator`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Separator\">\r\n      <ComponentSource name=\"separator-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { Separator } from \"@/components/ui/separator\"`}</Pre>\r\n  <Pre>{`<Separator />`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n### عمودي\r\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\r\n\r\n### الوزن\r\n#### فائق الخفة\r\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\r\n\r\n#### خفيف\r\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\r\n\r\n#### عادي\r\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\r\n"
  },
  {
    "slug": "/components/sheet",
    "title": "لوحة (Sheet)",
    "description": "اللوحة هي مكوّن ينزلق من أسفل الشاشة، ويُستخدم عادةً لعرض محتوى إضافي أو خيارات بدون مغادرة الشاشة الحالية.",
    "content": "<ComponentPreview name=\"sheet-demo\" />\n\n<div className=\"not-prose mdx:px-0 px-4\">\n  <Step>\n    <StepItem title=\"تثبيت التبعيات\">\n      أولاً، تحتاج إلى تثبيت التبعيات التالية:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Sheet\">\n      <ComponentSource name=\"sheet-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\r\n        Sheet,\r\n        SheetClose,\r\n        SheetContent,\r\n        SheetDescription,\r\n        SheetFooter,\r\n        SheetHeader,\r\n        SheetTitle,\r\n        SheetTrigger\r\n      } from '@/components/ui/sheet';`}\n  </Pre>\n\n  <Pre>\n    {`<Sheet>\r\n        <SheetTrigger asChild>\r\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n                <Settings size={16} />\r\n                فتح الإعدادات\r\n            </Button>\r\n        </SheetTrigger>\r\n        <SheetContent side=\"right\">\r\n        <SheetHeader>\r\n            <SheetTitle>الإعدادات</SheetTitle>\r\n            <SheetDescription>قم بتخصيص تفضيلات تطبيقك هنا</SheetDescription>\r\n        </SheetHeader>\r\n        <div className=\"py-6\">\r\n            <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">الوضع الداكن</Label>\r\n                    <Checkbox id=\"dark-mode\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">الإشعارات</Label>\r\n                    <Checkbox id=\"notification\" />\r\n                </div>\r\n                <div className=\"flex items-center justify-between\">\r\n                    <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">تحديثات البريد الإلكتروني</Label>\r\n                    <Checkbox id=\"email-updates\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <SheetFooter>\r\n            <SheetClose asChild>\r\n                <Button>حفظ التغييرات</Button>\r\n            </SheetClose>\r\n        </SheetFooter>\r\n      </SheetContent>\r\n      </Sheet>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### التحكم في الاتجاه\n\n#### الأعلى\n\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\n\n#### اليمين\n\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\n\n#### الأسفل\n\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\n\n#### اليسار\n\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\n",
    "raw": "---\r\ntitle: لوحة (Sheet)\r\ndescription: اللوحة هي مكوّن ينزلق من أسفل الشاشة، ويُستخدم عادةً لعرض محتوى إضافي أو خيارات بدون مغادرة الشاشة الحالية.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/dialog\r\n  api: https://www.radix-ui.com/docs/primitives/components/dialog#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"sheet-demo\" />\r\n\r\n<div className=\"not-prose mdx:px-0 px-4\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت التبعيات\">\r\n      أولاً، تحتاج إلى تثبيت التبعيات التالية:\r\n      <Pre>{`npm install clsx tailwind-merge @radix-ui/react-dialog`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Sheet\">\r\n      <ComponentSource name=\"sheet-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import {\r\n    Sheet,\r\n    SheetClose,\r\n    SheetContent,\r\n    SheetDescription,\r\n    SheetFooter,\r\n    SheetHeader,\r\n    SheetTitle,\r\n    SheetTrigger\r\n} from '@/components/ui/sheet';`}</Pre>\r\n  <Pre>{`<Sheet>\r\n    <SheetTrigger asChild>\r\n        <Button variant=\"outline\" className=\"flex items-center gap-2\">\r\n            <Settings size={16} />\r\n            فتح الإعدادات\r\n        </Button>\r\n    </SheetTrigger>\r\n    <SheetContent side=\"right\">\r\n    <SheetHeader>\r\n        <SheetTitle>الإعدادات</SheetTitle>\r\n        <SheetDescription>قم بتخصيص تفضيلات تطبيقك هنا</SheetDescription>\r\n    </SheetHeader>\r\n    <div className=\"py-6\">\r\n        <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">الوضع الداكن</Label>\r\n                <Checkbox id=\"dark-mode\" />\r\n            </div>\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">الإشعارات</Label>\r\n                <Checkbox id=\"notification\" />\r\n            </div>\r\n            <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">تحديثات البريد الإلكتروني</Label>\r\n                <Checkbox id=\"email-updates\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <SheetFooter>\r\n        <SheetClose asChild>\r\n            <Button>حفظ التغييرات</Button>\r\n        </SheetClose>\r\n    </SheetFooter>\r\n  </SheetContent>\r\n</Sheet>`}</Pre>\r\n</div>\r\n\r\n## أمثلة\r\n\r\n### التحكم في الاتجاه\r\n\r\n#### الأعلى\r\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\r\n\r\n#### اليمين\r\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\r\n\r\n#### الأسفل\r\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\r\n\r\n#### اليسار\r\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\r\n"
  },
  {
    "slug": "/components/sonner",
    "title": "إشعار (Sonner)",
    "description": "مكوّن Toast جاهز للرأي (Opinionated) مخصص لتطبيقات React.",
    "content": "<ComponentPreview name=\"sonner-demo\" />\n\n## حول المكوّن\n\n<MdxBadge>سونر</MdxBadge> مبني على مكتبة\r\n[Sonner](https://sonner.emilkowal.ski/) بواسطة\r\n[emilkowalski\\_](https://x.com/emilkowalski_).\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت التبعيات\">\n      أولاً، قم بتثبيت التبعيات:\n\n      <Pre>\n        {`npm install clsx tailwind-merge sonner`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Sonner\">\n      <ComponentSource name=\"sonner-demo\" />\n    </StepItem>\n\n    <StepItem title=\"تعديل layout.tsx لإضافة مكوّن Toaster\">\n      في ملف <MdxBadge>layout.tsx</MdxBadge> الرئيسي لديك، أضف{\" \"}\r\n      <MdxBadge>\\<Toaster /></MdxBadge>{\" \"} لعرض التنبيهات (toasts):\n\n      <Pre highlightLines={[8]}>\n        {`import { Toaster } from \"@/components/ui/sonner\"\r\n\r\n          export default function RootLayout({ children }) {\r\n          return (\r\n            <html lang=\"ar\">\r\n              <body>\r\n                <main>{children}</main>\r\n                <Toaster />\r\n              </body>\r\n            </html>\r\n           )\r\n          }`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { toast } from \"sonner\"`}\n  </Pre>\n\n  <Pre>\n    {`toast(\"تم إنشاء الحدث بنجاح.\")`}\n  </Pre>\n</div>\n\n## الأنواع\n\n### نجاح\n\n<ComponentPreview name=\"sonner-demo\" variant=\"success\" />\n\n### معلومات\n\n<ComponentPreview name=\"sonner-demo\" variant=\"info\" />\n\n### تحذير\n\n<ComponentPreview name=\"sonner-demo\" variant=\"warning\" />\n\n### خطأ\n\n<ComponentPreview name=\"sonner-demo\" variant=\"error\" />\n\n### تحميل\n\n<ComponentPreview name=\"sonner-demo\" variant=\"loading\" />\n\n### مخصص\n\n<ComponentPreview name=\"sonner-demo\" variant=\"custom\" />\n",
    "raw": "---\r\ntitle: إشعار (Sonner)\r\ndescription: مكوّن Toast جاهز للرأي (Opinionated) مخصص لتطبيقات React.\r\nlinks:\r\n  doc: https://sonner.emilkowal.ski\r\n---\r\n\r\n<ComponentPreview name=\"sonner-demo\" />\r\n\r\n## حول المكوّن\r\n<MdxBadge>سونر</MdxBadge> مبني على مكتبة\r\n[Sonner](https://sonner.emilkowal.ski/) بواسطة\r\n[emilkowalski_](https://x.com/emilkowalski_).\r\n\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت التبعيات\">\r\n      أولاً، قم بتثبيت التبعيات:\r\n      <Pre>{`npm install clsx tailwind-merge sonner`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Sonner\">\r\n      <ComponentSource name=\"sonner-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"تعديل layout.tsx لإضافة مكوّن Toaster\">\r\n      في ملف <MdxBadge>layout.tsx</MdxBadge> الرئيسي لديك، أضف{\" \"} \r\n      <MdxBadge>\\<Toaster /></MdxBadge>{\" \"} لعرض التنبيهات (toasts):\r\n      <Pre\r\n        highlightLines={[8]}\r\n      >{`import { Toaster } from \"@/components/ui/sonner\"\r\n \r\nexport default function RootLayout({ children }) {\r\n  return (\r\n    <html lang=\"ar\">\r\n      <body>\r\n        <main>{children}</main>\r\n        <Toaster />\r\n      </body>\r\n    </html>\r\n   )\r\n}`}</Pre>\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-6\">\r\n  <Pre>{`import { toast } from \"sonner\"`}</Pre>\r\n  <Pre>{`toast(\"تم إنشاء الحدث بنجاح.\")`}</Pre>\r\n</div>\r\n\r\n## الأنواع\r\n\r\n### نجاح\r\n<ComponentPreview name=\"sonner-demo\" variant=\"success\" />\r\n\r\n### معلومات\r\n<ComponentPreview name=\"sonner-demo\" variant=\"info\" />\r\n\r\n### تحذير\r\n<ComponentPreview name=\"sonner-demo\" variant=\"warning\" />\r\n\r\n### خطأ\r\n<ComponentPreview name=\"sonner-demo\" variant=\"error\" />\r\n\r\n### تحميل\r\n<ComponentPreview name=\"sonner-demo\" variant=\"loading\" />\r\n\r\n### مخصص\r\n<ComponentPreview name=\"sonner-demo\" variant=\"custom\" />\r\n"
  },
  {
    "slug": "/components/step",
    "title": "خطوات (Steps)",
    "description": "يوضح هذا القسم نظرة عامة على مكوّن الخطوات (Steps).",
    "content": "<ComponentPreview name=\"step-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت التبعيات\">\n      أولاً، تحتاج إلى تثبيت التبعيات:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكوّن Step\">\n      <ComponentSource name=\"step-demo\" />\n    </StepItem>\n\n    <StepItem title=\"الآن يمكنك استخدامه بحرية وتخصيصه كما تشاء\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Step, StepItem } from \"@/components/ui/step\"`}\n  </Pre>\n\n  <Pre>\n    {`<Step>\r\n            <StepItem title=\"بيئة التطوير\">localhost:3000</StepItem>\r\n            <StepItem title=\"بيئة الإنتاج\">localhost:3000</StepItem>\r\n        </Step>`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: خطوات (Steps)\r\ndescription: يوضح هذا القسم نظرة عامة على مكوّن الخطوات (Steps).\r\n---\r\n\r\n<ComponentPreview name=\"step-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت التبعيات\">\r\n      أولاً، تحتاج إلى تثبيت التبعيات:\r\n      <Pre className=\"language-bash\">{`npm i clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكوّن Step\">\r\n      <ComponentSource name=\"step-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"الآن يمكنك استخدامه بحرية وتخصيصه كما تشاء\" />\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-4\">\r\n  <Pre>{`import { Step, StepItem } from \"@/components/ui/step\"`}</Pre>\r\n  <Pre>\r\n    {`<Step>\r\n        <StepItem title=\"بيئة التطوير\">localhost:3000</StepItem>\r\n        <StepItem title=\"بيئة الإنتاج\">localhost:3000</StepItem>\r\n    </Step>`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/switch",
    "title": "مفتاح تبديل (Switch)",
    "description": "مكون يسمح للمستخدمين بالتبديل بين حالتين (تشغيل / إيقاف).",
    "content": "<ComponentPreview name=\"switch-demo\" />\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت المكتبات المطلوبة\">\n      أولاً، قم بتثبيت المكتبات اللازمة:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون Switch\">\n      <ComponentSource name=\"switch-demo\" />\n    </StepItem>\n\n    <StepItem title=\"قم بتخصيصه ليكون مناسباً لمشروعك\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Switch } from \"@/components/ui/switch\"`}\n  </Pre>\n\n  <Pre>\n    {`<Switch\r\n            size=\"md\"\r\n            color=\"default\"\r\n            label=\"تفعيل الإشعارات\"\r\n            tooltip=\"قم بالتبديل لتفعيل أو إيقاف الإشعارات\"\r\n            checked={switches.notifications}\r\n            onCheckedChange={updateSwitch(\"notifications\")}\r\n        />`}\n  </Pre>\n</div>\n",
    "raw": "---\r\ntitle: مفتاح تبديل (Switch)\r\ndescription: مكون يسمح للمستخدمين بالتبديل بين حالتين (تشغيل / إيقاف).\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/switch\r\n  api: https://www.radix-ui.com/docs/primitives/components/switch#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"switch-demo\" />\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت المكتبات المطلوبة\">\r\n      أولاً، قم بتثبيت المكتبات اللازمة:\r\n      <Pre className=\"language-bash\">{`npm i clsx tailwind-merge`}</Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكون Switch\">\r\n      <ComponentSource name=\"switch-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"قم بتخصيصه ليكون مناسباً لمشروعك\" />\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"not-prose space-y-4\">\r\n  <Pre>{`import { Switch } from \"@/components/ui/switch\"`}</Pre>\r\n  <Pre>\r\n    {`<Switch\r\n        size=\"md\"\r\n        color=\"default\"\r\n        label=\"تفعيل الإشعارات\"\r\n        tooltip=\"قم بالتبديل لتفعيل أو إيقاف الإشعارات\"\r\n        checked={switches.notifications}\r\n        onCheckedChange={updateSwitch(\"notifications\")}\r\n    />`}\r\n  </Pre>\r\n</div>\r\n"
  },
  {
    "slug": "/components/tabs",
    "title": "علامات التبويب (Tabs)",
    "description": "مكون التبويبات لتنظيم المحتوى في أقسام متعددة.",
    "content": "<ComponentPreview name=\"tabs-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت المكتبات المطلوبة\">\n      أولاً، قم بتثبيت المكتبات التالية:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون Tabs\">\n      <ComponentSource name=\"tabs-demo\" />\n    </StepItem>\n\n    <StepItem title=\"الآن يمكنك تعديله ليناسب مشروعك\" />\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"not-prose space-y-4\">\n  <p className=\"text-base\">\n    أولاً، قم باستيراد مكون الـ Tabs في ملفك:\n  </p>\n\n  <Pre>\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\n  </Pre>\n\n  <p className=\"text-base\">ثم استخدمه بالشكل التالي:</p>\n\n  <Pre>\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\r\n             <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\r\n                <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\r\n                   تبويب 1\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\r\n                   تبويب 2\r\n                </TabsTrigger>\r\n             </TabsList>\r\n             <div>\r\n                <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\r\n                  <div>المحتوى الأول</div>\r\n                </TabsContent>\r\n                <TabsContent value=\"code\" className=\"rounded-xl\">\r\n                  <div>المحتوى الثاني</div>\r\n                </TabsContent>\r\n             </div>\r\n          </Tabs>`}\n  </Pre>\n</div>\n\n## أمثلة\n\n### تبويبات عمودية\n\n<ComponentPreview name=\"tabs-vertical-demo\" />\n",
    "raw": "---\r\ntitle:  علامات التبويب (Tabs)\r\ndescription: مكون التبويبات لتنظيم المحتوى في أقسام متعددة.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/tabs\r\n  api: https://www.radix-ui.com/docs/primitives/components/tabs#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"tabs-demo\" />\r\n\r\n## التثبيت\r\n\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت المكتبات المطلوبة\">\r\n      أولاً، قم بتثبيت المكتبات التالية:\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكون Tabs\">\r\n      <ComponentSource name=\"tabs-demo\" />\r\n    </StepItem>\r\n    <StepItem title=\"الآن يمكنك تعديله ليناسب مشروعك\" />\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n\r\n<div className=\"not-prose space-y-4\">\r\n  <p className=\"text-base\">\r\n    أولاً، قم باستيراد مكون الـ Tabs في ملفك:\r\n  </p>\r\n  <Pre>\r\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\r\n  </Pre>\r\n  <p className=\"text-base\">ثم استخدمه بالشكل التالي:</p>\r\n  <Pre>\r\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\r\n         <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\r\n            <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\r\n               تبويب 1\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\r\n               تبويب 2\r\n            </TabsTrigger>\r\n         </TabsList>\r\n         <div>\r\n            <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\r\n              <div>المحتوى الأول</div>\r\n            </TabsContent>\r\n            <TabsContent value=\"code\" className=\"rounded-xl\">\r\n              <div>المحتوى الثاني</div>\r\n            </TabsContent>\r\n         </div>\r\n      </Tabs>`}\r\n  </Pre>\r\n</div>\r\n\r\n## أمثلة\r\n### تبويبات عمودية\r\n<ComponentPreview name=\"tabs-vertical-demo\" />\r\n"
  },
  {
    "slug": "/components/tooltip",
    "title": "تلميح (Tooltip)",
    "description": "التلميح هو صندوق منبثق صغير يظهر عندما يحرك المستخدم مؤشر الفأرة فوق عنصر ما، لتقديم معلومات إضافية حول هذا العنصر.",
    "content": "<ComponentPreview name=\"tooltip-demo\" />\n\n## التثبيت\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"تثبيت الاعتماديات\">\n      أولاً، تحتاج إلى تثبيت الاعتماديات (Dependencies):\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"إنشاء ملف utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"إنشاء مكون التلميح\">\n      <ComponentSource name=\"tooltip-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## الاستخدام\n\n<div className=\"space-y-6\">\n  <Pre>\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\n  </Pre>\n\n  <Pre>\n    {`<TooltipProvider>\r\n          <Tooltip>\r\n            <TooltipTrigger asChild>مرر الفأرة</TooltipTrigger>\r\n            <TooltipContent>\r\n              <p>تلميح افتراضي</p>\r\n            </TooltipContent>\r\n          </Tooltip>\r\n        </TooltipProvider>\r\n      `}\n  </Pre>\n</div>\n\n## الأمثلة\n\n### تلميح علوي\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\n\n### تلميح أيمن\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\n\n### تلميح سفلي\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\n\n### تلميح أيسر\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\n\n### تلميح بتأخير\n\nيمكنك تعيين تأخير لظهور التلميح بعد تمرير مؤشر الفأرة فوق العنصر المحفز. قد يكون هذا مفيدًا لمنع ظهور التلميح بسرعة كبيرة.\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />\n",
    "raw": "---\r\ntitle: تلميح (Tooltip)\r\ndescription: التلميح هو صندوق منبثق صغير يظهر عندما يحرك المستخدم مؤشر الفأرة فوق عنصر ما، لتقديم معلومات إضافية حول هذا العنصر.\r\nlinks:\r\n  doc: https://www.radix-ui.com/docs/primitives/components/tooltip\r\n  api: https://www.radix-ui.com/docs/primitives/components/tooltip#api-reference\r\n---\r\n\r\n<ComponentPreview name=\"tooltip-demo\" />\r\n\r\n## التثبيت\r\n<div className=\"not-prose px-4 md:px-0\">\r\n  <Step>\r\n    <StepItem title=\"تثبيت الاعتماديات\">\r\n      أولاً، تحتاج إلى تثبيت الاعتماديات (Dependencies):\r\n      <Pre className=\"language-bash\">\r\n        {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\r\n      </Pre>\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء ملف utils.ts\">\r\n      <ComponentUtilsText />\r\n      <ComponentUtils />\r\n    </StepItem>\r\n    <StepItem title=\"إنشاء مكون التلميح\">\r\n      <ComponentSource name=\"tooltip-demo\" />\r\n    </StepItem>\r\n  </Step>\r\n</div>\r\n\r\n## الاستخدام\r\n<div className=\"space-y-6\">\r\n  <Pre>\r\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\r\n  </Pre>\r\n  <Pre>\r\n    {`<TooltipProvider>\r\n      <Tooltip>\r\n        <TooltipTrigger asChild>مرر الفأرة</TooltipTrigger>\r\n        <TooltipContent>\r\n          <p>تلميح افتراضي</p>\r\n        </TooltipContent>\r\n      </Tooltip>\r\n    </TooltipProvider>\r\n`}\r\n  </Pre>\r\n</div>\r\n\r\n## الأمثلة\r\n### تلميح علوي\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\r\n\r\n### تلميح أيمن\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\r\n\r\n### تلميح سفلي\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\r\n\r\n### تلميح أيسر\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\r\n\r\n### تلميح بتأخير\r\nيمكنك تعيين تأخير لظهور التلميح بعد تمرير مؤشر الفأرة فوق العنصر المحفز. قد يكون هذا مفيدًا لمنع ظهور التلميح بسرعة كبيرة.\r\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />"
  },
  {
    "slug": "/installation",
    "title": "التثبيت",
    "description": "بوابتك لإتقان تطوير البرمجيات الحديثة.",
    "content": "لاستخدام مكوّناتنا يجب أن تعمل مع [next.js](https://nextjs.org/)\n\n## متطلبات النظام\n\n* [Node.js 18.18](https://nodejs.org/) أو أحدث.\n* macOS، وWindows (بما في ذلك WSL)، وLinux مدعومة.\n\n<div className=\"not-prose px-4\">\n  <Note>إذا كنت تستخدم Windows فمن الموصى أن تستخدم WSL للاستفادة من كل ميزات Linux <br /> ولكن إذا لم يكن لديك، لا تقلق، Windows أيضًا خيار رائع</Note>\n\n  <Step className=\"mt-6\">\n    <StepItem title=\"الخطوة 1: إنشاء مشروع Next.js جديد\">\n      ابدأ بتشغيل الأمر التالي في الطرفية لإنشاء مشروع Next.js جديد:\\\n      للتأكد من التثبيت، شغّل:\n\n      <Pre>\n        {`npx create-next-app@latest`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"الخطوة 2: إعداد مشروعك\">\n      أثناء التثبيت، سيتم سؤالك لتكوين إعدادات مشروعك. أدناه مثال على الإعدادات الافتراضية والخيارات التي ستواجهها:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes `}\n      </Pre>\n\n      <Note type=\"note\" title=\"ملاحظة مهمة\">\n        التكوينات أعلاه قابلة للتخصيص بالكامل. إذا اخترت تفعيل **TypeScript**، أو **ESLint**، أو **Tailwind CSS**، أو مجلد **src**، أو **App Router**، سيتم إضافة الملفات والإعدادات اللازمة تلقائيًا لمشروعك.\n      </Note>\n    </StepItem>\n\n    <StepItem title=\"الخطوة 3: إعدادات React 19 و Next.js 15 (اختياري)\">\n      إذا كنت تستخدم **React 19** و **Next.js 15**، قد تواجه خيار تكوين إضافي يخص Turbopack:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \r\n          Would you like to use TypeScript? No / Yes  \r\n          Would you like to use ESLint? No / Yes  \r\n          Would you like to use Tailwind CSS? No / Yes  \r\n          Would you like your code inside a \\`src/\\` directory? No / Yes  \r\n          Would you like to use App Router? (recommended) No / Yes  \r\n          Would you like to use Turbopack for \\`next dev\\`? » No / Yes`}\n      </Pre>\n\n      <Note variant=\"info\">\n        **Turbopack** هو أداة ربط وتشغيل عالية الأداء مخصّصة لـ Next.js. تفعيل هذا الخيار يضمن سرعات بناء أعلى وتجربة تطوير أفضل.\n      </Note>\n    </StepItem>\n  </Step>\n</div>\n\n## الخطوات التالية\n\nبعد إنشاء مشروعك، أنت جاهز الآن لاستكشاف ودمج مكوّنات وأدوات Alpha الحديثة لتحويل رؤيتك إلى واقع. ابدأ في بناء تطبيقك الجيل القادم اليوم مع Alpha! 🚀\n",
    "raw": "---\r\ntitle: التثبيت\r\ndescription: بوابتك لإتقان تطوير البرمجيات الحديثة.\r\nkeywords: [\"التثبيت\", \"github\", \"node\", \"دليل\", \"nextjs\", \"المستندات\"]\r\n---\r\n\r\nلاستخدام مكوّناتنا يجب أن تعمل مع [next.js](https://nextjs.org/)\r\n\r\n## متطلبات النظام\r\n\r\n- [Node.js 18.18](https://nodejs.org/) أو أحدث.  \r\n- macOS، وWindows (بما في ذلك WSL)، وLinux مدعومة.\r\n\r\n<div className=\"not-prose px-4\">\r\n<Note>إذا كنت تستخدم Windows فمن الموصى أن تستخدم WSL للاستفادة من كل ميزات Linux <br/> ولكن إذا لم يكن لديك، لا تقلق، Windows أيضًا خيار رائع</Note>\r\n\r\n<Step className='mt-6'>\r\n<StepItem title=\"الخطوة 1: إنشاء مشروع Next.js جديد\">\r\nابدأ بتشغيل الأمر التالي في الطرفية لإنشاء مشروع Next.js جديد:  \r\nللتأكد من التثبيت، شغّل:\r\n\r\n<Pre>{`npx create-next-app@latest`}</Pre>\r\n\r\n</StepItem>\r\n<StepItem title=\"الخطوة 2: إعداد مشروعك\">\r\n  أثناء التثبيت، سيتم سؤالك لتكوين إعدادات مشروعك. أدناه مثال على الإعدادات الافتراضية والخيارات التي ستواجهها:\r\n\r\n<Pre>\r\n  {`What is your project named? \\`put your project name here\\`  \r\nWould you like to use TypeScript? No / Yes  \r\nWould you like to use ESLint? No / Yes  \r\nWould you like to use Tailwind CSS? No / Yes  \r\nWould you like your code inside a \\`src/\\` directory? No / Yes  \r\nWould you like to use App Router? (recommended) No / Yes `}\r\n</Pre>\r\n\r\n      <Note type=\"note\" title=\"ملاحظة مهمة\">\r\n         التكوينات أعلاه قابلة للتخصيص بالكامل. إذا اخترت تفعيل **TypeScript**، أو **ESLint**، أو **Tailwind CSS**، أو مجلد **src**، أو **App Router**، سيتم إضافة الملفات والإعدادات اللازمة تلقائيًا لمشروعك.\r\n      </Note>\r\n\r\n</StepItem>\r\n<StepItem title=\"الخطوة 3: إعدادات React 19 و Next.js 15 (اختياري)\">\r\n      إذا كنت تستخدم **React 19** و **Next.js 15**، قد تواجه خيار تكوين إضافي يخص Turbopack:\r\n\r\n<Pre>\r\n  {`What is your project named? \\`put your project name here\\`  \r\nWould you like to use TypeScript? No / Yes  \r\nWould you like to use ESLint? No / Yes  \r\nWould you like to use Tailwind CSS? No / Yes  \r\nWould you like your code inside a \\`src/\\` directory? No / Yes  \r\nWould you like to use App Router? (recommended) No / Yes  \r\nWould you like to use Turbopack for \\`next dev\\`? » No / Yes`}\r\n</Pre>\r\n\r\n      <Note variant=\"info\">\r\n         **Turbopack** هو أداة ربط وتشغيل عالية الأداء مخصّصة لـ Next.js. تفعيل هذا الخيار يضمن سرعات بناء أعلى وتجربة تطوير أفضل.\r\n      </Note>\r\n\r\n</StepItem>\r\n</Step>\r\n</div>\r\n## الخطوات التالية\r\n\r\nبعد إنشاء مشروعك، أنت جاهز الآن لاستكشاف ودمج مكوّنات وأدوات Alpha الحديثة لتحويل رؤيتك إلى واقع. ابدأ في بناء تطبيقك الجيل القادم اليوم مع Alpha! 🚀\r\n"
  },
  {
    "slug": "/introduction",
    "title": "المقدمة",
    "description": "مجموعة من المكونات المصممة بشكل جميل، قابلة للوصول، وقابلة للتخصيص لمساعدتك في بناء مكتبتك الخاصة. مفتوحة المصدر.",
    "content": "**هذه ليست مكتبة مكونات. هذه هي الطريقة التي تبني بها مكتبتك الخاصة.**\n\nأنت تعرف كيف تعمل معظم مكتبات المكونات التقليدية: تقوم بتثبيت الحزمة من NPM، ثم تستورد المكونات وتستخدمها داخل تطبيقك.\n\nيعمل Roach بشكل جيد حتى تحتاج إلى تخصيص مكوّن ليتناسب مع نظام التصميم الخاص بك أو تحتاج إلى مكوّن غير موجود داخل المكتبة. غالبًا ما ينتهي بك الأمر بلفّ مكونات المكتبة، أو كتابة حلول بديلة لتجاوز الأنماط، أو خلط مكونات من مكتبات مختلفة مع واجهات برمجة تطبيقات غير متوافقة.\n\nهذا ما تسعى **alphabyte-labs** لحلّه. تم بناؤها على المبادئ التالية:\n\n* **الكود المفتوح** – الإطار الرائد لـ React للتطبيقات المخصّصة للإنتاج.\n* **التركيب** – دمج Markdown و JSX لإنشاء محتوى تفاعلي ديناميكي.\n* **التوزيع** – المكتبة الأساسية لبناء واجهات مستخدم سلسة.\n* **الافتراضيات الجميلة** – ضمان الموثوقية وقابلية التوسع باستخدام هذه اللغة القوية (JavaScript superset).\n\n## مرحبًا بك في Alphabyte-labs\n\nفي alphabyte، نؤمن أن المعرفة هي أساس الابتكار. مركز التوثيق الخاص بنا هو مصدر متكامل لإتقان تطوير البرمجيات، حيث يقدّم أدلة، وشروحات، ورؤى مصممة لتزويدك بالأدوات اللازمة لبناء حلول مؤثرة.\n\n### ماذا ستكتشف\n\nسوف تكتشف مجموعة من المكونات الحقيقية التي يمكنك استخدامها مباشرة في تطبيقك المبني بـ Next.js أو أي تطبيق React.js.\n",
    "raw": "---\r\ntitle: المقدمة\r\ndescription: مجموعة من المكونات المصممة بشكل جميل، قابلة للوصول، وقابلة للتخصيص لمساعدتك في بناء مكتبتك الخاصة. مفتوحة المصدر.\r\nkeywords:\r\n  [\"الإعداد\", \"التكوين\", \"التخطيط\", \"Google\", \"SEO\", \"nextjs\", \"المستندات\"]\r\n---\r\n\r\n**هذه ليست مكتبة مكونات. هذه هي الطريقة التي تبني بها مكتبتك الخاصة.**\r\n\r\nأنت تعرف كيف تعمل معظم مكتبات المكونات التقليدية: تقوم بتثبيت الحزمة من NPM، ثم تستورد المكونات وتستخدمها داخل تطبيقك.\r\n\r\nيعمل Roach بشكل جيد حتى تحتاج إلى تخصيص مكوّن ليتناسب مع نظام التصميم الخاص بك أو تحتاج إلى مكوّن غير موجود داخل المكتبة. غالبًا ما ينتهي بك الأمر بلفّ مكونات المكتبة، أو كتابة حلول بديلة لتجاوز الأنماط، أو خلط مكونات من مكتبات مختلفة مع واجهات برمجة تطبيقات غير متوافقة.\r\n\r\nهذا ما تسعى **alphabyte-labs** لحلّه. تم بناؤها على المبادئ التالية:\r\n\r\n- **الكود المفتوح** – الإطار الرائد لـ React للتطبيقات المخصّصة للإنتاج.\r\n- **التركيب** – دمج Markdown و JSX لإنشاء محتوى تفاعلي ديناميكي.\r\n- **التوزيع** – المكتبة الأساسية لبناء واجهات مستخدم سلسة.\r\n- **الافتراضيات الجميلة** – ضمان الموثوقية وقابلية التوسع باستخدام هذه اللغة القوية (JavaScript superset).\r\n\r\n## مرحبًا بك في Alphabyte-labs\r\n\r\nفي alphabyte، نؤمن أن المعرفة هي أساس الابتكار. مركز التوثيق الخاص بنا هو مصدر متكامل لإتقان تطوير البرمجيات، حيث يقدّم أدلة، وشروحات، ورؤى مصممة لتزويدك بالأدوات اللازمة لبناء حلول مؤثرة.\r\n\r\n### ماذا ستكتشف\r\n\r\nسوف تكتشف مجموعة من المكونات الحقيقية التي يمكنك استخدامها مباشرة في تطبيقك المبني بـ Next.js أو أي تطبيق React.js.\r\n"
  },
  {
    "slug": "/rtl",
    "title": "الاتجاه من اليمين لليسار",
    "description": "الاتجاه من اليمين لليسار",
    "content": "",
    "raw": "---\r\ntitle: الاتجاه من اليمين لليسار\r\ndescription: الاتجاه من اليمين لليسار\r\nkeywords: rtl, من اليمين إلى اليسار, العربية, العبرية, الفارسية, الأردية, الفارسية\r\n---\r\n"
  },
  {
    "slug": "/themes",
    "title": "السمات",
    "description": "اختر لونًا أساسيًا واحدًا وسيتم إنشاء لوحة ألوان مخصّصة لك",
    "content": "",
    "raw": "---\r\ntitle: السمات\r\ndescription: اختر لونًا أساسيًا واحدًا وسيتم إنشاء لوحة ألوان مخصّصة لك\r\n---\r\n"
  }
]