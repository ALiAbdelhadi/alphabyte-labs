[
  {
    "slug": "/components/accordion",
    "title": "Accordion",
    "description": "The Accordion component is a container that can hold multiple items, each of which can be expanded or collapsed to show or hide its content.",
    "content": "<ComponentPreview name=\"accordion-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-accordion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Accordion Component\">\n      <ComponentSource name=\"accordion-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import {\n      Accordion,\n      AccordionContent,\n      AccordionItem,\n      AccordionTrigger,\n      } from \"@/components/ui/accordion\"`}\n  </Pre>\n\n  <Pre className=\"language-typescript\">\n    {`<Accordion type=\"single\" collapsible>\n      <AccordionItem value=\"item-1\">\n        <AccordionTrigger>Section Title</AccordionTrigger>\n        <AccordionContent>\n          Content goes here\n        </AccordionContent>\n      </AccordionItem>\n      </Accordion>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/alert-dialog",
    "title": "Alert Dialog",
    "description": "A versatile Alert dialog component for critical user interactions.",
    "content": "<ComponentPreview name=\"alert-dialog-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-alert-dialog class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Alert dialog Component\">\n      <ComponentSource name=\"alert-dialog-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n      AlertDialog,\n      AlertDialogAction,\n      AlertDialogCancel,\n      AlertDialogContent,\n      AlertDialogDescription,\n      AlertDialogFooter,\n      AlertDialogHeader,\n      AlertDialogTitle,\n      AlertDialogTrigger,\n      } from \"@/components/ui/alert-dialog\"\n      import { Button } from \"@/components/library/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function AlertDialogDemo() {\n      return (\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <Button variant=\"outline\">Open Dialog</Button>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n              <AlertDialogDescription>\n                This action cannot be undone. The data will be permanently deleted\n                from the servers.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction>Continue</AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      )\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"alert-dialog\" variant=\"destructive\" />\n"
  },
  {
    "slug": "/components/badge",
    "title": "Badge",
    "description": "A badge is a small, often circular, visual element that provides information or context about an item. It can be used to indicate status, notifications, or other relevant details.",
    "content": "<ComponentPreview name=\"badge-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Badge Component\">\n      <ComponentSource name=\"badge-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/library/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Badge variant=\"outline\">Badge</Badge>`}\n  </Pre>\n</div>\n\n## Tips\n\nTip: You can use <MdxBadge>badgeVariants</MdxBadge> to create your own badge\ncomponent with different styles.\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Badge } from '@/components/library/badge'`}\n  </Pre>\n\n  <Pre>\n    {`<Link className={badgeVariants({ variant: \"outline\" })}>Badge</Link>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"badge-demo\" />\n\n### Outline\n\n<ComponentPreview name=\"badge-demo\" variant=\"outline\" />\n\n### Destructive\n\n<ComponentPreview name=\"badge-demo\" variant=\"destructive\" />\n\n### Success\n\n<ComponentPreview name=\"badge-demo\" variant=\"success\" />\n\n### Warning\n\n<ComponentPreview name=\"badge-demo\" variant=\"warning\" />\n\n### Info\n\n<ComponentPreview name=\"badge-demo\" variant=\"info\" />\n\n### Removable\n\n<ComponentPreview name=\"badge-demo\" variant=\"removable\" />\n\n### With icon\n\n<ComponentPreview name=\"badge-demo\" variant=\"icon\" />\n"
  },
  {
    "slug": "/components/breadcrumb",
    "title": "breadcrumb",
    "description": "breadcrumb",
    "content": "<ComponentPreview name=\"breadcrumb-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Breadcrumb Component\">\n      <ComponentSource name=\"breadcrumb-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n        Breadcrumb,\n        BreadcrumbItem,\n        BreadcrumbLink,\n        BreadcrumbList,\n        BreadcrumbPage,\n        BreadcrumbSeparator,\n      } from \"@/components/library/breadcrumb\"`}\n  </Pre>\n\n  <Pre>\n    {`<Breadcrumb>\n        <BreadcrumbList>\n            <BreadcrumbItem>\n                <BreadcrumbLink href=\"#\">\n                    <HiHome className=\"h-4 w-4\" />\n                </BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n                <BreadcrumbLink href=\"#\">Documents</BreadcrumbLink>\n            </BreadcrumbItem>\n            <BreadcrumbSeparator />\n            <BreadcrumbItem>\n                <BreadcrumbPage>Current Page</BreadcrumbPage>\n            </BreadcrumbItem>\n        </BreadcrumbList>\n      </Breadcrumb>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Custom Separator\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"custom-separator\" />\n\n### Ellipsis\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"ellipsis\" />\n\nDropdown You can compose <MdxBadge>\\<BreadcrumbItem /></MdxBadge> with a <MdxBadge>\\<DropdownMenu /></MdxBadge> to create a dropdown in the breadcrumb.\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"dropdown\" />\n\n### Icons\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"icons\" />\n\n### Responsive\n\n<ComponentPreview name=\"breadcrumb-demo\" variant=\"responsive\" />\n"
  },
  {
    "slug": "/components/button",
    "title": "Button",
    "description": "A button that displays a list of options when clicked.",
    "content": "<ComponentPreview name=\"button\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Button Component\">\n      <ComponentSource name=\"button\" />\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Button } from \"@/components/library/button\"`}\n  </Pre>\n\n  <Pre>\n    {`export default function ButtonDemo() {\n        return <Button variant={\"default\"}>Getting Started</Button>\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Primary\n\n<ComponentPreview name=\"button\" variant=\"primary\" />\n\n### Secondary\n\n<ComponentPreview name=\"button\" variant=\"secondary\" />\n\n### Destructive\n\n<ComponentPreview name=\"button\" variant=\"destructive\" />\n\n### Ghost\n\n<ComponentPreview name=\"button\" variant=\"ghost\" />\n\n### Link\n\n<ComponentPreview name=\"button\" variant=\"link\" />\n\n### Outline\n\n<ComponentPreview name=\"button\" variant=\"outline\" />\n\n### Neural\n\n<ComponentPreview name=\"button\" variant=\"neural\" />\n\n### Loading\n\n<ComponentPreview name=\"button\" variant=\"loading\" />\n\n### Icon\n\n<ComponentPreview name=\"button\" variant=\"icon\" />\n\n### Animation bounce\n\n<ComponentPreview name=\"button\" variant=\"bounce\" />\n\n### Animation pulse\n\n<ComponentPreview name=\"button\" variant=\"pulse\" />\n"
  },
  {
    "slug": "/components/calendar",
    "title": "Calendar",
    "description": "Calendar component",
    "content": "<ComponentPreview name=\"calendar-demo\" />\n\n## About\n\nThe <MdxBadge>Calendar</MdxBadge> component is built on top of [ReactDayPicker](https://daypicker.dev/). ## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge react-day-picker@8.10.1 date-fns`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Calendar Component\">\n      <ComponentSource name=\"calendar-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Calendar } from \"@/components/ui/calendar\"`}\n  </Pre>\n\n  <Pre>\n    {`const [date, setDate] = React.useState<Date | undefined>(new Date())\n\n      return (\n      <Calendar\n        mode=\"single\"\n        selected={date}\n        onSelect={setDate}\n        className=\"rounded-md border\"\n      />\n      )`}\n  </Pre>\n</div>\n\n## Examples\n\n<ComponentPreview name=\"date-picker-demo\" />\n"
  },
  {
    "slug": "/components/code-block",
    "title": "Code Block",
    "description": "Showcase beautifully styled and customizable code snippets with advanced features like syntax highlighting, line numbering, and line highlighting.",
    "content": "<ComponentPreview name=\"code-block-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install prism.js\n\n      <Pre className=\"language-bash\">\n        {`npm i install prismjs clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Pre Component\">\n      <ComponentSource name=\"code-block-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Create prism-theme.css file\">\n      Create file called <MdxBadge>prism-theme.css</MdxBadge> in you app directory, and put the following code in it,\n\n      <Note type=\"note\" className=\"!mb-5 !my-3\">\n        This is the same styling as visual studio code theme dark\n      </Note>\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-css\" folderPath=\"prism-theme.css\">\n          {`:root {\n            --code-background: #1e1e1e;\n            --code-text-color: #cccccc;\n            --code-selection-background: #264f78;\n            --code-comment-color: #6a9955;\n            --code-line-number-color: #666;\n            --code-toolbar-background: #2d2d2d;\n            --code-folder-path-color: hsl(var(--muted));\n            }\n\n            .code-block-container {\n            background-color: var(--code-background);\n            border-radius: 6px;\n            width: 100%;\n            position: relative;\n            }\n\n            .code-block-header {\n            background-color: var(--code-background);\n            border-bottom: 1px solid #333;\n            }\n\n            .code-block-toolbar {\n            background-color: var(--code-toolbar-background);\n            padding-left: 1rem;\n            padding-right: 1rem;\n            border-radius: 6px 6px 0 0;\n            }\n\n            pre[class*=\"language-\"],\n            code[class*=\"language-\"] {\n            color: var(--code-text-color);\n            font-size: 14px;\n            text-shadow: none;\n            direction: ltr;\n            text-align: left;\n            white-space: pre;\n            word-spacing: normal;\n            word-break: normal;\n            line-height: 1.5;\n            -moz-tab-size: 4;\n            -o-tab-size: 4;\n            tab-size: 4;\n            -webkit-hyphens: none;\n            -moz-hyphens: none;\n            -ms-hyphens: none;\n            hyphens: none;\n            background: transparent;\n            }\n\n            pre[class*=\"language-\"]::selection,\n            code[class*=\"language-\"]::selection,\n            pre[class*=\"language-\"] _::selection,\n            code[class_=\"language-\"] \\*::selection {\n            text-shadow: none;\n            background: var(--code-selection-background);\n            }\n\n            @media print {\n            pre[class*=\"language-\"],\n            code[class*=\"language-\"] {\n            text-shadow: none;\n            }\n            }\n\n            pre[class*=\"language-\"] {\n            padding: 0.8rem;\n            margin: 0;\n            overflow-x: auto;\n            border-radius: 0 0 6px 6px;\n            }\n\n            .line-numbers .line-numbers-rows {\n            border-right: none !important;\n            padding-right: 1rem !important;\n            top: -2.5px !important;\n            left: -39px !important;\n            position: absolute;\n            height: 100%;\n            -webkit-user-select: none;\n            -moz-user-select: none;\n            -ms-user-select: none;\n            user-select: none;\n            }\n\n            .line-numbers-rows > span {\n            padding: 0;\n            border: 0;\n            display: block;\n            counter-increment: linenumbers;\n            color: hsl(var(--muted)) !important;\n            font-size: 14px;\n            line-height: 1.5;\n            text-align: right;\n            }\n\n            :not(pre) > code[class*=\"language-\"] {\n            padding: 0.3em;\n            border-radius: 0.3em;\n            color: #db4c69;\n            background: var(--code-background);\n            }\n            /************\\*\\*\\*\\*************\\*************\\*\\*\\*\\*************\n\n            - Tokens (No changes here, kept for completeness)\n            \\*/\n            .namespace {\n            opacity: 0.7;\n            }\n\n            .token.doctype .token.doctype-tag {\n            color: #569cd6;\n            }\n\n            .token.doctype .token.name {\n            color: #9cdcfe;\n            }\n\n            .token.comment,\n            .token.prolog {\n            color: #6a9955;\n            }\n\n            .token.punctuation,\n            .language-html .language-css .token.punctuation,\n            .language-html .language-javascript .token.punctuation {\n            color: #d4d4d4;\n            }\n\n            .token.property,\n            .token.tag,\n            .token.boolean,\n            .token.number,\n            .token.constant,\n            .token.symbol,\n            .token.inserted,\n            .token.unit {\n            color: #b5cea8;\n            }\n\n            .token.selector,\n            .token.attr-name,\n            .token.string,\n            .token.char,\n            .token.builtin,\n            .token.deleted {\n            color: #ce9178;\n            }\n\n            .language-css .token.string.url {\n            text-decoration: underline;\n            }\n\n            .token.operator,\n            .token.entity {\n            color: #d4d4d4;\n            }\n\n            .token.operator.arrow {\n            color: #569cd6;\n            }\n\n            .token.atrule {\n            color: #ce9178;\n            }\n\n            .token.atrule .token.rule {\n            color: #c586c0;\n            }\n\n            .token.atrule .token.url {\n            color: #9cdcfe;\n            }\n\n            .token.atrule .token.url .token.function {\n            color: #dcdcaa;\n            }\n\n            .token.atrule .token.url .token.punctuation {\n            color: #d4d4d4;\n            }\n\n            .token.keyword {\n            color: #d681ce;\n            }\n\n            .token.keyword.module,\n            .token.keyword.control-flow {\n            color: #c586c0;\n            }\n\n            .token.function,\n            .token.function .token.maybe-class-name {\n            color: #dcdcaa;\n            }\n            .token.regex {\n            color: #d16969;\n            }\n\n            .token.important {\n            color: #569cd6;\n            }\n\n            .token.italic {\n            font-style: italic;\n            }\n\n            .token.constant {\n            color: #4ec9b0;\n            }\n\n            .token.class-name,\n            .token.maybe-class-name {\n            color: #4ec9b0;\n            }\n\n            .token.console {\n            color: #9cdcfe;\n            }\n\n            .token.parameter {\n            color: #9cdcfe;\n            }\n\n            .token.interpolation {\n            color: #9cdcfe;\n            }\n\n            .token.punctuation.interpolation-punctuation {\n            color: #569cd6;\n            }\n\n            .token.boolean {\n            color: #569cd6;\n            }\n\n            .token.property,\n            .token.variable,\n            .token.imports .token.maybe-class-name,\n            .token.exports .token.maybe-class-name {\n            color: #9cdcfe;\n            }\n\n            .token.selector {\n            color: #d7ba7d;\n            }\n\n            .token.escape {\n            color: #d7ba7d;\n            }\n\n            .token.tag {\n            color: #569cd6;\n            }\n\n            .token.tag .token.punctuation {\n            color: #c1c1c1;\n            }\n\n            .token.cdata {\n            color: #808080;\n            }\n\n            .token.attr-name {\n            color: #9cdcfe;\n            }\n\n            .token.attr-value,\n            .token.attr-value .token.punctuation {\n            color: #ce9178;\n            }\n\n            .token.attr-value .token.punctuation.attr-equals {\n            color: #d4d4d4;\n            }\n\n            .token.entity {\n            color: #569cd6;\n            }\n\n            .token.namespace {\n            color: #4ec9b0;\n            }\n\n            .plain-text {\n            color: #fff;\n            }\n\n            pre[class*=\"language-javascript\"],\n            code[class*=\"language-javascript\"],\n            pre[class*=\"language-jsx\"],\n            code[class*=\"language-jsx\"],\n            pre[class*=\"language-typescript\"],\n            code[class*=\"language-typescript\"],\n            pre[class*=\"language-tsx\"],\n            code[class*=\"language-tsx\"] {\n            color: #569cd6;\n            }\n\n            pre[class*=\"language-css\"],\n            code[class*=\"language-css\"] {\n            color: #ce9178;\n            }\n\n            pre[class*=\"language-html\"],\n            code[class*=\"language-html\"] {\n            color: #d4d4d4 !important;\n            }\n\n            .language-regex .token.anchor {\n            color: #dcdcaa;\n            }\n\n            .language-html .token.punctuation {\n            color: #808080;\n            }\n            /************\\*\\*\\*\\*************\\*************\\*\\*\\*\\*************\n\n            - Line highlighting (No changes here, kept for completeness)\n            _/\n            pre[class_=\"language-\"] > code[class*=\"language-\"] {\n            position: relative;\n            z-index: 1;\n            }\n\n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Adding a code language\">\n      this step is <MdxBadge>Optional</MdxBadge> it shows a the language of your code\n      you can pass an <MdxBadge>Images</MdxBadge> or <MdxBadge>Icons</MdxBadge> but if you choose icons make sure the library that you choose let you edit in colors of the icon\n      to do that you create a folder called <MdxBadge>language-icon.ts</MdxBadge> and add the following code in it:\n\n      <Pre>\n        {`import type { JSX } from \"react\"\n          import Image from \"next/image\"\n          import { Terminal } from \"lucide-react\"\n\n          export const languageIcons: Record<string, JSX.Element> = {\n            javascript: (\n              <Image\n                src=\"/icons/javascript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"javascript\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            js: (\n              <Image\n                src=\"/icons/javascript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"javascript\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            jsx: (\n              <Image\n                src=\"/icons/javascript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"jsx\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            typescript: (\n              <Image\n                src=\"/icons/typescript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"typescript\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            ts: (\n              <Image\n                src=\"/icons/typescript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"typescript\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            tsx: (\n              <Image\n                src=\"/icons/typescript.svg\"\n                className=\"w-[18px] h-[18px]\"\n                alt=\"typescript\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            html: (\n              <Image\n                src=\"/icons/html.svg\"\n                alt=\"html\"\n                className=\"w-[18px] h-[18px]\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            css: (\n              <Image\n                src=\"/icons/css.svg\"\n                alt=\"css\"\n                className=\"w-[18px] h-[18px]\"\n                width={10}\n                height={10}\n                quality={100}\n              />\n            ),\n            bash: <Terminal className=\"w-5 h-5 text-gray-100 rounded-lg\" />,\n          }`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Now, Feel  to use it and customize it\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"`}\n  </Pre>\n\n  <Pre>\n    {`import Pre from \"@/components/ui/pre\"\n      import { cn } from \"@/lib/utils\"\n\n      const CodeBlockDemo = ({ className }: { className: string }) => {\n      const ExampleCode = \\`function MyComponent(props) {\n      return (\n\n      <div>\n      <h1>Hello, {props.name}!</h1>\n      <p>This is an example React component.</p>\n      </div>\n      )};\\` return (\n      <Pre className={cn(\"\", className)} highlightLines={[4]} showLineNumbers={true}>\n      {ExampleCode}\n      </Pre>\n      ) }\n\n      export default CodeBlockDemo`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/collapsible",
    "title": "Collapsible",
    "description": "Collapsible component for hiding and showing content.",
    "content": "<ComponentPreview name=\"collapsible-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-collapsible `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Collapsible Component\">\n      <ComponentSource name=\"collapsible-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n        Collapsible,\n        CollapsibleContent,\n        CollapsibleTrigger,\n      } from \"@/components/ui/collapsible\"`}\n  </Pre>\n\n  <Pre>\n    {`<Collapsible>\n      <CollapsibleTrigger>Can I use this in my project?</CollapsibleTrigger>\n      <CollapsibleContent>\n        Yes. Free to use for personal and commercial projects. No attribution\n        required.\n      </CollapsibleContent>\n      </Collapsible>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/data-picker",
    "title": "Data Picker",
    "description": "Data Picker component documentation.",
    "content": "<ComponentPreview name=\"date-picker-demo\" />\n\n## Installation\n\nThe Date Picker is built using a composition of  <MdxBadge>\\<Popover /></MdxBadge> component  and the  <MdxBadge>\\<Calendar /></MdxBadge> component.\n\nSee installation instructions for the [Popover](https://alphabyte-labs.vercel.app/docs/components/popover) and the [Calendar](https://alphabyte-labs.vercel.app/docs/components/calendar/) components.\nfor quick installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover react-day-picker@8.10.1 date-fns `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose\">\n  <Pre>\n    {`\"use client\"\n\n      import * as React from \"react\"\n      import { format } from \"date-fns\"\n      import { CalendarIcon } from \"lucide-react\"\n\n      import { cn } from \"@/lib/utils\"\n      import { Button } from \"@/components/library/button\"\n      import { Calendar } from \"@/components/library/calendar\"\n      import {\n      Popover,\n      PopoverContent,\n      PopoverTrigger,\n      } from \"@/components/library/popover\"\n\n      export default function DatePickerDemo() {\n       const [date, setDate] = React.useState<Date>()\n\n      return (\n\n      <Popover>\n      <PopoverTrigger asChild>\n      <Button\n      variant={\"outline\"}\n      className={cn(\n      \"w-[240px] justify-start text-left font-normal\",\n      !date && \"text-muted-foreground\"\n      )} >\n      <CalendarIcon />\n      {date ? format(date, \"PPP\") : <span>Pick a date</span>}\n      </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n      <Calendar\n                   mode=\"single\"\n                   selected={date}\n                   onSelect={setDate}\n                   initialFocus\n                />\n      </PopoverContent>\n      </Popover>\n      )\n      }`}\n  </Pre>\n</div>\n\n## Examples\n\n### Date Picker Range\n\n<ComponentPreview name=\"date-picker-demo\" variant=\"range\" />\n"
  },
  {
    "slug": "/components/diagrams",
    "title": "Diagrams",
    "description": "Add various diagram types, including flowcharts, decision trees and entity-relationship diagrams.",
    "content": "<ComponentPreview name=\"diagram-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"install dependencies\">\n      First, To Start Creating Diagrams in your next.js app you need to install a library called <span className=\"underline text-gray-950\">[Mermaid](https://mermaid.js.org/)</span> :\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge mermaid`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Diagram Component\">\n      <ComponentSource name=\"diagram-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Here you go, you can start creating diagrams like a designer\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import Mermaid from \"@/components/library/mermaid\"`}\n  </Pre>\n\n  <Pre>\n    {`const DiagramsDemo = () => {\n      return (\n        <Mermaid\n          chart={\\`graph TD;\n        Start --> Task1;\n        Task1 --> Task2;\n        Task2 --> End;\\`}\n        />\n      )\n      }\n\n      export default DiagramsDemo`}\n  </Pre>\n</div>\n\n## Example\n\n### Flowchart\n\n<ComponentPreview name=\"diagram-demo\" />\n\n### Decision Tree\n\nDecision trees illustrate choices and possible outcomes, making them ideal for decision-making workflows or processes involving multiple paths.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"decision-tree\" />\n\n### Entity-Relationship Diagram\n\nEntity-relationship diagrams (ERDs) are used to model relationships between entities in a system. They are widely used in database design and system architecture planning.\n\n<ComponentPreview name=\"diagram-demo\" variant=\"entity-relationship\" />\n\nEach of these diagrams serves a specific purpose and Mermaid makes it easy to generate them dynamically. Feel free to experiment with the provided code snippets and adapt them to your needs.\n"
  },
  {
    "slug": "/components/dialog",
    "title": "Dialog",
    "description": "A dialog component",
    "content": "<ComponentPreview name=\"dialog-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Dialog Component\">\n      <ComponentSource name=\"dialog-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n      Dialog,\n      DialogContent,\n      DialogDescription,\n      DialogHeader,\n      DialogTitle,\n      DialogTrigger,\n      } from \"@/components/ui/dialog\"\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Dialog>\n      <DialogTrigger>Open</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Are you absolutely sure?</DialogTitle>\n          <DialogDescription>\n            This action cannot be undone. This will permanently delete your account\n            and remove your data from our servers.\n          </DialogDescription>\n        </DialogHeader>\n      </DialogContent>\n      </Dialog>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Destructive\n\n<ComponentPreview name=\"dialog-demo\" variant=\"destructive\" />\n\n### Adding custom position\n\n#### Top position\n\n<ComponentPreview name=\"dialog-demo\" variant=\"top\" />\n\n#### Bottom position\n\n<ComponentPreview name=\"dialog-demo\" variant=\"bottom\" />\n"
  },
  {
    "slug": "/components/drawer",
    "title": "Drawer",
    "description": "Drawer component",
    "content": "<ComponentPreview name=\"drawer-demo\" />\n\n## About\n\n<MdxBadge>Drawer</MdxBadge> is built on top of\n[Vaul](https://github.com/emilkowalski/vaul) by\n[emilkowalski\\_](https://x.com/emilkowalski_). ## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge vaul`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Drawer Component\">\n      <ComponentSource name=\"drawer-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Edit layout.tsx for background scaling\">\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"}\n      <MdxBadge>vaul-drawer-wrapper</MdxBadge> to support scaling:\n\n      <Pre highlightLines={[4]}>\n        {`<html lang=\"en\" suppressHydrationWarning>\n          <body className=\"bg-background font-medium antialiased min-h-svh\" suppressHydrationWarning>\n              {/* Create a div and passe it vaul-drawer-wrapper like this way */}\n              <div vaul-drawer-wrapper=\"\">\n                 <div className=\"relative flex min-h-svh flex-col bg-background\">\n                    {children}\n                 </div>\n              </div>\n           </body>\n          </html>`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n      Drawer,\n      DrawerClose,\n      DrawerContent,\n      DrawerDescription,\n      DrawerFooter,\n      DrawerHeader,\n      DrawerTitle,\n      DrawerTrigger,\n      } from \"@/components/ui/drawer\"\n      `}\n  </Pre>\n\n  <Pre>\n    {`<Drawer>\n      <DrawerTrigger>Open</DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>Are you absolutely sure?</DrawerTitle>\n          <DrawerDescription>This action cannot be undone.</DrawerDescription>\n        </DrawerHeader>\n        <DrawerFooter>\n          <Button>Submit</Button>\n          <DrawerClose>\n            <Button variant=\"outline\">Cancel</Button>\n          </DrawerClose>\n        </DrawerFooter>\n      </DrawerContent>\n      </Drawer>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Nested Drawer\n\n<ComponentPreview name=\"drawer-demo\" variant=\"nested\" />\n"
  },
  {
    "slug": "/components/dropdown-menu",
    "title": "Dropdown Menu",
    "description": "Dropdown menu component for displaying a list of items.",
    "content": "<ComponentPreview name=\"dropdown-menu-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-dropdown-menu class-variance-authority`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Dropdown-menu Component\">\n      <ComponentSource name=\"dropdown-menu-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n        DropdownMenu,\n        DropdownMenuContent,\n        DropdownMenuItem,\n        DropdownMenuLabel,\n        DropdownMenuSeparator,\n        DropdownMenuTrigger\n      } from '@/components/library/dropdown-menu'`}\n  </Pre>\n\n  <Pre>\n    {`<DropdownMenu>\n        <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\">Open Menu</Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent className=\"w-56\">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>\n                <Edit className=\"mr-2 h-4 w-4\" />\n                <span>Edit Profile</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem>\n                <Download className=\"mr-2 h-4 w-4\" />\n                <span>Download</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem disabled>\n                <Share className=\"mr-2 h-4 w-4\" />\n                <span>Share (Disabled)</span>\n            </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Checkbox\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"checkbox\" />\n\n### Radio\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"radio\" />\n\n### Nested\n\n<ComponentPreview name=\"dropdown-menu-demo\" variant=\"nested\" />\n"
  },
  {
    "slug": "/components/folder-structure",
    "title": "Folder Structure",
    "description": "This section provides an overview of file structures and their implementation using the FileTree component.",
    "content": "<ComponentPreview name=\"folder-tree-demo\" />\n\n## About\n\nFoldet structure is built on top of <MdxBadge>sidebar</MdxBadge> from [shadcn/ui](https://ui.shadcn.com/docs/components/sidebar)\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install dependencies\">\n      First , you need to install dependencies\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n\n      <Pre className=\"language-bash\">\n        {`npx shadcn@latest add sidebar`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create the hook\">\n      create in your root directory folder called <MdxBadge>hook</MdxBadge> and create a file called <MdxBadge>seSubmenuState.ts </MdxBadge>\n\n      <Pre className=\"language-typescript\" folderPath=\"hooks/use-submenu-state.ts\">\n        {`import { useState, useCallback } from \"react\"\n\n          export function useSubmenuState(initialState: Record<string, boolean> = {}) {\n           const [openStates, setOpenStates] = useState(initialState)\n\n          const toggleSubmenu = useCallback((id: string) => {\n          setOpenStates((prev) => ({ ...prev, [id]: !prev[id] }))\n          }, [])\n\n          return { openStates, toggleSubmenu }\n          }\n          `}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create Folder-Tree Component\">\n      <ComponentSource name=\"folder-tree-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Create folder menu\">\n      and create another file in your <MdxBadge>component</MdxBadge> folder called <MdxBadge>FolderTreeMenu</MdxBadge> and add the following code:\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeMenu.tsx\">\n          {`\"use client\"\n\n            import { ChevronDown, ChevronRight } from \"lucide-react\"\n\n            import { cn } from \"@/lib/utils\"\n            import { useSubmenuState } from \"@/hooks/use-submenu-state\"\n            import {\n            Sidebar,\n            SidebarContent,\n            SidebarHeader,\n            SidebarMenu,\n            SidebarMenuButton,\n            SidebarMenuItem,\n            SidebarMenuSub,\n            SidebarMenuSubButton,\n            SidebarMenuSubItem,\n            } from \"@/components/ui/sidebar\"\n\n            interface MenuItem {\n            id: string\n            title: string\n            items?: MenuItem[]\n            }\n\n            interface CardSidenavProps {\n            items: MenuItem[]\n            }\n\n            export function FolderTreeMenu({ items } : CardSidenavProps) {\n             const { openStates, toggleSubmenu } = useSubmenuState()\n\n            const renderMenuItem = (item: MenuItem) => {\n            const hasSubItems = item.items && item.items.length > 0\n            const isOpen = openStates[item.id]\n\n                return (\n                   <SidebarMenuItem key={item.id}>\n                      <SidebarMenuButton\n                         onClick={() => hasSubItems && toggleSubmenu(item.id)}\n                         className={cn(\"w-full justify-between\", hasSubItems && \"font-semibold\")}\n                      >\n                         {item.title}\n                         {hasSubItems && (\n                            <span className=\"ml-auto\">\n                               {isOpen ? <ChevronDown className=\"h-4 w-4\" /> : <ChevronRight className=\"h-4 w-4\" />}\n                            </span>\n                         )}\n                      </SidebarMenuButton>\n                      {hasSubItems && (\n                         <SidebarMenuSub>\n                            {isOpen &&\n                               item.items!.map((subItem) => (\n                                  <SidebarMenuSubItem key={subItem.id}>\n                                     <SidebarMenuSubButton>{subItem.title}</SidebarMenuSubButton>\n                                  </SidebarMenuSubItem>\n                               ))}\n                         </SidebarMenuSub>\n                      )}\n                   </SidebarMenuItem>\n                )\n\n            }\n\n            return (\n\n            <Sidebar className=\"w-64 rounded-lg border bg-card text-card-foreground shadow-sm\">\n            <SidebarHeader className=\"px-4 py-2\">\n              <h2 className=\"text-lg font-semibold\">Menu</h2>\n            </SidebarHeader>\n            <SidebarContent>\n              <SidebarMenu>{items.map(renderMenuItem)}</SidebarMenu>\n            </SidebarContent>\n            </Sidebar>\n            ) } `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Create example folder\">\n      And last file create in your <MdxBadge>component</MdxBadge> folder file called <MdxBadge>FolderExample.tsx</MdxBadge> and add the following code :\n\n      <CodeBlockWrapper>\n        <Pre className=\"language-typescript\" folderPath=\"components/FolderExample.tsx\">\n          {`\"use client\"\n\n            import { FolderTree } from \"./FolderTree\"\n\n            type FileItem = {\n            id: string\n            name: string\n            type: \"file\" | \"folder\"\n            path?: string\n            items?: FileItem[]\n            }\n\n            const fileStructure: FileItem[] = [\n            {\n            id: \"app\",\n            name: \"app\",\n            type: \"folder\",\n            items: [\n            {\n            id: \"layout\",\n            name: \"layout.js\",\n            type: \"file\",\n            },\n            {\n            id: \"marketing\",\n            name: \"(marketing)\",\n            type: \"folder\",\n            items: [\n            {\n            id: \"about\",\n            name: \"about\",\n            type: \"folder\",\n            path: \"/about\",\n            items: [\n            {\n            id: \"about-page\",\n            name: \"page.js\",\n            type: \"file\",\n            },\n            ],\n            },\n            {\n            id: \"blog\",\n            name: \"blog\",\n            type: \"folder\",\n            path: \"/blog\",\n            items: [\n            {\n            id: \"blog-page\",\n            name: \"page.js\",\n            type: \"file\",\n            },\n            ],\n            },\n            ],\n            },\n            {\n            id: \"shop\",\n            name: \"(shop)\",\n            type: \"folder\",\n            items: [\n            {\n            id: \"account\",\n            name: \"account\",\n            type: \"folder\",\n            path: \"/account\",\n            items: [\n            {\n            id: \"account-page\",\n            name: \"page.js\",\n            type: \"file\",\n            },\n            ],\n            },\n            ],\n            },\n            ],\n            },\n            ]\n\n            export default function FolderTreeExample() {\n             return (\n                <div className=\"flex items-center justify-center \">\n                   <FolderTree items={fileStructure} />\n                </div>\n             )\n            } \n            `}\n        </Pre>\n      </CodeBlockWrapper>\n    </StepItem>\n\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space space-y-4\">\n  <p className=\"text-base\">\n    start use it by creating an object with the following properties :\n  </p>\n\n  <Pre className=\"language-typescript\">\n    {`type FileItem = {\n       id: string\n       name: string\n       type: \"file\" | \"folder\"\n       path?: string\n       items?: FileItem[]\n      }\n      const fileStructure: FileItem[] = [\n       {\n        // your have to give it an id\n          id: \"app\",\n          name: \"app\",\n          type: \"folder\",\n          items: [\n             {\n                id: \"layout\",\n                name: \"layout.js\",\n                type: \"file\",\n             },\n             {\n                id: \"marketing\",\n                name: \"(marketing)\",\n                type: \"folder\",\n                items: [\n                   {\n                      id: \"about\",\n                      name: \"about\",\n                      type: \"folder\",\n                      path: \"/about\",\n                   },\n                ],\n             },\n          ],\n       },\n      ]\n      `}\n  </Pre>\n\n  <p className=\"text-base\">\n    and then create a <MdxBadge>div tag</MdxBadge> and import  the obj in it\n  </p>\n\n  <Pre className=\"language-typescript\" folderPath=\"components/FolderTreeExample.tsx\">\n    {`\"use client\"\n\n      import { FileExplorerNav } from \"./FolderTree\"\n      export default function FolderTreeExample() {\n       return (\n          <div className=\"flex items-center justify-center \">\n             <FolderTree items={fileStructure} />\n          </div>\n       )\n      }  \n      `}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/input",
    "title": "Input",
    "description": "A Input component",
    "content": "<ComponentPreview name=\"input-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Input Component\">\n      <ComponentSource name=\"input-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Input } from \"@/components/library/input\"`}\n  </Pre>\n\n  <Pre>\n    {`const InputDemo = () => {\n      return <Input className=\"w-56\" type=\"email\" placeholder=\"Email\" />\n      }\n\n      export default InputDemo`}\n  </Pre>\n</div>\n\n## Examples\n\n### Default\n\n<ComponentPreview name=\"input-demo\" />\n\n### File\n\nupload file\n\n<ComponentPreview name=\"input\" variant=\"file\" />\n\n### Disabled\n\n<ComponentPreview name=\"input\" variant=\"disabled\" />\n\n### With Label\n\n<ComponentPreview name=\"input\" variant=\"label\" />\n\n### With button\n\n<ComponentPreview name=\"input\" variant=\"button\" />\n"
  },
  {
    "slug": "/components/label",
    "title": "Label",
    "description": "A Label component",
    "content": "<ComponentPreview name=\"label-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Label Component\">\n      <ComponentSource name=\"label-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Checkbox } from \"@/components/library/checkbox\"\n      import { Label } from \"@/components/library/label\"\n      `}\n  </Pre>\n\n  <Pre>\n    {`\n      const LabelDemo = () => {\n      return (\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox id=\"terms\" />\n          <Label\n            htmlFor=\"terms\"\n            className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n          >\n            Accept terms and conditions\n          </Label>\n        </div>\n      )\n      }\n\n      export default LabelDemo`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/note",
    "title": "Note Component",
    "description": "Introducing the Note Component Communicating Effectively in Your UI",
    "content": "**Learn how to use the versatile Note component to communicate important information effectively within your user interface.**\n\n<ComponentPreview name=\"note-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Note Component\">\n      <ComponentSource name=\"note-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre className=\"language-typescript\">\n    {`import { Note } from \"@/components/Note\"`}\n  </Pre>\n\n  <Pre className=\"language-tsx\">\n    {`import { Note } from \"@/components/library/note\"\n\n      const NoteDemo = () => {\n      return <Note variant=\"info\">This is an informational note.</Note>\n      }\n\n      export default NoteDemo`}\n  </Pre>\n</div>\n\n## Example\n\n### Standard Note\n\n<ComponentPreview name=\"note-demo\" />\n\n### Success Note\n\n<ComponentPreview name=\"note-demo\" variant=\"success\" />\n\n### Warning Note\n\n<ComponentPreview name=\"note-demo\" variant=\"warning\" />\n\n### Danger Note\n\n<ComponentPreview name=\"note-demo\" variant=\"error\" />\n\n## Closable Notes\n\nTo allow users to dismiss the note, set the <MdxBadge>closable</MdxBadge> prop to <MdxBadge>true</MdxBadge>.\n\n<ComponentPreview name=\"note-demo\" variant=\"closable\" />\n"
  },
  {
    "slug": "/components/popover",
    "title": "Popover",
    "description": "Popover component",
    "content": "<ComponentPreview name=\"popover-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-popover`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Popover Component\">\n      <ComponentSource name=\"popover-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n      Popover,\n      PopoverContent,\n      PopoverTrigger,\n      } from \"@/components/ui/popover\"`}\n  </Pre>\n\n  <Pre>\n    {`<Popover>\n      <PopoverTrigger asChild>\n        <Button>Click me</Button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <p>Your content here</p>\n      </PopoverContent>\n      </Popover>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/product-card",
    "title": "Product Card",
    "description": "This section provides an overview of Introduction.",
    "content": "<ComponentPreview name=\"product-card-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Product Card Component\">\n      <ComponentSource name=\"product-card-demo\" />\n    </StepItem>\n  </Step>\n</div>\n"
  },
  {
    "slug": "/components/scroll-area",
    "title": "Scroll Area",
    "description": "Scroll Area Component",
    "content": "<ComponentPreview name=\"scroll-area-demo\" />\n\n## Installation\n\n<div className=\"not-prose md:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you'll need to install the necessary dependencies for styling and utility functions. These include <MdxBadge>clsx</MdxBadge> for conditional class names and <MdxBadge>tailwind-merge</MdxBadge> to handle Tailwind CSS class conflicts efficiently.\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-scroll-area`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Scroll-Area Component\">\n      <ComponentSource name=\"scroll-area\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { ScrollArea } from \"@/components/ui/scroll-area\"`}\n  </Pre>\n\n  <Pre>\n    {`<ScrollArea className=\"h-[200px] w-[350px] rounded-md border p-4\">\n      Jokester began sneaking into the castle in the middle of the night and leaving\n      jokes all over the place: under the king's pillow, in his soup, even in the\n      royal toilet. The king was furious, but he couldn't seem to stop Jokester. And\n      then, one day, the people of the kingdom discovered that the jokes left by\n      Jokester were so funny that they couldn't help but laugh. And once they\n      started laughing, they couldn't stop.\n      </ScrollArea>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Horizontal\n\n<ComponentPreview name=\"scroll-area-demo\" variant=\"horizontal\" />\n"
  },
  {
    "slug": "/components/separator",
    "title": "Separator",
    "description": "Separator",
    "content": "<ComponentPreview name=\"separator-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-separator`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Separator Component\">\n      <ComponentSource name=\"separator-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { Separator } from \"@/components/library/separator\"`}\n  </Pre>\n\n  <Pre>\n    {`<Separator />`}\n  </Pre>\n</div>\n\n## Examples\n\n### Vertical\n\n<ComponentPreview name=\"separator-demo\" variant=\"vertical\" />\n\n### Weight\n\n#### Ultralight\n\n<ComponentPreview name=\"separator-demo\" variant=\"ultralight\" />\n\n#### Light\n\n<ComponentPreview name=\"separator-demo\" variant=\"light\" />\n\n#### Regular\n\n<ComponentPreview name=\"separator-demo\" variant=\"regular\" />\n"
  },
  {
    "slug": "/components/sheet",
    "title": "Sheet",
    "description": "A sheet is a component that slides in from the bottom of the screen, typically used for displaying additional content or options without navigating away from the current screen.",
    "content": "<ComponentPreview name=\"sheet-demo\" />\n\n<div className=\"not-prose mdx:px-0 px-4\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge @radix-ui/react-dialog`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Sheet Component\">\n      <ComponentSource name=\"sheet-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import {\n        Sheet,\n        SheetClose,\n        SheetContent,\n        SheetDescription,\n        SheetFooter,\n        SheetHeader,\n        SheetTitle,\n        SheetTrigger\n      } from '@/components/library/sheet';`}\n  </Pre>\n\n  <Pre>\n    {`<Sheet>\n        <SheetTrigger asChild>\n            <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                <Settings size={16} />\n                Open Settings\n            </Button>\n        </SheetTrigger>\n        <SheetContent side=\"right\">\n        <SheetHeader>\n            <SheetTitle>Settings</SheetTitle>\n            <SheetDescription>Configure your application preferences here</SheetDescription>\n        </SheetHeader>\n        <div className=\"py-6\">\n            <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"dark-mode\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Dark Mode</Label>\n                    <Checkbox id=\"dark-mood\" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"notification\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Notification</Label>\n                    <Checkbox id=\"notification\" />\n                </div>\n                <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"email-updates\" className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">Email Updates</Label>\n                    <Checkbox id=\"email-updates\" />\n                </div>\n            </div>\n        </div>\n        <SheetFooter>\n            <SheetClose asChild>\n                <Button>Save Changes</Button>\n            </SheetClose>\n        </SheetFooter>\n      </SheetContent>\n      </Sheet>`}\n  </Pre>\n</div>\n\n## Examples\n\n### Control Side\n\n#### Top\n\n<ComponentPreview name=\"sheet-demo\" variant=\"top\" />\n\n#### Right\n\n<ComponentPreview name=\"sheet-demo\" variant=\"right\" />\n\n#### Bottom\n\n<ComponentPreview name=\"sheet-demo\" variant=\"bottom\" />\n\n#### Left\n\n<ComponentPreview name=\"sheet-demo\" variant=\"left\" />\n"
  },
  {
    "slug": "/components/sonner",
    "title": "Sonner",
    "description": "An opinionated toast component for React.",
    "content": "<ComponentPreview name=\"sonner-demo\" />\n\n## About\n\n<MdxBadge>Sonner</MdxBadge> is built on top of\n[Sonner](https://sonner.emilkowal.ski/) by\n[emilkowalski\\_](https://x.com/emilkowalski_). ## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First, you need to install dependencies:\n\n      <Pre>\n        {`npm install clsx tailwind-merge sonner next-themes`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Sonner Component\">\n      <ComponentSource name=\"sonner-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Edit layout.tsx for Toaster component\">\n      in Your main <MdxBadge>layout.tsx</MdxBadge> add{\" \"}<MdxBadge>\\<Toaster /></MdxBadge>{\" \"}to show the toast :\n\n      <Pre highlightLines={[8]}>\n        {`import { Toaster } from \"@/components/library/sonner\"\n\n          export default function RootLayout({ children }) {\n          return (\n            <html lang=\"en\">\n              <body>\n                <main>{children}</main>\n                <Toaster />\n              </body>\n            </html>\n           )\n          }`}\n      </Pre>\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-6\">\n  <Pre>\n    {`import { toast } from \"sonner\"`}\n  </Pre>\n\n  <Pre>\n    {`toast(\"Event has been created.\")`}\n  </Pre>\n</div>\n\n## Types\n\n### Success\n\n<ComponentPreview name=\"sonner-demo\" variant=\"success\" />\n\n### Info\n\n<ComponentPreview name=\"sonner-demo\" variant=\"info\" />\n\n### Warning\n\n<ComponentPreview name=\"sonner-demo\" variant=\"warning\" />\n\n### Error\n\n<ComponentPreview name=\"sonner-demo\" variant=\"error\" />\n\n### Loading\n\n<ComponentPreview name=\"sonner-demo\" variant=\"loading\" />\n\n### Custom\n\n<ComponentPreview name=\"sonner-demo\" variant=\"custom\" />\n"
  },
  {
    "slug": "/components/steps",
    "title": "Steps",
    "description": "This section provides an overview of Introduction.",
    "content": "<ComponentPreview name=\"steps-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm i clsx tailwind-merge`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Step component\">\n      <ComponentSource name=\"steps-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Be comfortable to use it and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <Pre>\n    {`import { Step, StepItem } from \"@/components/library/step\"`}\n  </Pre>\n\n  <Pre>\n    {`<Step>\n            <StepItem title=\"development\">localhost:3000</StepItem>\n            <StepItem title=\"production\">localhost:3000</StepItem>\n        </Step>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/tabs",
    "title": "Tabs",
    "description": "A tabs component",
    "content": "<ComponentPreview name=\"tabs-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tabs framer-motion`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Tabs component\">\n      <ComponentSource name=\"tabs-demo\" />\n    </StepItem>\n\n    <StepItem title=\"Here you go, Now you can edit and customize it for your needs and make it yours\" />\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"not-prose space-y-4\">\n  <p className=\"text-base\">\n    First import the tabs component in your file like this:\n  </p>\n\n  <Pre>\n    {`import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/Tab\"`}\n  </Pre>\n\n  <p className=\"text-base\">Then you can use the tabs component like this:</p>\n\n  <Pre>\n    {`<Tabs defaultValue=\"preview\" className=\"mt-4\">\n             <TabsList className=\"inline-flex h-9 items-center text-muted-foreground w-full justify-start rounded-none border-b bg-transparent p-0 mb-2\">\n                <TabsTrigger value=\"preview\" className=\"active:shadow-none text-base\">\n                   tab 1\n                </TabsTrigger>\n                <TabsTrigger value=\"code\" className=\"active:shadow-none text-base\">\n                   tab 2\n                </TabsTrigger>\n             </TabsList>\n             <div>\n                <TabsContent value=\"preview\" className={cn(\"border rounded-xl\", className)}>\n                <div>\n                   Content One\n                </div>\n                </TabsContent>\n                <TabsContent value=\"code\" className=\"rounded-xl\">\n                <div>Content two</div>\n                </TabsContent>\n             </div>\n          </Tabs>`}\n  </Pre>\n</div>\n"
  },
  {
    "slug": "/components/tooltip",
    "title": "Tooltip",
    "description": "A tooltip is a small pop-up box that appears when a user hovers over an element, providing additional information about that element.",
    "content": "<ComponentPreview name=\"tooltip-demo\" />\n\n## Installation\n\n<div className=\"not-prose px-4 md:px-0\">\n  <Step>\n    <StepItem title=\"Install Dependencies\">\n      First , you need to install dependencies:\n\n      <Pre className=\"language-bash\">\n        {`npm install clsx tailwind-merge @radix-ui/react-tooltip`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Create utils.ts\">\n      <ComponentUtilsText />\n\n      <ComponentUtils />\n    </StepItem>\n\n    <StepItem title=\"Create Tooltip Component\">\n      <ComponentSource name=\"tooltip-demo\" />\n    </StepItem>\n  </Step>\n</div>\n\n## Usage\n\n<div className=\"space-y-6\">\n  <Pre>\n    {`import { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider } from \"@/components/ui/tooltip\"`}\n  </Pre>\n\n  <Pre>\n    {`<TooltipProvider>\n        <Tooltip>\n            <TooltipTrigger asChild>Hover</TooltipTrigger>\n                <TooltipContent >\n                    <p>Default Tooltip</p>\n                </TooltipContent>\n            </Tooltip>\n        </TooltipProvider>\n      `}\n  </Pre>\n</div>\n\n## Examples\n\n### Top Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"top\" />\n\n### Right Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"right\" />\n\n### Bottom Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"bottom\" />\n\n### Left Tooltip\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"left\" />\n\n### Tooltip with delay\n\nyou can set a delay for the tooltip to appear after hovering over the trigger element. This can be useful to prevent the tooltip from appearing too quickly when the user hovers over the trigger element.\n\n<ComponentPreview name=\"tooltip-demo\" variant=\"delay\" />\n"
  },
  {
    "slug": "/installation",
    "title": "Installation",
    "description": "Your gateway to mastering modern software development.",
    "content": "to use our component you should using [next.js](https://nextjs.org/)\n\n## System Requirements\n\n* [Node.js 18.18](https://nodejs.org/) or later.\n* macOS, Windows (including WSL), and Linux are supported.\n\n<div className=\"not-prose px-4\">\n  <Note>If Your using windows recommended to use WSL with windows to have all the features in linux <br /> but if you don't have don't worry windows s also great choice</Note>\n\n  <Step>\n    <StepItem title=\"Step 1: Create Your Next.js Project\">\n      Start by running the following command in your terminal to set up a new Next.js project:\\\n      To verify installation, run:\n\n      <Pre>\n        {`npx create-next-app@latest`}\n      </Pre>\n    </StepItem>\n\n    <StepItem title=\"Step 2: Configure Your Project\">\n      During the setup, you'll be prompted to configure your project. Below is an example of the default prompts and options you'll encounter:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \n          Would you like to use TypeScript? No / Yes  \n          Would you like to use ESLint? No / Yes  \n          Would you like to use Tailwind CSS? No / Yes  \n          Would you like your code inside a \\`src/\\` directory? No / Yes  \n          Would you like to use App Router? (recommended) No / Yes `}\n      </Pre>\n\n      <Note type=\"note\" title=\"Important Note\">\n        The above configurations are entirely customizable. If you choose to enable **TypeScript**, **ESLint**, **Tailwind CSS**, the **src** directory, or the **App Router**, the necessary setup files and configurations will be automatically added to your project.\n      </Note>\n    </StepItem>\n\n    <StepItem title=\"Step 3: React 19 & Next.js 15 Configurations (Optional)\">\n      If you're using **React 19** and **Next.js 15**, you may encounter an additional configuration option for Turbopack:\n\n      <Pre>\n        {`What is your project named? \\`put your project name here\\`  \n          Would you like to use TypeScript? No / Yes  \n          Would you like to use ESLint? No / Yes  \n          Would you like to use Tailwind CSS? No / Yes  \n          Would you like your code inside a \\`src/\\` directory? No / Yes  \n          Would you like to use App Router? (recommended) No / Yes  \n          Would you like to use Turbopack for \\`next dev\\`? » No / Yes`}\n      </Pre>\n\n      <Note variant=\"info\" closable>\n        **Turbopack** is a high-performance bundler and dev server for Next.js. Enabling this option ensures faster builds and an improved development experience.\n      </Note>\n    </StepItem>\n  </Step>\n</div>\n\n## Next Steps\n\nOnce your project is created, you’re ready to explore and integrate Alpha’s modern components and utilities to bring your vision to life. Start building your next-generation application today with Alpha! 🚀\n"
  },
  {
    "slug": "/introduction",
    "title": "Introduction",
    "description": "A set of beautifully-designed, accessible, and customizable components to help you build your component library. Open Source.",
    "content": "**This is not a component library. It is how you build your component library.**\n\nYou know how most traditional component libraries work: you install a package from NPM, import the components, and use them in your app.\n\nRoach works well until you need to customize a component to fit your design system or require one that isn’t included in the library. Often, you end up wrapping library components, writing workarounds to override styles, or mixing components from different libraries with incompatible APIs.\n\nThis is what **alphabyte-labs** aims to solve. It is built around the following principles:\n\n* **Open code** – The leading React framework for production-grade applications.\n* **Composition** – Combine Markdown and JSX for dynamic, interactive content.\n* **Distribution** – The go-to library for building seamless user interfaces.\n* **Beautiful Defaults** – Ensure reliability and scalability with this powerful JavaScript superset.\n\n## Welcome to Alphabyte-labs\n\nAt alphabyte, we believe that knowledge is the foundation of innovation. Our documentation hub is your ultimate resource for mastering software development, offering guides, tutorials, and insights designed to equip you with the tools to build impactful solutions.\n\n### What You’ll Discover\n\nWe Will Discover A Collection of components that real world components you can use it in you next.js application or any react.js application\n"
  },
  {
    "slug": "/rtl",
    "title": "Rtl",
    "description": "Rtl",
    "content": ""
  }
]